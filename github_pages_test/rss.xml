<?xml version="1.0" encoding="utf-8" ?>
<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/</id>
<title>Jenkins Blog</title>
<updated>2019-07-21T11:38:41+00:00</updated>
<link rel="self" type="application/atom+xml" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/rss.xml" />
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/" />
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/</id>
<title>Jenkins code coverage diff in pull requests</title>
<updated>2019-07-21T11:38:41+00:00</updated>
<published>2019-07-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/21/Jenkins-code-coverage-diff-for-pull-request/" />
<author>
<name>asavanchuk</name>
</author>
<category term="plugins"></category>
<category term="codecoverage"></category>
<summary>
Hello.


As you may know, during the last year GSoC Mr. Shenyu Zheng was working on the Jenkins Code Coverage API Plugin. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.


In lots of projects it is a common practice to track if unit tests code coverage doesn&#8217;t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.


How it works


When you build a PR in Jenkins, using plugins like Github or...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you may know, during the last year GSoC &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Mr. Shenyu Zheng&lt;/a&gt; was working on the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2018/code-coverage-api-plugin/&quot;&gt;Jenkins Code Coverage API Plugin&lt;/a&gt;. With Mr. Zheng we made a change so the plugin now is able to check the difference in code coverage between pull requests and target branches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In lots of projects it is a common practice to track if unit tests code coverage doesn’t decrease. So, with this plugin, you may skip separate services that track code coverage and have this feature right in your favorite CI system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-it-works&quot;&gt;&lt;/a&gt;How it works&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you build a PR in Jenkins, using plugins like &lt;a href=&quot;https://plugins.jenkins.io/github&quot;&gt;Github&lt;/a&gt; or &lt;a href=&quot;https://plugins.jenkins.io/cloudbees-bitbucket-branch-source&quot;&gt;Bitbucket Branch Source&lt;/a&gt;, that use &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/SCM+API+Plugin&quot;&gt;SCM API Plugin&lt;/a&gt;, your PR knows what target branch commit it is based on. (The commit may change because of &lt;em&gt;Discover pull requests from origin&lt;/em&gt; strategies). To calculate the diff, when you publish your coverage from PR, it looks for the target branch build for the commit that your PR was based on. If it finds the build on the target branch, it looks for any published code coverage for this target branch build. In case the build has it, the plugin calculates the percentage diff for the &lt;strong&gt;line coverage&lt;/strong&gt; and shows it on the pull request build page. Also, it gives you a link to the target branch build that was used for the comparison.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That it how it looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Decreased coverage&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-21-Jenkins-code-coverage-diff-for-pull-request/decrease.png&quot; alt=&quot;decrease&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Increased coverage&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-21-Jenkins-code-coverage-diff-for-pull-request/increase.png&quot; alt=&quot;increase&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-enable-code-coverage-diff-for-pull-requests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-enable-code-coverage-diff-for-pull-requests&quot;&gt;&lt;/a&gt;How to enable code coverage diff for pull requests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable this behavior you need to publish your code coverage with the &lt;code&gt;calculateDiffForChangeRequests&lt;/code&gt; flag equals &lt;code&gt;true&lt;/code&gt;, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(...) {
  ...
  &lt;span style=&quot;color:#777&quot;&gt;// Here we are using the istanbulCoberturaAdapter&lt;/span&gt;
  publishCoverage &lt;span style=&quot;color:#606&quot;&gt;adapters&lt;/span&gt;: [istanbulCoberturaAdapter(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;cobertura-coverage.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)],
    &lt;span style=&quot;color:#606&quot;&gt;sourceFileResolver&lt;/span&gt;: sourceFiles(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;NEVER_STORE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
    &lt;span style=&quot;color:#606&quot;&gt;calculateDiffForChangeRequests&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;

  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot;&gt;&lt;/a&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have some questions about this behavior, please ,ask me &lt;a href=&quot;mailto:dntsaygoodbye@gmail.com&quot;&gt;in email&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are free to contribute to this plugin to make it better for everyone. There are a lot of interesting features that can be added and issues that can be solved. Also, you can write some new plugins for other code coverage formats that use the Code Coverage API plugin as a base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the repo of the plugin - &lt;a href=&quot;https://github.com/jenkinsci/code-coverage-api-plugin&quot;&gt;Code Coverage API Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/</id>
<title>DevOps World - Jenkins World 2019 San Francisco: Lunch Time Demos</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/17/DevOps-World-Jenkins-World-2019-San-Francisco-Lunch-Demos/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="devopsworldjenkinsworld2019"></category>
<summary>
If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at DevOps World - Jenkins World 2019 San Francisco, come join us at the Jenkins and Jenkins X Community Booth!


If you don&#8217;t yet have your pass for DevOps World - Jenkins World 2019 San Francisco, and don&#8217;t want to miss out on the fun, you can get yours using JWFOSS for a 30% discount.


During lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:


Wednesday  August 14, 2019

12:10 - 12:25pm 	Faster Git	Mark Waite

Attendees will learn the...
</summary>
<content type="html">
&lt;div class=&quot;imageblock center center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/dwjw-2019/2019-dwjw-email-san-fran-rev.png&quot; alt=&quot;2019 dwjw email san fran&quot; height=&quot;256&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;, come join us at the Jenkins and Jenkins X Community Booth!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don’t yet have your pass for &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;, and don’t want to miss out on the fun, you can get yours using &lt;strong&gt;JWFOSS&lt;/strong&gt; for a 30% discount.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wednesday-august-14-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wednesday-august-14-2019&quot;&gt;&lt;/a&gt;Wednesday  August 14, 2019&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1210-1225pm-faster-gitmark-waite&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1210-1225pm-faster-gitmark-waite&quot;&gt;&lt;/a&gt;12:10 - 12:25pm 	Faster Git	&lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attendees will learn the techniques they can use with Jenkins to make their systems clone and update git repositories faster and with less disc space.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1225-1240pmobservability-in-jenkins-xoscar-medina&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1225-1240pmobservability-in-jenkins-xoscar-medina&quot;&gt;&lt;/a&gt;12:25 - 12:40pm	Observability in Jenkins X	&lt;a href=&quot;https://github.com/sharepointoscar&quot;&gt;Oscar Medina&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using Jenkins X, you’re already building at rapid pace.  However, most miss the opportunity to gain real insights into their build and release pipeline.  I’ll show you how you can increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.  This  entails modifying the declarative Tekton pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1240-1255pmjenkins-rest-a-jclouds-java-library-for-the-jenkins-rest-apimartin-danjou&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1240-1255pmjenkins-rest-a-jclouds-java-library-for-the-jenkins-rest-apimartin-danjou&quot;&gt;&lt;/a&gt;12:40 - 12:55pm	Jenkins-Rest, A JClouds Java Library for the Jenkins REST API	&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the Java-Rest library, we demonstrate how to submit a job to Jenkins, and track it to its completion, all from the command line, without ever touching the GUI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1255-110pmdevops-without-quality-an-it-horror-storylaura-keaton&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1255-110pmdevops-without-quality-an-it-horror-storylaura-keaton&quot;&gt;&lt;/a&gt;12:55 - 1:10pm		DevOps without Quality: An IT Horror Story	Laura Keaton&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps, the current IT Industry sweetheart, has a dark secret that has victimized organizations on their transformational journey. Investigate two case studies that left development and delivery teams in tatters and how quality engineering solutions could have prevented their disastrous outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;110-125pmsecuring-your-jenkins-container-pipeline-with-open-source-toolschristian-wiens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#110-125pmsecuring-your-jenkins-container-pipeline-with-open-source-toolschristian-wiens&quot;&gt;&lt;/a&gt;1:10 - 1:25pm	Securing Your Jenkins Container Pipeline with Open Source Tools	&lt;a href=&quot;https://github.com/cwiens1211&quot;&gt;Christian Wiens&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Discuss the security pitfalls of containers and how embedding an open source image scanning and policy based compliance tool like Anchore into your CI/CD pipeline can mitigate this risk.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thursday-august-15-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thursday-august-15-2019&quot;&gt;&lt;/a&gt;Thursday  August 15, 2019&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1225-1240pmresults-from-the-2019-jenkins-google-summer-of-codemartin-danjou&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1225-1240pmresults-from-the-2019-jenkins-google-summer-of-codemartin-danjou&quot;&gt;&lt;/a&gt;12:25 - 12:40pm	Results from the 2019 Jenkins Google Summer of Code	&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2019, the Jenkins project participated in the Google Summer of Code. This is an annual, international, program which encourages college-aged students to participate in open source projects during the summer break between classes. In 2019, we had dozens of applications and many student projects. In this session, we will showcase the students' projects and talk about what they bring to the Jenkins ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1240-1255pmsysdig-secure-jenkins-pluginmarky-jackson&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1240-1255pmsysdig-secure-jenkins-pluginmarky-jackson&quot;&gt;&lt;/a&gt;12:40 - 12:55pm		Sysdig Secure Jenkins Plugin		&lt;a href=&quot;https://github.com/markyjackson-taulia&quot;&gt;Marky Jackson&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://sysdig.com/products/secure&quot;&gt;Sysdig Secure&lt;/a&gt; is a container security platform that brings together docker image scanning and run-time protection to identify vulnerabilities, block threats, enforce compliance, and audit activity across your microservices. The Sysdig Secure Jenkins plugin can be used in a Pipeline job, or added as a build step to a Freestyle job, to automate the process of running an image analysis, evaluating custom policies against images, and performing security scans.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1255-110pmusing-react-for-plugin-uijeff-pearce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1255-110pmusing-react-for-plugin-uijeff-pearce&quot;&gt;&lt;/a&gt;12:55 - 1:10pm		Using React for plugin UI	&lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff Pearce&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The working hours plugin has a date driven UI. During this summer’s Google Summer of Code, our student rewrite the UI in React, so that we could take advantage open source modules such as calendar pickers. I’ll talk about how the student approached the UI, demonstrate the UI and talk about particular challenges we faces.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;110-125pmjenkins-gke-plugincraig-barber&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#110-125pmjenkins-gke-plugincraig-barber&quot;&gt;&lt;/a&gt;1:10 - 1:25pm		Jenkins GKE Plugin	&lt;a href=&quot;https://github.com/craigdbarber&quot;&gt;Craig Barber&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this demo we will showcase the Jenkins GKE plugin, newest addition to GCP’s suite of officially supported plugins. We’ll show how to leverage this plugin to deploy applications built in Jenkins pipelines to multiple clusters running in GKE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Grab your lunch and join us at the community theater!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/15/pipeline-config-history-plugin/</id>
<title>Introducing the Pipeline Configuration History Plugin</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-15T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/15/pipeline-config-history-plugin/" />
<author>
<name>pch-maintainers</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<summary>
Pipelines are the efficient and modern way how to create jobs in Jenkins.
To recognize pipeline changes quickly and easily, we developed the Pipeline Configuration History plugin.
This plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.


How everything started


It all started 10 years ago&#8201;&#8212;&#8201;with classical job types (e.g. Freestyle, Maven, etc.).
Every once in a while users contacted us because their jobs failed to build overnight.
Why did the job fail?
Was the failure related to a job configuration change?
The users' typical answer was: "We didn&#8217;t change anything!", but is...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot;&gt;Pipelines&lt;/a&gt; are the efficient and modern way how to create jobs in Jenkins.
To recognize pipeline changes quickly and easily, we developed the &lt;a href=&quot;https://plugins.jenkins.io/pipeline-config-history&quot;&gt;Pipeline Configuration History&lt;/a&gt; plugin.
This plugin detects changes of pipelines and provides the user an option to view changes between two builds (diffs) of pipeline configurations visibly and traceably.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-everything-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-everything-started&quot;&gt;&lt;/a&gt;How everything started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It all started 10 years ago — with classical job types (e.g. Freestyle, Maven, etc.).
Every once in a while users contacted us because their jobs failed to build overnight.
Why did the job fail?
Was the failure related to a job configuration change?
The users' typical answer was: &quot;We didn’t change anything!&quot;, but is that really true?
We thought about this and decided to develop a plugin that helped us solve this problem.
This was the idea and the beginning of &lt;a href=&quot;https://plugins.jenkins.io/jobConfigHistory&quot;&gt;Job Configuration History&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it was possible to view changes of job configurations (like other branches, JDK versions, etc.) and more often the reason for breaking builds were changes of job configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-pipeline-config-history/Diff_2.6.png&quot; alt=&quot;Screenshot of Job Configuration History&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the years the plugin got developed and is still under development.
New functions were added, that not only view job configurations, but also changes of global and agent configurations.
It is also possible to recover old configuration versions.
Today the plugin has more than 30,000 installations.
For many years JobConfigHistory relieves our daily work — with more than 3,000 Jenkins jobs!
Then there was a new type of job: &lt;strong&gt;Pipelines&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipelines-something-new-was-needed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipelines-something-new-was-needed&quot;&gt;&lt;/a&gt;Pipelines - something new was needed&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline jobs are fundamentally different than classical job types .
While classic job types are configured via the Jenkins GUI, Pipeline jobs are configured as code.
Every pipeline job indeed gets created via the Jenkins GUI, however that is not necessarily where the pipeline configuration is located.
Pipelines can be configured:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Directly in the Jenkins job as script.
The code gets inserted directly in the job configuration page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As Jenkinsfile in the source code management system (SCM): The pipeline configuration is defined in a text file (Jenkinsfile) in the SCM.
In the job itself only the path to the repository of the Jenkinsfile is configured.
During the build the Jenkinsfile gets checked out from the SCM and processed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a shared library: A part of the pipeline configuration gets moved to separate files that can be used by several jobs.
These files are also saved in the SCM.
Even so a Jenkinsfile is still needed (or a pipeline script in the job).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With every save operation of the job configuration, JobConfigHistory creates a copy of the actual job configuration if something has changed.
That only works for pipeline jobs if the pipeline configuration is inserted in the job configuration page as script.
Changes in the Jenkinsfile or the shared libraries are not detected by JobConfigHistory.
You have to use the SCM system to view changes of the Jenkinsfile or the shared libraries.
It is complex and time intensive to find a correlation between the time of a build and a change to the Jenkinsfile or shared library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new problem is much more than JobConfigHistory.  A new solution was needed to detect pipeline changes and show these changes in Jenkins.
So we developed Pipeline Configuration History.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During every pipeline run the Jenkinsfile and related shared libraries are saved in the &lt;code&gt;builds&lt;/code&gt; directory of the job.
Pipeline Configuration History saves changes of the pipeline files between the last run and the previous run as history events.
Therefore when a pipeline job ceases to build successfully, you can check if something has changed on any used pipeline file.
You can also see the build where changes occurred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-pipeline-config-history/image2019-5-15_13-44-54.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because a pipeline configuration can consist of several files where changes could have occurred, only files with changes between two builds are shown in the diff.
That makes the whole thing more compact and effective:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-pipeline-config-history/image2019-5-15_14-5-13.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But sometimes you may want to show more than the differences between pipeline files.  You may want to see which pipeline files are in use or the content of those files when they were used.
So it’s possible to view all files and their content.
If required you can download them as well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-07-pipeline-config-history/image2019-5-15_14-11-7.png&quot; alt=&quot;Screenshot of Pipeline Configuration History&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use Pipeline Configuration History successfully in production. It has helped us from the very first day as we solved problems that occurred due to pipeline configuration changes.
Pipeline Configuration History won’t replace Job Configuration History.
The plugins have different use cases.
Many times small changes on job or pipeline configurations also have big impacts.
Because of the correlation in time between changes of job or pipeline configurations and different build behavior, it is now possible to substantially reduce the time and effort to analyze build failures.
The Job Configuration History and Pipeline Configuration History plugins let us help our users in consulting and in solving issues.  We resolve problems much faster through easy access to the configuration history of jobs.  These plugins are essential for our daily work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/</id>
<title>Remoting over Apache Kafka plugin with Kafka launcher in Kubernetes</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/11/remoting-kafka-kubernetes-phase-1/" />
<author>
<name>longnguyen</name>
</author>
<category term="remoting"></category>
<category term="kafka"></category>
<category term="kubernetes"></category>
<category term="helm"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is Remoting over Apache Kafka with Kubernetes features. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.




Project Introduction


Current version of Remoting over Apache Kafka plugin requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn&#8217;t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:




Out-of-the-box solution to provision Apache Kafka cluster.


Dynamic agent...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am Long Nguyen from FPT University, Vietnam. My project for Google Summer of Code 2019 is &lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Remoting over Apache Kafka with Kubernetes features&lt;/a&gt;. This is the first time I have contributed for Jenkins and I am very excited to announce the features that have been done in Phase 1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;project-introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#project-introduction&quot;&gt;&lt;/a&gt;Project Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Current version of &lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin&quot;&gt;Remoting over Apache Kafka plugin&lt;/a&gt; requires users to manually configure the entire system which includes Zookeeper, Kafka and remoting agents. It also doesn’t support dynamic agent provisioning so scalability is harder to achieve. My project aims to solve two problems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Out-of-the-box solution to provision Apache Kafka cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic agent provisioning in a Kubernetes cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;current-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-state&quot;&gt;&lt;/a&gt;Current State&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kubernetes connector with credentials supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Kafka provisioning in Kubernetes feature is fully implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helm chart is partially implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apache-kafka-provisioning-in-kubernetes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#apache-kafka-provisioning-in-kubernetes&quot;&gt;&lt;/a&gt;Apache Kafka provisioning in Kubernetes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature is part of 2.0 version so it is not yet released officially. You can try out the feature by using the &lt;a href=&quot;https://jenkins.io/doc/developer/publishing/releasing-experimental-updates/&quot;&gt;Experimental Update Center&lt;/a&gt; to update to &lt;code&gt;2.0.0-alpha&lt;/code&gt; version or building directly from master branch:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone https://github.com/jenkinsci/remoting-kafka-plugin.git
cd remoting-kafka-plugin/plugin
mvn hpi:run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the Global Configuration page, users can input Kubernetes server information and credentials. Then they can start Apache Kafka with only one button click.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/remoting-kafka/kafka-provisioning-kubernetes-ui.png&quot; alt=&quot;Kafka provisioning in Kubernetes UI&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When users click &lt;code&gt;Start Kafka on Kubernetes&lt;/code&gt; button, Jenkins will create a Kubernetes client from the information and then apply Zookeeper and Kafka YAML specification files from &lt;code&gt;resources&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/remoting-kafka/kafka-provisioning-kubernetes-architecture.png&quot; alt=&quot;Kafka provisioning in Kubernetes architecture&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helm-chart&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helm-chart&quot;&gt;&lt;/a&gt;Helm Chart&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Helm chart for Remoting over Apache Kafka plugin is based on &lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/jenkins&quot;&gt;stable/jenkins&lt;/a&gt; chart and &lt;a href=&quot;https://github.com/helm/charts/tree/master/incubator/kafka&quot;&gt;incubator/kafka&lt;/a&gt; chart. As of now, the chart is still a &lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin/pull/62&quot;&gt;Work in Progress&lt;/a&gt; because it is still waiting for Cloud API implementation in Phase 2. However, you can check out the demo chart with a single standalone Remoting Kafka Agent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone -b demo-helm-phase-1 https://github.com/longngn/remoting-kafka-plugin.git
cd remoting-kafka-plugin
K8S_NODE=&amp;lt;your Kubernetes node IP&amp;gt; ./helm/jenkins-remoting-kafka/do.sh start&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command &lt;code&gt;do.sh start&lt;/code&gt; will do the following steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the chart (with Jenkins and Kafka).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch a Kafka computer on Jenkins master by applying the following JCasC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;jenkins&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;nodes&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;permanent:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        name: &quot;test&quot;
        remoteFS: &quot;/home/jenkins&quot;
        launcher:
          kafka: {}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Launch a single Remoting Kafka Agent pod.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can check the chart state by running &lt;code&gt;kubectl&lt;/code&gt;, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ kubectl get all -n demo-helm
NAME                                    READY   STATUS    RESTARTS   AGE
pod/demo-jenkins-998bcdfd4-tjmjs        2/2     Running   0          6m30s
pod/demo-jenkins-remoting-kafka-agent   1/1     Running   0          4m10s
pod/demo-kafka-0                        1/1     Running   0          6m30s
pod/demo-zookeeper-0                    1/1     Running   0          6m30s

NAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
service/demo-0-external           NodePort    10.106.254.187   &amp;lt;none&amp;gt;        19092:31090/TCP              6m30s
service/demo-jenkins              NodePort    10.101.84.33     &amp;lt;none&amp;gt;        8080:31465/TCP               6m31s
service/demo-jenkins-agent        ClusterIP   10.97.169.65     &amp;lt;none&amp;gt;        50000/TCP                    6m31s
service/demo-kafka                ClusterIP   10.106.248.10    &amp;lt;none&amp;gt;        9092/TCP                     6m30s
service/demo-kafka-headless       ClusterIP   None             &amp;lt;none&amp;gt;        9092/TCP                     6m30s
service/demo-zookeeper            ClusterIP   10.109.222.63    &amp;lt;none&amp;gt;        2181/TCP                     6m30s
service/demo-zookeeper-headless   ClusterIP   None             &amp;lt;none&amp;gt;        2181/TCP,3888/TCP,2888/TCP   6m31s

NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/demo-jenkins   1/1     1            1           6m30s

NAME                                     DESIRED   CURRENT   READY   AGE
replicaset.apps/demo-jenkins-998bcdfd4   1         1         1       6m30s

NAME                              READY   AGE
statefulset.apps/demo-kafka       1/1     6m30s
statefulset.apps/demo-zookeeper   1/1     6m30s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-phase-plan&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-phase-plan&quot;&gt;&lt;/a&gt;Next Phase Plan&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement Cloud API to provision Remoting Kafka Agent. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-57668&quot;&gt;JENKINS-57668&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate Cloud API implementation with Helm chart. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58288&quot;&gt;JENKINS-58288&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit tests and integration tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release version 2.0 and address feedbacks. (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58289&quot;&gt;JENKINS-58289&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/MDs0Vr7gnnA?t=2601&quot;&gt;Phase 1 Demo Video&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1yIPwwL7P051XaSE2EOJYAtbVsd6YvGvvKp9QcJE4J1Y/edit?usp=sharing&quot;&gt;Phase 1 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/remoting-kafka-plugin&quot;&gt;Remoting over Apache Kafka plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/remoting-over-apache-kafka-docker-k8s-features/&quot;&gt;Project Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/remoting&quot;&gt;Gitter Channel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/09/Phase1-Updates-On-Working-Hours-Plugin/</id>
<title>GSOC Phase 1 Updates On Working Hours Plugin</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/09/Phase1-Updates-On-Working-Hours-Plugin/" />
<author>
<name>jackshen</name>
</author>
<category term="react"></category>
<category term="plugins"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
The Working Hour Plugin provides an interface to set up a schedule of allowable build days and times.  Jobs that run outside of configured working hours are held until the next allowable build time.


For the first code phase at Google Summer of Code, I&#8217;ve been working on Working Hours Project, which needed improvements on usability.


Rather than classical Jelly pages, React seems to be more prefered when we want to design a much customized UI with a huge amount of libraries we could use, especially the open source components such as date pickers.


But we have to face a challenge of...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Working Hour Plugin provides an interface to set up a schedule of allowable build days and times.  Jobs that run outside of configured working hours are held until the next allowable build time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first code phase at Google Summer of Code, I’ve been working on &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/working-hours-improvements/&quot;&gt;Working Hours Project&lt;/a&gt;, which needed improvements on usability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than classical Jelly pages, React seems to be more prefered when we want to design a much customized UI with a huge amount of libraries we could use, especially the open source components such as date pickers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we have to face a challenge of the integration of React and Jenkins, which I’m currently working on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;achievements-for-the-first-code-phase&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#achievements-for-the-first-code-phase&quot;&gt;&lt;/a&gt;Achievements For The First Code Phase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first code phase, we are focusing on the UI improvements, we’ve achieved following major improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A standalone webapp which could be then integrated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slider for choosing a time range.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More fields when setting a excluded date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presets for choosing a excluded date.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A Jenkins styling UI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-we-integrate-react-into-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-we-integrate-react-into-jenkins&quot;&gt;&lt;/a&gt;How We Integrate React Into Jenkins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A solution doc for integration could be found at
&lt;a href=&quot;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&quot; class=&quot;bare&quot;&gt;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first, we found BlueOcean is a great example for using React in Jenkins, but yet it’s not a choice for common development with plugins. So we need to find out another way to integrate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the steps to do the integration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A mount point in your jelly file, usually it’s a element with a unique &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write your React Application, but need to set the mount point to the id you set above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the output after you build the Project into the plugin’s webapp dir.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your files using a script tag in your jelly file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;
        src=&quot;${resURL}/plugin/working-hours/js/main.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Once we are using React, the traditional jelly request won’t be available anymore, another way to process requests will be using stapler. You can define a process function like below.
[source, java]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;public HttpResponse doDynamic(StaplerRequest request) {
        if (config == null) {
            config = ExtensionList.lookup(WorkingHoursPlugin.class).get(0);
        }
        String restOfPath = request.getRestOfPath();
        String[] pathTokens = restOfPath.split(&quot;/&quot;);
        List&amp;lt;String&amp;gt; params = new ArrayList&amp;lt;&amp;gt;();
        switch (params.get(0)) {
            case &quot;list-excluded-dates&quot;:
                return listExcludedDate(request);
            case &quot;set-excluded-dates&quot;:
                return setExcludedDates(request);
            case &quot;list-time-ranges&quot;:
                return listTimeRanges(request);
            case &quot;set-time-ranges&quot;:
                return setTimeRanges(request);
        }
    }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-our-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#run-our-application&quot;&gt;&lt;/a&gt;Run Our Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you would like to take a look at our plugin, you can go to the repo
&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin/tree/dev&quot;&gt;working-hours-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just follow the README file, then you could run a copy of your working hours plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshots&quot;&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current plugin’s outlook is a bit simple and the plugin is a bit unconvinient for use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the problems is that if we want to input a excluded date, it’ll be a string in a constant format like 15/9/2019, but the new UI choosed React so we could use a datepicker to improve this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;current-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#current-plugin&quot;&gt;&lt;/a&gt;Current Plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/working-hours/working-hours-config.png&quot; alt=&quot;Screenshot for Current Plugin&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-time-ranges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-time-ranges&quot;&gt;&lt;/a&gt;New (Time Ranges)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/working-hours/working-hours-example-time-range.png&quot; alt=&quot;Time Ranges Example&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;new-exclude-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-exclude-dates&quot;&gt;&lt;/a&gt;New (Exclude Dates)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/working-hours/working-hours-exmaple-excluded-date.png&quot; alt=&quot;Excluded Dates Example&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;helpful-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#helpful-links&quot;&gt;&lt;/a&gt;Helpful links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions or advices, we are glad to hear from you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several useful links are listed below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin/tree/dev&quot;&gt;Develop Repo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/working-hours-plugin&quot;&gt;Main Repo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1SezLtQejur2ji-KUur3dC3TXK8ivxrttiwHYbTkA8Yk/edit#&quot;&gt;Design Doc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1JLRCDg9JNBWR0Dfq8w3pTI9mrl6i9JU29pBoH6bO0J8&quot;&gt;Doc for React Integration Solution &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/working-hours-plugin&quot;&gt;
    Gitter Chat
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1Psz6MrYvw81D_7d8pfW04FDoBtexlSVdgrbqp99Wjm0/edit?usp=sharing&quot;&gt;
    Slides for Phase 1 Demo
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MDs0Vr7gnnA&quot;&gt;
    Video Recording for Phase 1
&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/</id>
<title>Jenkins Pipeline Stage Result Visualization Improvements</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/05/jenkins-pipeline-stage-result-visualization-improvements/" />
<author>
<name>dwnusbaum</name>
</author>
<category term="pipeline"></category>
<category term="blueocean"></category>
<summary>
Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue JENKINS-39203, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.


In order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some changes have recently been released to give Pipeline authors some new tools to improve Pipeline visualizations in Blue Ocean, in particular to address the highly-voted issue &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-39203&quot;&gt;JENKINS-39203&lt;/a&gt;, which causes all non-failing stages to be visualized as though they were unstable if the overall build result of the Pipeline was unstable. This issue made it difficult to quickly identify why a build was unstable, and forced users to read through builds logs and the Jenkinsfile to figure out what actually happened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to fix this issue, we introduced a new Pipeline API that can be used to attach additional result information to individual Pipeline steps. Visualization tools like Blue Ocean use this new API when deciding how a given stage should be displayed. Steps like &lt;code&gt;junit&lt;/code&gt; that used to set only the overall build result now additionally use the new API to set step-level result information. We created the new &lt;code&gt;unstable&lt;/code&gt; and &lt;code&gt;warnError&lt;/code&gt; steps so that Pipeline authors with more complicated use cases can still take advantage of this new API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core fixes for the issue are present in the following plugins, all of which require Jenkins 2.138.4 or newer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: API 2.34&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Basic Steps 2.18 (requires a simultaneous update to Pipeline: Groovy 2.70)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Graph Analysis 1.10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline: Declarative 1.3.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Ocean 1.17.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a screenshot from Blue Ocean of a Pipeline using the &lt;code&gt;unstable&lt;/code&gt; step where only the failing stage is marked as unstable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019/07/2019-07-05-jenkins-pipeline-stage-result-visualization-improvements/unstable-stage-example.png&quot; alt=&quot;Visualization of a Pipeline in Blue Ocean with a single stage shown as unstable&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some examples of how to update your Pipelines to use the new improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the new &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#warnerror-catch-error-and-set-build-and-stage-result-to-unstable&quot;&gt;&lt;code&gt;warnError&lt;/code&gt;&lt;/a&gt; step to catch errors and mark the build and stage as unstable.&lt;/strong&gt; &lt;code&gt;warnError&lt;/code&gt; requires a single &lt;code&gt;String&lt;/code&gt; parameter, which is a message to log when an error is caught. When &lt;code&gt;warnError&lt;/code&gt; catches an error, it logs the message  and the error and sets the build and stage result to unstable. Using it looks like this:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;warnError(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Script failed!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  sh(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the new &lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#unstable-set-stage-result-to-unstable&quot;&gt;&lt;code&gt;unstable&lt;/code&gt;&lt;/a&gt; step to set the build and stage result to unstable&lt;/strong&gt;. This step can be used as a direct replacement for &lt;code&gt;currentBuild.result = 'UNSTABLE'&lt;/code&gt;, and may be useful in cases where &lt;code&gt;warnError&lt;/code&gt; is not flexible enough. &lt;code&gt;unstable&lt;/code&gt; requires a single &lt;code&gt;String&lt;/code&gt; parameter, which is a message to log when the step runs. Using it might look like this:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
  sh(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
} &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (ex) {
  unstable(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Script failed!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;JUnit Plugin&lt;/a&gt;&lt;/strong&gt;: Update to version 1.28 or newer to pick up fixes for the &lt;code&gt;junit&lt;/code&gt; step so that it correctly marks the stage as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://plugins.jenkins.io/warnings-ng&quot;&gt;Warnings Next Generation Plugin&lt;/a&gt;&lt;/strong&gt;: Update to version 5.2.0 or newer to pick up fixes for the &lt;code&gt;publishIssues&lt;/code&gt; and &lt;code&gt;recordIssues&lt;/code&gt; steps so that they correctly mark the stage as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Other Plugins&lt;/strong&gt;: If your Pipeline is marked as unstable by a step in another plugin, please &lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;file a new issue&lt;/a&gt; with the component set to that plugin (after checking for duplicates), clearly describing which step has the problem and under what circumstances it occurs, and link to the developer section of this post as a reference for how the maintainer might be able to address the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;limitations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#limitations&quot;&gt;&lt;/a&gt;Limitations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you do not migrate to the &lt;code&gt;unstable&lt;/code&gt; or &lt;code&gt;warnError&lt;/code&gt; steps, or update plugins that set the build result to versions that integrate with the new API, then in cases where the build is unstable, Blue Ocean will not show any stages as unstable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even after these changes, &lt;code&gt;currentBuild.result&lt;/code&gt; continues to refer only to the overall build result. Unfortunately, it was not possible to adapt the &lt;code&gt;currentBuild&lt;/code&gt; global variable to make it track step or stage-level results, since it is implemented as a global variable, which means it does not have any step-level context through which it could use the new API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-stage-view&quot;&gt;Pipeline Stage View Plugin&lt;/a&gt; has not yet been updated to use the new API, so these changes do not affect the visualization it provides.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#history&quot;&gt;&lt;/a&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Pipeline steps can complete in one of two ways: sucessfully, by returning a (possibly null) result, or unsucessfully, by throwing an exception. When a step fails by throwing an exception, that exception propagates throughout the Pipeline until another step or Groovy code catches it, or it reaches the top level of the Pipeline, which causes the Pipeline itself to fail. Depending on the type of exception thrown, the final result of the Pipeline may be something other than failure (for example in some cases it will be aborted). Because of the way the exception propagates, it is easy for tools like Blue Ocean to identify steps (and therefore stages) which failed due to an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order for Pipelines to be able to interact with established Jenkins APIs, it was also necessary for Pipeline builds to have an overall build result that can be modified during the build. Among other things, this allows Pipelines to use build steps and wrappers that were originally written for use in Freestyle projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some cases, it is desirable for a Pipeline step to be able to complete sucessfully so that the rest of the Pipeline continues normal execution, but for it to be able to note that some kind of error occurred so that visualizations are able to identify that something went wrong with the step, even though it didn’t fail completely. A good example of this is the &lt;code&gt;junit&lt;/code&gt; step. This step looks at specified test results, and if there were any failures, marks the overall build result as unstable. This kind of behavior is problematic for visualization tools like Blue Ocean, because the step completed successfully, and there is no programmatic way to associate the overall build result with the step that ended up setting that result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-39203&quot;&gt;JENKINS-39203&lt;/a&gt; again, we see that there were essentially two options for the visualization. If the overall build result was unstable, either all steps that completed sucessfully could be shown as unstable, because they may have been the step that caused the build to become unstable, or they could be shown as successfull, because we have no way to relate the setting of the build result to a specific step. In the end, the first option was chosen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To work around this issue, some users tried to do things like throw exceptions and add try/catch blocks around stages that handle exceptions so that Blue Ocean would be able to use the exceptions to mark step and stage results as desired, and then by catching the exception the Pipeline would be able to continue normal execution. These kinds of workarounds were hard to understand, fragile, and did not work well (if at all) for Declarative Pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;developers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developers&quot;&gt;&lt;/a&gt;Developers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a developer of a plugin that integrates with Pipeline using a step, and want to take advantage of the new API so that your step can report an non-succesful result without throwing an exception, please see &lt;a href=&quot;https://groups.google.com/d/msg/jenkinsci-dev/5A7U1KmfX08/IP5Bg_OaAgAJ&quot;&gt;this post&lt;/a&gt; to the Jenkins Developers mailing list, and respond there if you have any questions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/02/plugin-management-tool-alpha-release/</id>
<title>Plugin Management Library and CLI Tool Alpha Release</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-07-02T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/07/02/plugin-management-tool-alpha-release/" />
<author>
<name>stopalopa</name>
</author>
<category term="plugins"></category>
<category term="pluginmanagement"></category>
<category term="platform-sig"></category>
<category term="cli"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
"Everybody is re-inventing the wheel, partially implementing the "details" of plugin management (signed metadata, artifacts checksums, plugins detached from core,&#8230;&#8203;).
It becomes obvious Jenkins should provide adequate tooling for plugin installation outside a live Jenkins instance." JENKINS-53767


My Google Summer of Code project
tries to solve this problem by creating a library that will unify plugin management logic across the different implementations
of Jenkins and providing a CLI tool that will make it easy for users to download plugins and view plugin information before Jenkins even starts.
I&#8217;m excited to share that we just released an alpha version that you can check out here!


GSoC Phase 1 Update


While...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;Everybody is re-inventing the wheel, partially implementing the &quot;details&quot; of plugin management (signed metadata, artifacts checksums, plugins detached from core,…​).
It becomes obvious Jenkins should provide adequate tooling for plugin installation outside a live Jenkins instance.&quot;&lt;/em&gt; &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-53767&quot;&gt;JENKINS-53767&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/plugin-installation-manager-tool-cli/&quot;&gt;Google Summer of Code project&lt;/a&gt;
tries to solve this problem by creating a library that will unify plugin management logic across the different implementations
of Jenkins and providing a CLI tool that will make it easy for users to download plugins and view plugin information before Jenkins even starts.
I’m excited to share that we just released an alpha version that you can check out &lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool/releases&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;gsoc-phase-1-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#gsoc-phase-1-update&quot;&gt;&lt;/a&gt;GSoC Phase 1 Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I looked into pulling the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/PluginManager.java&quot;&gt;Plugin Manager&lt;/a&gt; out of Jenkins core,
this ended up being a challenging first step due to the complexity and number of dependencies.  We instead decided to start by converting the
&lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&quot;&gt;install-plugins.sh bash script&lt;/a&gt; in Jenkins Docker to Java.
There are several issues with the install-plugins.sh script - namely, that it is a bash script and has limited extensibility.
Furthermore, it does not retrieve all of the most-up-to-date update center metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;alpha-release-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#alpha-release-details&quot;&gt;&lt;/a&gt;Alpha Release Details&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mimicking what was done in the &lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/install-plugins.sh&quot;&gt;install-plugins.sh&lt;/a&gt; script from the official Jenkins Docker image, the new plugin management library takes in a list of plugins, their versions,
and/or urls from which to download the plugins, and downloads the requested plugins and their dependencies. The plugins are downloaded from the update center
to a specified directory, and can then be loaded into Jenkins. Currently, the plugins to be downloaded can be specified via a plugins.txt file and/or the -plugins cli option, but we plan to further expand the input formats that can be accepted.
&lt;a href=&quot;https://github.com/jenkinsci/docker#plugin-version-format&quot;&gt;Custom version specifiers&lt;/a&gt; for different update centers are also supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/gsoc-plugin-management-tool/pluginstxt.png&quot; alt=&quot;Example plugins.txt File&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The library will first check if any of the requested plugins are currently either installed in the user-specified download location or user-specified Jenkins war file.
Already installed plugins will be ignored or upgraded if a higher version is requested or required as a dependency.  After determining the plugin download URL, the library
will download the plugins and resolve and download their dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/gsoc-plugin-management-tool/downloadexample.png&quot; alt=&quot;Example of Downloading Plugins&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/gsoc-plugin-management-tool/downloadedplugins.png&quot; alt=&quot;Plugin Download Directory&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just the beginning: the plugin manager library and cli tool are very much still a work in progress.
For the most up-to-date information on CLI options and how to run the tool, see the &lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool/blob/master/README.md&quot;&gt;repository README.md&lt;/a&gt;.
More robust input parsing, support for security warnings and available updates, Docker integration, and additional features coming soon!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot;&gt;&lt;/a&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out through
the &lt;a href=&quot;https://gitter.im/jenkinsci/plugin-installation-manager-cli-tool&quot;&gt;Plugin Installation Manager CLI Tool Gitter chat&lt;/a&gt; or through
the &lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;. I would love to get your questions, comments, and feedback!
We have meetings Tuesdays and Thursdays at 6PM UTC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/12Bo8w9SinrG5n82w-Unjx4MNq0mjkHFEOMc3Jf6rTQQ/edit#slide=id.p1&quot;&gt;Phase 1 Presentation Slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/MDs0Vr7gnnA?t=196&quot;&gt;Phase 1 Recorded Demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-58199?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20plugin-installation-manager-tool&quot;&gt;Jira Issue Search&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/plugin-installation-manager-tool&quot;&gt;Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/</id>
<title>Multi-branch Pipeline Jobs Support for GitLab SCM</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-06-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/29/phase-1-multibranch-pipeline-support-for-gitlab/" />
<author>
<name>baymac</name>
</author>
<category term="gitlab"></category>
<category term="plugins"></category>
<category term="pipeline"></category>
<category term="credentials"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
This is one of the Jenkins project in GSoC 2019. We are working on adding support
for Multi-branch
Pipeline Jobs and Folder Organisation in GitLab. The plan is to create the following
plugins:




GitLab API Plugin - Wraps GitLab Java APIs.


GitLab Branch Source Plugin - Contains two packages:



io.jenkins.plugins.gitlabserverconfig - Manages server configuration and web hooks management.
Ideally should reside inside another plugin with name GitLab Plugin. In future, this package should
be moved into a new plugin.


io.jenkins.plugins.gitlabbranchsource - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including
Merge Requests) and Folder organisation.









Present State




FreeStyle Job and Pipeline(Single Branch) Job are fully supported.


Multi-branch Pipeline Job is partially supported (no...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is one of the Jenkins project in GSoC 2019. We are working on adding support
for &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/gitlab-support-for-multibranch-pipeline/&quot;&gt;Multi-branch
Pipeline Jobs and Folder Organisation in GitLab&lt;/a&gt;. The plan is to create the following
plugins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-api-plugin&quot;&gt;GitLab API Plugin&lt;/a&gt; - Wraps GitLab Java APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/baymac/gitlab-branch-source-plugin&quot;&gt;GitLab Branch Source Plugin&lt;/a&gt; - Contains two packages:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.jenkins.plugins.gitlabserverconfig&lt;/code&gt; - Manages server configuration and web hooks management.
Ideally should reside inside another plugin with name &lt;code&gt;GitLab Plugin&lt;/code&gt;. In future, this package should
be moved into a new plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.jenkins.plugins.gitlabbranchsource&lt;/code&gt; - Adds GitLab Branch Source for Multi-branch Pipeline Jobs (including
Merge Requests) and Folder organisation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;present-state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#present-state&quot;&gt;&lt;/a&gt;Present State&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;FreeStyle Job and Pipeline(Single Branch) Job are fully supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-branch Pipeline Job is partially supported (no MRs detection).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab Folder Organisation is not supported.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;goals-of-this-project&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#goals-of-this-project&quot;&gt;&lt;/a&gt;Goals of this project&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implement a lightweight GitLab Plugin that depends on GitLab API Plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow convention of 3 separate plugins i.e. &lt;code&gt;GitLab Plugin&lt;/code&gt;, &lt;code&gt;GitLab API Plugin&lt;/code&gt;, &lt;code&gt;GitLab Branch Source Plugin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement GitLab Branch Source Plugin with support for Multi-branch Pipeline Jobs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support new Jenkins features such as
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Code as Configuration&lt;/a&gt; (JCasC),
&lt;a href=&quot;https://github.com/jenkinsci/incrementals-tools/&quot;&gt;Incremental Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear &amp;amp; Efficient design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support new SCM Trait APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support Java 8 and above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-plugin&quot;&gt;&lt;/a&gt;Building the plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No binaries are available for this plugin as the plugin is in the very early alpha stage, and not ready for the general
public quite yet.  If you want to jump in early, you can try building it yourself from source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;&lt;/a&gt;Installation:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checkout source code to your local machine:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone https://github.com/baymac/gitlab-branch-source-plugin.git

cd gitlab-branch-source-plugin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the plugin:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;mvn clean install

mvn clean install -DskipTests # to skip tests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run the plugin:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;mvn hpi:run # runs a Jenkins instance at localhost:8080

mvn hpi:run -Djetty.port=&amp;lt;port&amp;gt; # to run on your desired port number&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to test it with your Jenkins server, after &lt;code&gt;mvn clean install&lt;/code&gt; follow these steps in your Jenkins instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Plugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Advanced&lt;/code&gt; tab&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;code&gt;Upload Plugin&lt;/code&gt; section, select &lt;code&gt;Choose file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;$&amp;lt;root_dir&amp;gt;/target/gitlab-branch-source.hpi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Upload&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Install without restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming plugin installation has done been already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-up-gitlab-server-configuration-on-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-up-gitlab-server-configuration-on-jenkins&quot;&gt;&lt;/a&gt;Setting up GitLab Server Configuration on Jenkins&lt;/h3&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;On jenkins, select &lt;code&gt;Manage Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Configure System&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll down to find the &lt;code&gt;GitLab&lt;/code&gt; section&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-section.png&quot; alt=&quot;gitlab-section&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Add GitLab Server&lt;/code&gt; | Select &lt;code&gt;GitLab Server&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you will now see the GitLab Server Configuration options.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-server.png&quot; alt=&quot;gitlab-server&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 4 fields that needs to be configured:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; - Plugin automatically generates an unique server name for you. User may want to configure this field
to suit their needs but should make sure it is sufficiently unique. We recommend to keep it as it is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Server URL&lt;/code&gt; - Contains the URL to your GitLab Server. By default it is set to &quot;https://gitlab.com&quot;. User can
modify it to enter their GitLab Server URL e.g. &lt;a href=&quot;https://gitlab.gnome.org/&quot; class=&quot;bare&quot;&gt;https://gitlab.gnome.org/&lt;/a&gt;, &lt;a href=&quot;http://gitlab.example.com:7990&quot; class=&quot;bare&quot;&gt;http://gitlab.example.com:7990&lt;/a&gt;. etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Credentials&lt;/code&gt; - Contains a list of credentials entries that are of type GitLab Personal Access Token. When
no credential has been added it shows &quot;-none-&quot;. User can add a credential by clicking &quot;Add&quot; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Web Hook&lt;/code&gt; - This field is a checkbox. If you want the plugin to setup a webhook on your GitLab project(s)
related jobs, check this box. The plugin listens to a URL for the concerned GitLab project(s) and when an event
occurs in the GitLab Server, the server sends an event trigger to the URL where the web hook is setup. If you
want continuous integration (or continuous delivery) on your GitLab project then you may want to automatically
set it up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding a Personal Access Token Credentials (To automatically generate Personal Access Token see
&lt;a href=&quot;#creating-personal-access-token-within-jenkins&quot;&gt;next section&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;User is required to add a &lt;code&gt;GitLab Personal Access Token&lt;/code&gt; type credentials entry to securely persist the token
inside Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate a &lt;code&gt;Personal Access Token&lt;/code&gt; on your GitLab Server:&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select profile dropdown menu from top-right corner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Settings&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Access Token&lt;/code&gt; from left column&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a name | Set Scope to &lt;code&gt;api&lt;/code&gt;,&lt;code&gt;read_user&lt;/code&gt;, &lt;code&gt;read_repository&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Create Personal Access Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the token generated&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return to Jenkins | Select &lt;code&gt;Add&lt;/code&gt; in Credentials field | Select &lt;code&gt;Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;code&gt;Kind&lt;/code&gt; to GitLab Personal Access Token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter &lt;code&gt;Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a unique id in &lt;code&gt;ID&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a human readable description&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Add&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-credentials.png&quot; alt=&quot;gitlab-credentials&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Testing connection:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select your desired token in the &lt;code&gt;Credentials&lt;/code&gt; dropdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Test Connection&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It should return something like &lt;code&gt;Credentials verified for user &amp;lt;username&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Apply&lt;/code&gt; (at the bottom)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab Server is now setup on Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-personal-access-token-within-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-personal-access-token-within-jenkins&quot;&gt;&lt;/a&gt;Creating Personal Access Token within Jenkins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, users can generate a GitLab Personal Access Token within Jenkins itself and automatically add the
GitLab Personal Access Token credentials to Jenkins server credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Advanced&lt;/code&gt; at the bottom of &lt;code&gt;GitLab&lt;/code&gt; Section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Manage Additional GitLab Actions&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;Convert login and password to token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;GitLab Server URL&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are 2 options to generate token;&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;From credentials&lt;/code&gt; - To select an already persisting Username Password Credentials or add an Username Password
credential to persist it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;From login and password&lt;/code&gt; - If this is a one time thing then you can directly enter you credentials to the text boxes
and the username/password credential is not persisted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After setting your username/password credential, select &lt;code&gt;Create token credentials&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The token creator will create a Personal Access Token in your GitLab Server for the given user with the
required scope and also create a credentials for the same inside Jenkins server. You can go back to the GitLab Server
Configuration to select the new credentials generated (select &quot;-none-&quot; first then new credentials will appear). For
security reasons this token is not revealed as plain text rather returns an &lt;code&gt;id&lt;/code&gt;. It is a 128-bit long UUID-4 string
(36 characters).&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019/06/2019-06-29-multibranch-pipeline-support-for-gitlab/gitlab-token-creator.png&quot; alt=&quot;gitlab-token-creator&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuration-as-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration-as-code&quot;&gt;&lt;/a&gt;Configuration as Code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No need for messing around in the UI. &lt;code&gt;Jenkins Configuration as Code (JCasC)&lt;/code&gt; or simply &lt;code&gt;Configuration as Code&lt;/code&gt; Plugin
allows you to configure Jenkins via a &lt;code&gt;yaml&lt;/code&gt; file. If you are a first time user, you can learn more about JCasC
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;add-configuration-yaml&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#add-configuration-yaml&quot;&gt;&lt;/a&gt;Add configuration YAML:&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are multiple ways to load JCasC yaml file to configure Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JCasC by default searches for a file with the name &lt;code&gt;jenkins.yaml&lt;/code&gt; in &lt;code&gt;$JENKINS_ROOT&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JCasC looks for an environment variable &lt;code&gt;CASC_JENKINS_CONFIG&lt;/code&gt; which contains the path
for the configuration &lt;code&gt;yaml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A path to a folder containing a set of config files e.g. &lt;code&gt;/var/jenkins_home/casc_configs&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A full path to a single file e.g. &lt;code&gt;/var/jenkins_home/casc_configs/jenkins.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A URL pointing to a file served on the web e.g. &lt;code&gt;&lt;a href=&quot;https://&amp;lt;your-domain&amp;gt;/jenkins.yaml&quot; class=&quot;bare&quot;&gt;https://&amp;lt;your-domain&amp;gt;/jenkins.yaml&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also set the configuration yaml path in the UI. Go to &lt;code&gt;&amp;lt;your-jenkins-domain&amp;gt;/configuration-as-code&lt;/code&gt;.
Enter path or URL to &lt;code&gt;jenkins.yaml&lt;/code&gt; and select &lt;code&gt;Apply New Configuration&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of configuring GitLab server via &lt;code&gt;jenkins.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;credentials&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;system&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;domainCredentials&lt;/span&gt;:
      - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;credentials:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
          - gitlabPersonalAccessToken:
              scope: SYSTEM
              id: &quot;i&amp;lt;3GitLab&quot;
              token: &quot;XfsqZvVtAx5YCph5bq3r&quot; # gitlab personal access token&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;unclassified&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;gitLabServers&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;servers&lt;/span&gt;:
      - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;credentialsId: &quot;i&amp;lt;3GitLab&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;manageHooks&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gitlab.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;serverUrl&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://gitlab.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For better security, see handling secrets
&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin#handling-secrets&quot;&gt;section&lt;/a&gt; in JCasC
documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;future-scope-of-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-scope-of-work&quot;&gt;&lt;/a&gt;Future Scope of work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second phase of GSoC will be utilized to develop GitLab Branch Source. The new feature is a work in progress, but
the codebase is unstable and requires lot of bugfixes. Some features like Multibranch Pipeline Jobs are functioning
properly. More about it at the end of second phase.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;issue-tracking&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issue-tracking&quot;&gt;&lt;/a&gt;Issue Tracking&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project uses Jenkins &lt;a href=&quot;https://issues.jenkins-ci.org/&quot;&gt;JIRA&lt;/a&gt; to track issues. You can file issues under
&lt;code&gt;gitlab-branch-source-plugin&lt;/code&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#acknowledgements&quot;&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is built and maintained by the Google Summer of Code (GSoC) Team for
&lt;a href=&quot;https://jenkins.io/projects/gsoc/2019/gitlab-support-for-multibranch-pipeline/&quot;&gt;Multi-branch Pipeline
Support for GitLab&lt;/a&gt;. A lot of inspiration was drawn from &lt;code&gt;GitLab Plugin&lt;/code&gt;, &lt;code&gt;Gitea Plugin&lt;/code&gt; and &lt;code&gt;GitHub Plugin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our team consists of: &lt;a href=&quot;https://www.github.com/baymac&quot;&gt;baymac&lt;/a&gt;, &lt;a href=&quot;https://github.com/LinuxSuRen&quot;&gt;LinuxSuRen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/markyjackson-taulia&quot;&gt;Marky&lt;/a&gt;, &lt;a href=&quot;https://github.com/casz&quot;&gt;Joseph&lt;/a&gt;,
&lt;a href=&quot;https://github.com/justinharringa&quot;&gt;Justin&lt;/a&gt;, &lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With support from: &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg&lt;/a&gt;, &lt;a href=&quot;https://github.com/gmessner&quot;&gt;Greg&lt;/a&gt;,
&lt;a href=&quot;https://github.com/omehegan&quot;&gt;Owen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also thanks to entire Jenkins community for contributing with technical expertise and inspiration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ij6ByZqI67o&quot;&gt;Phase 1 demo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1c3UWwEb5rDmO6YEn5fU3qVbVW-opuUXb&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/gitlab-api-plugin&quot;&gt;GitLab API Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/baymac/gitlab-branch-source-plugin&quot;&gt;GitLab Branch Source Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/GitLab+API+Plugin&quot;&gt;GitLab API Plugin Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-57445&quot;&gt;Issue Tracker for Phase 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://baymac.github.io&quot;&gt;Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/21/performance-testing-jenkins/</id>
<title>Micro-benchmarking Framework for Jenkins Plugins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-06-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/21/performance-testing-jenkins/" />
<author>
<name>abhyudayasharma</name>
</author>
<category term="jmh"></category>
<category term="plugins"></category>
<category term="benchmark"></category>
<category term="performance"></category>
<category term="developer"></category>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<summary>
I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.
Since there was no existing way to measure performance and do benchmarks on Jenkins Plugins,
my work for the first phase of the project was to create a framework for running
benchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,
we chose Java Microbenchmark Harness for running these benchmarks. This
allows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster
for everyone.


The micro-benchmarking framework was recently released in the...
</summary>
<content type="html">
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been working on improving the performance of the Role Strategy Plugin as a part of my &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/role-strategy-performance/&quot;&gt;Google Summer of Code project&lt;/a&gt;.
Since there was no existing way to measure performance and do benchmarks on Jenkins Plugins,
my work for the first phase of the project was to create a framework for running
benchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,
we chose &lt;a href=&quot;http://openjdk.java.net/jeps/230&quot;&gt;Java Microbenchmark Harness&lt;/a&gt; for running these benchmarks. This
allows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster
for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The micro-benchmarking framework was recently released in the Jenkins Unit Test Harness &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.50&quot;&gt;2.50&lt;/a&gt;.
The blog post below shows how to run benchmarks in your plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,
just like &lt;code&gt;JenkinsRule&lt;/code&gt; from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows
you to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily
configure your benchmarks by either using your Java methods, or by using Jenkins &lt;a href=&quot;https://plugins.jenkins.io/configuration-as-code&quot;&gt;Configuration-as-Code plugin&lt;/a&gt;
and passing the path to your YAML file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run benchmarks from your plugins, you need to do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bump up the minimum required Jenkins version to 2.60.3 or above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, to run the benchmarks, you need to have a benchmark runner that contains a &lt;code&gt;@Test&lt;/code&gt; so it can run
like a JUnit test. From inside a test method, you can use the &lt;code&gt;OptionsBuilder&lt;/code&gt; provided by JMH to
configure your benchmarks. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;BenchmarkRunner&lt;/span&gt; {
    &lt;span style=&quot;color:#007&quot;&gt;@Test&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; runJmhBenchmarks() &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;Exception&lt;/span&gt; {
        ChainedOptionsBuilder options = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; OptionsBuilder()
                .mode(Mode.AverageTime)
                .forks(&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;)
                .result(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jmh-report.json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

        &lt;span style=&quot;color:#777&quot;&gt;// Automatically detect benchmark classes annotated with @JmhBenchmark&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; BenchmarkFinder(getClass()).findBenchmarks(options);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; Runner(options.build()).run();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sample-benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sample-benchmarks&quot;&gt;&lt;/a&gt;Sample benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you can write your first benchmark:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Without any special setup&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@JmhBenchmark&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;JmhStateBenchmark&lt;/span&gt; {
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MyState&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; JmhBenchmarkState {
    }

    &lt;span style=&quot;color:#007&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; benchmark(MyState state) {
        &lt;span style=&quot;color:#777&quot;&gt;// benchmark code goes here&lt;/span&gt;
        state.getJenkins().setSystemMessage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Hello world&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Using Configuration as Code&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use configuration as code, apart from the dependencies above you also need to add the following
to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.jenkins&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;configuration-as-code&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.jenkins&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;configuration-as-code&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.21&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;classifier&amp;gt;&lt;/span&gt;tests&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/classifier&amp;gt;&lt;/span&gt;
    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now configuring a benchmark is as simple as providing path to your YAML file and specifying the class
containing the benchmark state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@JmhBenchmark&lt;/span&gt;
&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;SampleBenchmark&lt;/span&gt; {
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MyState&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;extends&lt;/span&gt; CascJmhBenchmarkState {
        &lt;span style=&quot;color:#007&quot;&gt;@Nonnull&lt;/span&gt;
        &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; getResourcePath() {
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;config.yml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
        }

        &lt;span style=&quot;color:#007&quot;&gt;@Nonnull&lt;/span&gt;
        &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
        &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; getEnclosingClass() {
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; SampleBenchmark.class;
        }
    }

    &lt;span style=&quot;color:#007&quot;&gt;@Benchmark&lt;/span&gt;
    &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; benchmark(MyState state) {
        Jenkins jenkins = state.getJenkins(); &lt;span style=&quot;color:#777&quot;&gt;// jenkins is configured and ready to be benchmarked.&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// your benchmark code goes here...&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;More Samples&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show
configuring the instances for various situations. You can find them
&lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/tree/master/src/test/java/jmh/benchmarks&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-benchmarks&quot;&gt;&lt;/a&gt;Running Benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Running benchmarks from Maven&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created
and is available starting Plugin-POM version 3.45. You can then run your benchmarks from the
command line using &lt;code&gt;mvn test -Dbenchmark&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Running benchmarks on ci.jenkins.io&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile
by using the &lt;code&gt;runBenchmarks()&lt;/code&gt; method after the &lt;code&gt;buildPlugin()&lt;/code&gt; step in your which is now available in
&lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library&quot;&gt;Jenkins Pipeline library&lt;/a&gt;.
This function also accepts the path to your generated JMH benchmark reports as an optional
parameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly
monitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;buildPlugin()
runBenchmarks(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jmh-report.json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;visualizing-benchmark-results&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#visualizing-benchmark-results&quot;&gt;&lt;/a&gt;Visualizing benchmark results&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benchmark reports generated (in JSON) can be visualized using the either the &lt;a href=&quot;https://plugins.jenkins.io/jmh-report&quot;&gt;JMH Report Plugin&lt;/a&gt;
or by passing the benchmark reports to the &lt;a href=&quot;https://jmh.morethan.io&quot;&gt;JMH visualizer&lt;/a&gt; web service. As an example, here is
a visualized report of some benchmarks from the Role Strategy Plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jmh-microbenchmark-framework/jmh-visualizer.png&quot; alt=&quot;Role Strategy Plugin benchmarks visualized by JMH Visualizer&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These improvements seen above were obtained through a small &lt;a href=&quot;https://github.com/jenkinsci/role-strategy-plugin/pull/81&quot;&gt;pull request&lt;/a&gt;
to the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks
help to find these hot-spots and estimate the impact of changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-tips-and-tricks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-tips-and-tricks&quot;&gt;&lt;/a&gt;Some tips and tricks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since &lt;code&gt;BenchmarkRunner&lt;/code&gt; class name in the example above does not qualify as a test according to Maven surefire plugin’s
naming conventions, the benchmarks will not interfere with your JUnit tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benchmark methods need to be annotated by &lt;code&gt;@Benchmark&lt;/code&gt; for JMH to detect them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classes containing benchmarks are found automatically by the &lt;code&gt;BenchmarkFinder&lt;/code&gt;
when annotated with &lt;code&gt;@JmhBenchmark&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A reference to the Jenkins instance is available through either &lt;code&gt;JmhBenchmarkState#getJenkins()&lt;/code&gt; or through
&lt;code&gt;Jenkins.getInstance()&lt;/code&gt; like you would otherwise do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JmhBenchmarkState&lt;/code&gt; provides &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods which can be overridden to configure the
Jenkins instance according to your benchmark’s requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of &lt;code&gt;highmem&lt;/code&gt; nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.51&quot;&gt;2.51&lt;/a&gt; as it includes some bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links-and-feedback&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links-and-feedback&quot;&gt;&lt;/a&gt;Links and Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any feedback, comments or questions, please feel free to reach out to me through either
the &lt;a href=&quot;https://gitter.im/jenkinsci/role-strategy-plugin&quot;&gt;Role Strategy Plugin Gitter chat&lt;/a&gt; or through
the &lt;a href=&quot;mailto:jenkinsci-dev@googlegroups.com&quot;&gt;Jenkins Developer Mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1gig6u64rzvSzGKjN_PTTXTkSXQ9Ah7E5/view?usp=sharing&quot;&gt;Presentation slides&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/lyfbmhQd0Ag?t=847&quot;&gt;Demo at Platform SIG meeting&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation for the micro-benchmark framework:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness/blob/master/docs/jmh-benchmarks.adoc&quot;&gt;Writing benchmarks (Jenkins Test Harness)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/benchmarks/jmh-benchmarks.md&quot;&gt;Preconfiguring benchmarks using JCasC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/plugin-pom#running-benchmarks&quot;&gt;Running benchmarks using Plugin POM profile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library#runbenchmarks&quot;&gt;Build Step for running benchmarks on ci.jenkins.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/</id>
<title>DevOps World-Jenkins World 2019 San Francisco: Agenda is Live</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-06-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/06/03/DevOps-World-Jenkins-World-2019-San-Francisco-Agenda-is-Live/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="devopsworldjenkinsworld2019"></category>
<summary>
We are a little over two months away from the largest Jenkins gathering of the year.  From Jenkins users, to maintainers, contributors, mentors and those new to Jenkins this event will have something for everyone.


This year’s DevOps World - Jenkins World 2019 San Francisco has moved to a larger venue to facilitate the growth. From August 12 - 15, 2019 the event will take place at the Moscone West Center.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning...
</summary>
<content type="html">
&lt;div class=&quot;imageblock center center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/dwjw-2019/2019-dwjw-email-san-fran-rev.png&quot; alt=&quot;2019 dwjw email san fran&quot; height=&quot;256&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are a little over two months away from the largest Jenkins gathering of the year.  From Jenkins users, to maintainers, contributors, mentors and those new to Jenkins this event will have something for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt; has moved to a larger venue to facilitate the growth. From August 12 - 15, 2019 the event will take place at the Moscone West Center.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning the latest innovations from industry leaders. Attendees will learn the value that digital transformation has in delivering software more efficiently, more quickly and with higher quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are excited to announce most of the agenda for DevOps World Jenkins World San Francisco is now live. We will continue to fill out the agenda with more sessions, trainings/workshops, and activities. Below is a small sampling of sessions from some of our favorite Jenkins contributors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins-configuration-as-code-try-it-start-contributing-ewelina-wilkosz&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-configuration-as-code-try-it-start-contributing-ewelina-wilkosz&quot;&gt;&lt;/a&gt;Jenkins Configuration as Code: try it &amp;amp; start contributing! - &lt;a href=&quot;https://github.com/ewelinawilkosz&quot;&gt;Ewelina Wilkosz&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Configuration as Code&lt;/a&gt; is an open source Jenkins plugin that allows users to keep complete Jenkins configuration in a simple configuration file (yaml format). In the talk, I’ll briefly present the history of the plugin, the vision for the future and current status. Then I’ll move to the demo section where I’ll show how easy it is to configure and run Jenkins with the help of the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thinking-about-jenkins-security-mark-waite-wadeck-follonier&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thinking-about-jenkins-security-mark-waite-wadeck-follonier&quot;&gt;&lt;/a&gt;Thinking about Jenkins Security - &lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite &amp;amp; Wadeck Follonier&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins security concepts, authorization, authentication and auditing, secure builds, agent security, configuration and administration security, auditing, and security best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker-and-jenkins-as-code-dr-oleg-nenashev&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#docker-and-jenkins-as-code-dr-oleg-nenashev&quot;&gt;&lt;/a&gt;Docker and Jenkins [as Code] - &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Dr. Oleg Nenashev&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Configuration as Code plugin is a new milestone which enables managing Jenkins configurations via YAML. Together with Docker, this plugin offers many ways to produce ready-to-fly Jenkins images for any environments. In my talk, I will describe official master and agent images offered by the Jenkins project. What’s inside them? How do you configure images with JCasC and Groovy hooks? How do you use these approaches together? And, finally, how do you simplify packaging of custom Jenkins images and define the entire system [as code]?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;can-jenkins-be-the-engine-of-mobile-devops-shashikant-jagtap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#can-jenkins-be-the-engine-of-mobile-devops-shashikant-jagtap&quot;&gt;&lt;/a&gt;Can Jenkins be the Engine of Mobile DevOps? - &lt;a href=&quot;https://github.com/shashikantjagtap&quot;&gt;Shashikant Jagtap&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this talk, we will explore the following topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How mobile DevOps is different than web DevOps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Challenges in mobile DevOps ( iOS and Android)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How Jenkins fits in mobile DevOps and CI/CD pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What Jenkins misses for mobile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How we can make Jenkins better for mobile apps&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;creating-a-cicd-pipeline-for-your-shared-libraries-roderick-randolph&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-cicd-pipeline-for-your-shared-libraries-roderick-randolph&quot;&gt;&lt;/a&gt;Creating a CI/CD Pipeline for Your Shared Libraries - &lt;a href=&quot;https://github.com/roderickrandolph&quot;&gt;Roderick Randolph&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Capital One we run tens of thousands of CI/CD pipelines on Jenkins, leveraging the Jenkins Pipeline shared libraries extension to enable code reuse and decrease time to market for dev teams. A code change to our shared library goes live immediately and is consumed the next time a team triggers their project’s pipeline. So, why do we have such high confidence that a code change to our library won’t break a team’s pipeline? The answer: we’ve developed a fully automated CI/CD pipeline for our shared library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this talk, you will learn how to create a fully automated pipeline for your shared libraries including how to develop tests, create canary releases, monitor for issues and quickly rollback changes to your shared library to achieve rapid delivery while minimizing any impact on dev teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how-jenkins-builds-and-delivers-jenkins-in-the-cloud-brian-benz-tyler-croy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-jenkins-builds-and-delivers-jenkins-in-the-cloud-brian-benz-tyler-croy&quot;&gt;&lt;/a&gt;How Jenkins Builds and Delivers Jenkins in the Cloud - &lt;a href=&quot;https://github.com/bbenz&quot;&gt;Brian Benz&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/rtyler&quot;&gt;Tyler Croy&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to know how Jenkins builds Jenkins? Catch this session to see the real-life implementation of Jenkins’ development (at &lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt;) and delivery infrastructure in the cloud as it evolved from a mix of platforms to multi-platform VMs, containers and Kubernetes on Microsoft Azure.  Expect a frank discussion of issues that were encountered along the way, how the architecture has evolved and what’s on the roadmap.  We’ll share important tips and tricks for implementing your own Jenkins infrastructure on any cloud, based on Jenkins’ own implementation experience.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;declarative-pipeline-2019-tips-tricks-and-whats-next-liam-newman&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declarative-pipeline-2019-tips-tricks-and-whats-next-liam-newman&quot;&gt;&lt;/a&gt;Declarative Pipeline 2019: Tips, Tricks and What’s Next - &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you using Declarative Pipeline? Are you considering using them? Are you just curious? Well, we’re going to help you get more out of Declarative Pipeline with less complexity and less effort. We’ll walk through some best practices, point out some tricks you might not have known, warn you off some common mistakes, review what’s changed in the last year and give you a preview of what we’re working on for Declarative Pipeline going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;say-goodbye-to-hello-world-say-hello-to-real-world-delivery-pipelines-brian-benz-jessica-deen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#say-goodbye-to-hello-world-say-hello-to-real-world-delivery-pipelines-brian-benz-jessica-deen&quot;&gt;&lt;/a&gt;Say Goodbye to Hello World, Say Hello to Real World Delivery Pipelines - &lt;a href=&quot;https://github.com/bbenz&quot;&gt;Brian Benz&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/jldeen&quot;&gt;Jessica Deen&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you tired of &quot;Hello World&quot; and hypothetical demos? So are we! In this code-heavy, deeply technical session, you’ll learn more than just tips and tricks.  You’ll learn best practices and how to start from absolute zero. Whether you’re using Jenkins, Azure DevOps, a mixture of the two, or another CI/CD tool, you’ll learn how to create multiple build and release pipelines using real world code hosted on open source platforms such as GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the complete agenda see &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;DevOps World - Jenkins World 2019 San Francisco&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to use discount code &lt;strong&gt;JWFOSS&lt;/strong&gt; for a 30% discount off your &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;pass&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hope to see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/30/becoming-contributor-newbie-tickets/</id>
<title>Becoming a Jenkins contributor: Newbie-friendly tickets</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/30/becoming-contributor-newbie-tickets/" />
<author>
<name>romenrg</name>
</author>
<category term="jenkins"></category>
<category term="community"></category>
<category term="developer"></category>
<category term="contributing"></category>
<category term="newcomer"></category>
<summary>
Two months ago I published an introductory article on
the journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about
the multiple ways in which we can participate and contribute. Then, a first&#8212;&#8203;basic&#8212;&#8203;contribution I made to the site
repository was described.


Now, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.


Getting started with tickets and processes


Beginners guide to contributing and Jenkins Jira

Reviewing the developer section in jenkins.io is probably the best starting point, and a
reference link to keep handy. The beginners guide to contributing to Jenkins
can also be...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two months ago I published an &lt;a href=&quot;https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/&quot;&gt;introductory article&lt;/a&gt; on
the journey of becoming a Jenkins contributor. In that first article, the jenkins.io site was reviewed, learning about
the multiple ways in which we can participate and contribute. Then, a first—​basic—​contribution I made to the site
repository was described.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in this new article we will be exploring more advanced contributions, committing code to the actual Jenkins core.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started-with-tickets-and-processes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started-with-tickets-and-processes&quot;&gt;&lt;/a&gt;Getting started with tickets and processes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;beginners-guide-to-contributing-and-jenkins-jira&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#beginners-guide-to-contributing-and-jenkins-jira&quot;&gt;&lt;/a&gt;Beginners guide to contributing and Jenkins Jira&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reviewing the &lt;a href=&quot;https://jenkins.io/doc/developer/&quot;&gt;developer section&lt;/a&gt; in jenkins.io is probably the best starting point, and a
reference link to keep handy. The &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;beginners guide to contributing to Jenkins&lt;/a&gt;
can also be useful, since it points to different repositories, tools (such as the issue tracker) and governance documents.
Besides, it describes best practices for commit messages, code style conventions, PR guidelines, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we get a general understanding of the former and want to actually start coding, we may get stuck trying to come up
with something to work on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Visiting the &lt;a href=&quot;https://issues.jenkins-ci.org/projects/JENKINS/issues&quot;&gt;Jenkins issue tracker&lt;/a&gt;, feels like the natural next
step, since it is full of potential bugs and enhancements that have already been reported by the community. However, it
is quite easy to feel overwhelmed by the possibilities listed there. Bear in mind that in a 10+-year-old project like
this, most of the things that are reported are tricky for a newcomer to work on. For that reason, filtering by
&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)&quot;&gt;newbie-friendly tickets&lt;/a&gt; is probably
the best idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/list-newbie-tickets.png&quot; alt=&quot;list newbie tickets&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Screenshot displaying the list of newbie-friendly tickets in the Jenkins Jira&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;selecting-a-ticket&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#selecting-a-ticket&quot;&gt;&lt;/a&gt;Selecting a ticket&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I spent some time reviewing the &lt;code&gt;newbie-friendly&lt;/code&gt; tickets, until &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-56477&quot;&gt;I found one&lt;/a&gt;
that seemed interesting to me and also looked like something I would be able to fix:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/jenkins-newbie-jira-ticket-selected.png&quot; alt=&quot;jenkins newbie jira ticket selected&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Screenshot of the ticket I decided to work on&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;processes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#processes&quot;&gt;&lt;/a&gt;Processes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage, when we have decided to take ownership of a ticket, it’s a good practice to let the rest of the community
know that we are planning to start working on it. We can do so easily, by assigning the ticket to ourselves (see the
“&lt;em&gt;Assign&lt;/em&gt;” button below the ticket summary).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assigning the ticket to ourselves in the Jenkins Jira will allow any other contributors to know that we are planning to
take care of the ticket; and in case they are also interested in contributing to it, they will know who to reach if they
want to coordinate work or ask for status. That said, it is worth mentioning that assigning a ticket to yourself does
not mean that other contributors cannot work on it from then onwards. Jenkins is an open-source project and anyone is
welcome to create their own PRs, so anybody can propose their own solution to the ticket. But as you can guess, if the
ticket is assigned to somebody, most people will probably reach the assignee before starting to work on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Related to the former, it is also important to bear in mind that we should not postpone work on the ticket for too long
once we have assigned the ticket to ourselves. Other potential contributors might be ignoring the ticket because they
see yourself assigned to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we are about to actually start working on the ticket, it is also a good practice to click the “&lt;em&gt;Start Progress&lt;/em&gt;”
button. This action will change the status to “&lt;em&gt;In progress&lt;/em&gt;”, signaling to the community that we are currently working
on this particular ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up-the-necessary-stuff-on-our-computer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-up-the-necessary-stuff-on-our-computer&quot;&gt;&lt;/a&gt;Setting up the necessary stuff on our computer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuring-installing-and-testing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-installing-and-testing&quot;&gt;&lt;/a&gt;Configuring, installing and testing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in the &lt;a href=&quot;https://jenkins.io/blog/2019/03/29/becoming-contributor-intro/&quot;&gt;first article of this journey&lt;/a&gt;, the
initial step to start contributing to a particular repository is to fork it to our GitHub account, and then clone it to
our local computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, in the Jenkins core repository the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING file&lt;/a&gt;
describes the necessary steps to get the repository working locally. This includes installing the necessary development
tools: Java Development Kit (&lt;em&gt;&lt;a href=&quot;https://adoptopenjdk.net/&quot;&gt;OpenJDK&lt;/a&gt; is the recommended choice&lt;/em&gt;), Maven and any IDE supporting
Maven projects. Note that instructions to install JDK and Maven are linked in the contributing guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have all the necessary tools installed and configured, we are ready to &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging&quot;&gt;build Jenkins locally&lt;/a&gt;
and also to &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#testing-changes&quot;&gt;run tests&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-down-to-business&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-down-to-business&quot;&gt;&lt;/a&gt;Getting down to business&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reviewing-ticket-details&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reviewing-ticket-details&quot;&gt;&lt;/a&gt;Reviewing ticket details&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that I was ready to start working on the ticket, I had to review it in more detail, to fully understand the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The description of the ticket I was planning to work on included two links. The first one was to
&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3715#issuecomment-470873111&quot;&gt;a screenshot that showed the actual bug&lt;/a&gt;. It showed
how several non-compatible plugins were being selected when clicking “&lt;em&gt;All&lt;/em&gt;”, even though the intended behavior was to
only select the compatible plugins. The second link was &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/core/src/main/resources/hudson/PluginManager/table.jelly#L108…​L120&quot;&gt;a reference to a code fragment&lt;/a&gt;
that showed other validations that had to be taken into account when checking if a plugin update was compatible or not
with the current installation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reproducing-the-issue-locally&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reproducing-the-issue-locally&quot;&gt;&lt;/a&gt;Reproducing the issue locally&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though I had now understood the issue in better detail, I had not seen it myself live yet, so it seemed to me that
the next logical step was to reproduce it locally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reproduce the issue locally in our computer, we can either use the local &lt;code&gt;war&lt;/code&gt; file that we can generate by
&lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#building-and-debugging&quot;&gt;building Jenkins from the source code&lt;/a&gt;
or we can download the &lt;a href=&quot;https://jenkins.io/download/&quot;&gt;latest Jenkins version&lt;/a&gt; available and run it locally. When I worked
on this ticket, the latest available version was &lt;code&gt;2.172&lt;/code&gt; and, when I built if from the sources I saw version &lt;code&gt;2.173-SNAPSHOT&lt;/code&gt;,
which was the next version, in which the community was already working on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general it is a good idea to reproduce bugs locally, not only to get a better understanding, but also to make sure
they are actual issues. It could always be an issue happening only on the reporter’s end (e.g. some user misconfiguration).
Or it could be a ticket referencing an old issue that has been fixed already. This latest possibility didn’t sound that
strange to me, since the ticket was one month old. It could have been handled by someone else in the meantime, without
noticing the ticket existed. Or the contributor might have forgotten to update the ticket in the issue tracker after the
fix was committed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, for all the reasons above, I ran the latest Jenkins version locally. From a terminal, I went to the
folder in which the war file was placed, and ran &lt;code&gt;java -jar jenkins.war&lt;/code&gt;, which starts Jenkins locally on &lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From the home page I navigated to the Plugin Manager (clicking the “&lt;em&gt;Manage Jenkins&lt;/em&gt;” link in the left hand side and
then selecting “&lt;em&gt;Manage Plugins&lt;/em&gt;” in the list).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Manage Plugins page, the list of plugin updates appears. In my case, since I re-used an old &lt;code&gt;JENKINS_HOME&lt;/code&gt;
from an older installation, several plugins showed up in the list, requiring updates. That allowed me to test the behavior
that was supposed to be failing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I clicked on the “Select all” option at the bottom, this is what I got:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/jenkins-plugin-manager-updates-selected-bottom.png&quot; alt=&quot;jenkins plugin manager updates selected bottom&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Screenshot showing the error, reproduced locally, after clicking “Select All”&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As it had been reported in the ticket, the behavior was inconsistent. In a previous version, the behavior of the “&lt;em&gt;All&lt;/em&gt;”
selector had been changed (with the best intent), aiming to only check the compatible plugins. However, as can be seen
in the screenshot, the behavior was not the expected one. Now, neither “all” nor “only compatible” plugins were being
selected, since some plugins with compatibility issues were also being checked, unintentionally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;figuring-out-a-fix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#figuring-out-a-fix&quot;&gt;&lt;/a&gt;Figuring out a fix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When reading the conversation in the original PR in which the behavior of the “&lt;em&gt;All&lt;/em&gt;” selector had been changed, I saw a
suggestion of having a separate “&lt;em&gt;Compatible&lt;/em&gt;” selector, thus leaving the “&lt;em&gt;All&lt;/em&gt;” selector with the traditional behavior.
I liked the idea, so I decided to include it as part of my proposed change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage, I had a clear picture of the different things I needed to change. These included: 1) The UI, to add a new
selector for “Compatible” plugins only, 2) the JS code that applied the changes to the interface when the selectors were
clicked and 3) probably the back-end method that was determining if a plugin was compatible or not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;applying-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#applying-the-change&quot;&gt;&lt;/a&gt;Applying the change&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, and as it is also recommended in the contributing guidelines, I created a separate feature branch to work on
the ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After reviewing the code, I spent some time figuring out which pieces I needed to change, both in the back-end and also
in the front-end. For more details about the changes I had to make, you can take a look at the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3985/files&quot;&gt;changes in my PR&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a basic summary, I learned that the classic Jenkins UI was built using &lt;a href=&quot;https://commons.apache.org/proper/commons-jelly/tutorial.html&quot;&gt;Jelly&lt;/a&gt;
and, after understanding its basics, I modified the &lt;code&gt;index.jelly&lt;/code&gt; file to include the new selector, assigning the
function that checked the compatible plugins to this new selector, and re-using the existing “toggle” function to set
all checkboxes to true in the case of “&lt;em&gt;All&lt;/em&gt;”. I also had to modify the behavior of the &lt;code&gt;checkPluginsWithoutWarnings&lt;/code&gt;
JavaScript function, to un-check the incompatible ones, since there was now an actual “&lt;em&gt;All&lt;/em&gt;” selector that was not there
previously, and that un-check case was not being taken into account. Then, I created a new back-end Java method
&lt;code&gt;isCompatible&lt;/code&gt;, inside the &lt;code&gt;UpdateSite.java&lt;/code&gt; class, which now calls all the different methods that check different
compatibilities and returns the combined boolean result. For this change, I included an automated test to verify the
correct behavior of the method, contributing to the test coverage of the project. Finally, I modified the &lt;code&gt;table.jelly&lt;/code&gt;
file to call the new back-end method from the UI, replacing the existing one that was not taking all cases into account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the change involved touching different technologies, but even if you face a similar situation in which
you are not familiar with some of them, my advice would be carry on, don’t let that stop you. As software engineers, we
should &lt;a href=&quot;https://github.com/romenrg/evergreen-skills-developers&quot;&gt;focus on our evergreen skills&lt;/a&gt;, rather than on knowing
specific technologies; adapting to whatever framework we have to use at a given moment, learning whatever we need about
the new technology to complete the task and applying cross-framework principles and best practices to provide a quality
solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;result&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#result&quot;&gt;&lt;/a&gt;Result&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the changes described above, the resulting UI includes a new option, and the corresponding behaviors of the three
selectors work as expected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/fixed-select-compatible.png&quot; alt=&quot;fixed select compatible&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Screenshot of the new version, displaying the behavior achieved by clicking the new “Compatible” selector&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;publishing-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#publishing-the-change&quot;&gt;&lt;/a&gt;Publishing the change&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;submitting-a-pull-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#submitting-a-pull-request&quot;&gt;&lt;/a&gt;Submitting a Pull Request&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the contributing guidelines of the Jenkins core repository there is also a section about &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/CONTRIBUTING.md#proposing-changes&quot;&gt;proposing changes&lt;/a&gt;,
which describes the necessary steps that have to be followed in order to create a Pull Request (PR) with our change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, there is a &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;PR template&lt;/a&gt; in
the repository, which will be loaded automatically when creating a new PR and that will serve as a basis for us to provide
the necessary information for the reviewers. We are expected to: include a link to the ticket, list the proposed changelog
entries describing our changes, complete the submitter checklist and add mentions to the desired reviewers (if any).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/3985#issue-270291185&quot;&gt;I followed the template when creating my PR&lt;/a&gt;,
completing all sections. I linked the Jira ticket, provided two proposed changelog entries, completed the submitter
checklist and added three desired reviewers (explaining why I thought their reviews would be valuable). I also linked
the original PR that was referenced in the ticket, to provide further context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/pr-created.png&quot; alt=&quot;pr created&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. Screenshot of the PR I submitted&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-approve-and-merge-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-approve-and-merge-process&quot;&gt;&lt;/a&gt;The approve and merge process&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated in the contributing guidelines, typically two approvals are needed for the PR to be merged; and it can take
from a few days to a couple of weeks to get them. Sometimes, one approval from a reviewer and a 1-week delay without
extra reviews is considered enough to set the PR as &lt;code&gt;ready-for-merge&lt;/code&gt;. However, both the time-to-merge and the number
of approvals necessary might vary, depending on the complexity of the change or the area of Jenkins core that it affects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the necessary approvals have been received, a Jenkins core maintainer will set the PR as  &lt;code&gt;ready-for-merge&lt;/code&gt;, which
will lead to it being merged into the master branch when one of the following releases are being prepared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my case, I received a review by Daniel (the reporter of the ticket and one of my “desired reviewers”) the very day I
submitted the PR (April 14th). He made several very useful suggestions, which led to changes from my side. After those
changes, Daniel made minor remarks and my PR got another review, which was its first approval. After a week had passed
without further news, I added the remaining minor suggestions from Daniel and a few days later received another approval,
to which Daniel’s final approval was added, leading the PR to be labeled &lt;code&gt;ready-for-merge&lt;/code&gt;, being later merged the same
day (April 26th).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-30-becoming-contributor/pr-merged.png&quot; alt=&quot;pr merged&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. Screenshot of the final state of the PR, after being merged&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#release&quot;&gt;&lt;/a&gt;Release&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For every new release, repository maintainers will select a set of PRs that have already been labeled &lt;code&gt;ready-for-merge&lt;/code&gt;,
merge them to master, prepare changelogs (often using the suggestions included in the PRs by the authors) and proceed with
the creation of the new release. There is no additional action required from Pull Request authors at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every week a new version of Jenkins is released, so when your PR is merged, your changes will—​most likely—​become part
of the following weekly release of Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, your changes will also reach the &lt;a href=&quot;https://jenkins.io/download/lts/&quot;&gt;Long-term support (LTS) release&lt;/a&gt;, which is
a different release line, aimed for more conservative users. This release line gets synced with the weekly release by
picking, every 12 weeks, a relatively recent weekly release as baseline for the new LTS release. In between, intermediate
LTS releases are created only to include important bug fixes, cherry-picked from the weekly releases. New features are
typically delayed until the next baseline for the LTS release is defined.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regarding the example described in this post, &lt;strong&gt;it was released in Jenkins &lt;code&gt;2.175&lt;/code&gt;&lt;/strong&gt; (weekly release), soon after being
merged. And will probably be included in the next LTS, which should be released next month (June 2019).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;done&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#done&quot;&gt;&lt;/a&gt;Done!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that’s it! We have now covered the whole lifecycle of a new proposed change to Jenkins core. We have reviewed the
process from the very beginning, picking a ticket from the Jenkins issue tracker; all the way to the end, having our
change released in a new Jekins version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have never contributed but are willing to do so, I hope this article motivates you to go back to the list of
&lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22%2C%20Reopened)%20AND%20component%20%3D%20core%20AND%20labels%20in%20(newbie-friendly)&quot;&gt;&lt;code&gt;newbie-friendly&lt;/code&gt; tickets&lt;/a&gt;, find one that looks interesting to you, and follow the steps described above, until you see
your own change released in a new Jenkins version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, don’t try to solve a complicated issue as your first ticket, there are plenty of easier ways in which you can
contribute, and every little helps!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/22/outreachy-audit-log-project/</id>
<title>Audit Logging in Jenkins: An Outreachy Project</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/22/outreachy-audit-log-project/" />
<author>
<name>jvz</name>
</author>
<category term="community"></category>
<category term="logging"></category>
<category term="outreachy"></category>
<summary>
The Audit Log Plugin for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.
This project integrates the recently released Apache Log4j Audit library to allow for a vast array of possible audit logging destinations and configuration.
We began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with Outreachy where we mentored two interns who laid the foundations of the project.
This year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: Aarthi Rajaraman and Gayathri Rajendar.
Both have...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;Audit Log Plugin&lt;/a&gt; for Jenkins is an in development project to integrate standardized audit logging trails to various core actions in Jenkins.
This project integrates the recently released &lt;a href=&quot;https://logging.apache.org/log4j-audit/latest/&quot;&gt;Apache Log4j Audit&lt;/a&gt; library to allow for a vast array of possible audit logging destinations and configuration.
We began this plugin not long after Log4j Audit 1.0.0 was released last year by partnering with &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; where we &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;mentored two interns&lt;/a&gt; who laid the foundations of the project.
This year, we applied to Outreachy again to continue the project, and we were able to accept two more Outreachy interns: &lt;a href=&quot;https://github.com/aarthira&quot;&gt;Aarthi Rajaraman&lt;/a&gt; and &lt;a href=&quot;https://github.com/gayathrirajendar&quot;&gt;Gayathri Rajendar&lt;/a&gt;.
Both have already been adding new features and improving the plugin over the past couple months, and the internship officially began on 20 May.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This round has some ambitious goals of various features and documentation we wish to create.
After having added audit log support for several built-in event listeners in Jenkins around the lifecycle of projects, builds, nodes, and authentication during both the previous internship and the applications to this one, we would like to accomplish the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make a &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/milestone/1&quot;&gt;1.0 release&lt;/a&gt; of the plugin for the Jenkins Update Center. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/34&quot;&gt;#34&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add documentation on supported audit log types and configuration options. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/40&quot;&gt;#40&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add audit logs for credential usage and lifecycle events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/35&quot;&gt;#35&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/36&quot;&gt;#36&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add audit logs for user property lifecycle events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/37&quot;&gt;#37&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define or document an API for other plugins to use to define and log their own audit events. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/30&quot;&gt;#30&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure audit log events use consistent vocabulary with the Jenkins UI. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/33&quot;&gt;#33&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an audit log event recorder/viewer comparable to the Jenkins logger recorder administrative UI. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/32&quot;&gt;#32&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add support for configuring a syslog-compatible log server for writing audit logs. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/29&quot;&gt;#29&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add support for configuring a relational database such as &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; for writing audit logs. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/31&quot;&gt;#31&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve unit test coverage and pay down technical debt. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/38&quot;&gt;#38&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Begin discovery on alternative ways to manage the underlying Log4j Core configuration such as via the upcoming integration with Spring Cloud Configuration. &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin/issues/39&quot;&gt;#39&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future, we hope to participate with more projects and mentors.
Going on concurrently with Outreachy right now is &lt;a href=&quot;https://jenkins.io/blog/2019/03/04/gsoc2019-announcement/&quot;&gt;Google Summer of Code 2019&lt;/a&gt; where we are mentoring several more projects and students.
Please extend a warm welcome to all our new contributors and community members from Outreachy and GSoC!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/11/docs-sig-announcement/</id>
<title>Jenkins Documentation Special Interest Group</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/11/docs-sig-announcement/" />
<author>
<name>markewaite</name>
</author>
<category term="documentation"></category>
<category term="docs"></category>
<category term="community"></category>
<summary>
We&#8217;re pleased to announce the formation of the Jenkins Documentation Special Interest Group.
The Docs SIG encourages contributors and external communities to create and review Jenkins documentation.


See the Special Interest Group Overview for more details and plans.


How can I help?


The Jenkins Documentation SIG would love to have your help with:




reviewing and fixing open bug reports


reviewing Jenkins documentation pull requests


reviewing Jenkins X documentation pull requests






How can I fix a documentation bug?


Instructions for contributing to the Jenkins documentation are in the CONTRIBUTING file of the site repository.
Follow the instructions in that file and submit pull requests for review.


Instructions for contributing to the Jenkins...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/logos/needs-you/Jenkins_Needs_You-02.png&quot; alt=&quot;Jenkins Needs You&quot; height=&quot;256&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re pleased to announce the formation of the Jenkins Documentation Special Interest Group.
The Docs SIG encourages contributors and external communities to create and review Jenkins documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/docs&quot;&gt;Special Interest Group Overview&lt;/a&gt; for more details and plans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-help&quot;&gt;&lt;/a&gt;How can I help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Documentation SIG would love to have your help with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reviewing and fixing &lt;a href=&quot;https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20%22Jenkins%20Website%22%20AND%20status%20!%3D%20Done&quot;&gt;open bug reports&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reviewing &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/pulls&quot;&gt;Jenkins documentation pull requests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reviewing &lt;a href=&quot;https://github.com/jenkins-x/jx-docs/pulls&quot;&gt;Jenkins X documentation pull requests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-fix-a-documentation-bug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-fix-a-documentation-bug&quot;&gt;&lt;/a&gt;How can I fix a documentation bug?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instructions for contributing to the Jenkins documentation are in the &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc#getting-started&quot;&gt;CONTRIBUTING file&lt;/a&gt; of the site repository.
Follow the instructions in that file and submit pull requests for review.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instructions for contributing to the Jenkins X documentation are on the &lt;a href=&quot;https://jenkins-x.io/contribute/documentation/&quot;&gt;Jenkins X documentation site&lt;/a&gt;.
Follow the instructions in that file and submit pull requests for review.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-i-evaluate-a-pull-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-i-evaluate-a-pull-request&quot;&gt;&lt;/a&gt;How can I evaluate a pull request?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pull requests for the Jenkins project are reviewed in the &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/pulls&quot;&gt;Jenkins documentation repository&lt;/a&gt;.
Log in to GitHub with your credentials and add your review comments to pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pull requests for the Jenkins X project are reviewed in the &lt;a href=&quot;https://github.com/jenkins-x/jx-docs/pulls&quot;&gt;Jenkins X documentation repository&lt;/a&gt;.
Login to GitHub with your credentials and add your review comments to pull requests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/09/templating-engine/</id>
<title>Introducing the Jenkins Templating Engine!</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/09/templating-engine/" />
<author>
<name>steven-terrana</name>
</author>
<category term="general"></category>
<category term="pipeline"></category>
<category term="plugin"></category>
<category term="pipeline-authoring"></category>
<summary>
This is a guest post by Steven Terrana, a Lead Technologist at
Booz Allen Hamilton and principal engineer working on the Templating Engine Plugin.
He participates in the Pipeline Authoring  Special Interest Group.






Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.


Most pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The Templating Engine Plugin (abbreviated as JTE for Jenkins...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/steven-terrana&quot;&gt;Steven Terrana&lt;/a&gt;, a Lead Technologist at
&lt;a href=&quot;https://boozallen.com&quot;&gt;Booz Allen Hamilton&lt;/a&gt; and principal engineer working on the &lt;a href=&quot;https://plugins.jenkins.io/templating-engine&quot;&gt;Templating Engine Plugin&lt;/a&gt;.
He participates in the &lt;a href=&quot;../../../../../sigs/pipeline-authoring&quot;&gt;Pipeline Authoring  Special Interest Group&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing DevSecOps practices at the enterprise scale is challenging. With multiple programming languages, automated testing frameworks, and security compliance tools being used by different applications within your organization, it becomes difficult to build and maintain pipelines for each team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most pipelines are going to follow the same generic workflow regardless of which specific tech stack is employed by an application.  The &lt;a href=&quot;https://plugins.jenkins.io/templating-engine&quot;&gt;Templating Engine Plugin&lt;/a&gt; (abbreviated as JTE for Jenkins Templating Engine) allows you to capture this efficiency by creating tool-agnostic, templated workflows to be reused by every team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As technology consultants with clients in both the public and private sectors, at Booz Allen we found ourselves building DevSecOps pipelines from scratch for every new project.  Through developing the Jenkins Templating Engine, we’ve seen pipeline development decrease from months to days now that we can reuse tool integrations while bringing a new level of governance to Jenkins pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-templating&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-templating&quot;&gt;&lt;/a&gt;Pipeline Templating&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Organizations benefit from letting application developers focus on what they do best: building applications. Supporting this means building a centralized DevOps team responsible for maintaining platform infrastructure and creating CI/CD pipelines utilized by development teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the rise of microservice-based architectures, a centralized DevOps teams can support many different development teams simultaneously; all of whom may be leveraging different programming languages and automated testing tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the tools may differ between development teams, the workflow is often the same: unit test, static code analysis, build and publish an artifact, deploy it, and then perform different types of testing against the deployed application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The Templating Engine Plugin allows you to remove the Jenkinsfile from each repository by defining a common workflow for teams to inherit.  Instead of an entire pipeline definition in each repository, teams supply a configuration file specifying which tools to use for the workflow.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jte-in-action&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jte-in-action&quot;&gt;&lt;/a&gt;JTE in Action&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s walk through a bare bones example to demonstrate the reusability of templates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Example Pipeline Template:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;unit_test()
build()
static_code_analysis()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Templates leverage &lt;em&gt;Steps&lt;/em&gt; contributed by &lt;em&gt;Libraries&lt;/em&gt; to outline a workflow teams must implement.  While a template does get executed just like any other &lt;code&gt;Jenkinsfile&lt;/code&gt; (meaning that the standard scripted and declarative syntax is supported), the goal of a template should be to read like plain English and avoid any technical implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Leveraging templates in this way lets you separate the &lt;strong&gt;business logic&lt;/strong&gt; (what should happen when) of your pipeline from the
&lt;strong&gt;technical implementation&lt;/strong&gt; (what’s actually going to happen).  The result of this is a CI/CD pipeline that’s proven to be
significantly easier to manage when supporting multiple teams simultaneously.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The steps outlined by this template (&lt;code&gt;unit_test&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, and &lt;code&gt;static_code_analysis&lt;/code&gt;) have been named generically on purpose. This way teams can specify &lt;em&gt;different&lt;/em&gt; libraries to use while sharing the &lt;em&gt;same&lt;/em&gt; pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementing-the-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#implementing-the-template&quot;&gt;&lt;/a&gt;Implementing the Template&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing a shareable pipeline with the Templating Engine requires a few key components:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline Template&lt;/strong&gt;: &lt;em&gt;Outline the workflow to be performed&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Libraries&lt;/strong&gt;: &lt;em&gt;Provide technical implementations of the steps of the workflow&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration Files&lt;/strong&gt;: &lt;em&gt;Specify which libraries to use and their configuration&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-1-create-a-pipeline-configuration-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1-create-a-pipeline-configuration-repository&quot;&gt;&lt;/a&gt;Step 1: Create a Pipeline Configuration Repository&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;em&gt;Pipeline Configuration Repository&lt;/em&gt; is used to store common configurations and pipeline templates inherited by teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;example Pipeline Configuration Repository&lt;/a&gt; will later be configured as part of a &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#governance-tier&quot;&gt;Governance Tier&lt;/a&gt;: the mechanism in JTE that allows you to build hierarchical configurations representing your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Governance Tier holds three things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pipeline Templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A list of Library Sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tier’s configuration file (&lt;code&gt;pipeline_config.groovy&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The pipeline templates and the configuration file for a Governance Tier are stored in the pipeline configuration repository.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When configuring the Governance Tier in Jenkins, you will provide a source code management location for a repository that contains the above components as well as the base directory where these artifacts can be found.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-2-create-the-pipeline-template&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-create-the-pipeline-template&quot;&gt;&lt;/a&gt;Step 2: Create the Pipeline Template&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we’ll create a &lt;code&gt;Jenkinsfile&lt;/code&gt; for the Governance Tier.  In JTE, the &lt;code&gt;Jenkinsfile&lt;/code&gt; is the default pipeline template that an execution will use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;unit_test()
build()
static_code_analysis()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-3-create-the-libraries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-create-the-libraries&quot;&gt;&lt;/a&gt;Step 3: Create the Libraries&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Templating Engine Plugin has implemented a version of Jenkins Shared Libraries to enhance the reusability of libraries.  A library is a root directory within a source code repository that has been configured as a Library Source on a Governance Tier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example, the pipeline template needs to perform unit testing, package an artifact, and run static code analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s assume that we have some teams using &lt;strong&gt;gradle&lt;/strong&gt; and some teams using &lt;strong&gt;maven&lt;/strong&gt; to build and test their application but they will both use SonarQube to perform static code analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this scenario, we should create &lt;code&gt;gradle&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, and &lt;code&gt;sonarqube&lt;/code&gt; libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;|- gradle/
  \-- build.groovy
  \-- unit_test.groovy
|- maven/
  \-- build.groovy
  \-- unit_test.groovy
|- sonarqube/
  \-- static_code_analysis.groovy&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-4-implement-the-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-4-implement-the-steps&quot;&gt;&lt;/a&gt;Step 4: Implement the Steps&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing a library step is exactly the same as just writing regular global variables as part of the default Jenkins Shared Libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this demonstration, we will just have each step print out the step name and contributing library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle/build.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; call(){
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gradle: build()&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Read more about &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/index.html&quot;&gt;Library Development within JTE&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-5-create-the-configuration-files&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-5-create-the-configuration-files&quot;&gt;&lt;/a&gt;Step 5: Create the Configuration Files&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration file for JTE is named &lt;code&gt;pipeline_config.groovy&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Governance Tier we’ll create a configuration file specifying common configurations between the applications. In this case, both applications are using the &lt;code&gt;sonarqube&lt;/code&gt; library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
  merge = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// allow individual apps to contribute additional libraries&lt;/span&gt;
  sonarqube
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we’ll create two more repositories representing the &lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-maven&quot;&gt;maven&lt;/a&gt; and &lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-gradle&quot;&gt;gradle&lt;/a&gt; applications. Within those repositories all we’ll need is an application-specific &lt;code&gt;pipeline_config.groovy&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These repositories both contain an application &lt;code&gt;pipeline_config.groovy&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;maven app: pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
    maven
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;gradle app: pipeline_config.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;libraries{
    gradle
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-6-configure-the-governance-tier-in-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-6-configure-the-governance-tier-in-jenkins&quot;&gt;&lt;/a&gt;Step 6: Configure the Governance Tier in Jenkins&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have a &lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;Pipeline Configuration Repository&lt;/a&gt; and a &lt;a href=&quot;https://github.com/steven-terrana/example-jte-libraries&quot;&gt;Library Source Repository&lt;/a&gt;, we can configure a &lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#governance-tier&quot;&gt;Governance Tier&lt;/a&gt; in Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-09-templating-engine/governance_tier.png&quot; alt=&quot;governance tier&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This configuration shown in the image above can be found under &lt;code&gt;Manage Jenkins &amp;gt;&amp;gt; Configure System&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Through the Templating Engine, you can create a pipeline governance hierarchy matching your organization’s taxonomy by representing this structure via Folders in Jenkins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-7-create-a-multibranch-pipeline-for-both-applications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-7-create-a-multibranch-pipeline-for-both-applications&quot;&gt;&lt;/a&gt;Step 7: Create a Multibranch Pipeline for Both Applications&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating Multibranch Pipeline Projects for each app, the Templating Engine plugin supplies a new &lt;code&gt;Project Recognizer&lt;/code&gt;
called &lt;strong&gt;Jenkins Templating Engine&lt;/strong&gt;.  This sets the project to use the Templating Engine framework for all branches within the
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-09-templating-engine/project_recognizer.png&quot; alt=&quot;project recognizer&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can also set the &lt;strong&gt;Jenkins Templating Engine&lt;/strong&gt; project recognizer for a GitHub Organization project, enabling you to easily share the same pipeline across an entire Github Organization!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;step-8-run-the-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-8-run-the-pipelines&quot;&gt;&lt;/a&gt;Step 8: Run the Pipelines&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s it!  Now, both applications will leverage the exact same pipeline template while having the flexibility to select which
tools should be used during each phase of the workflow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is sample output from the console log from both applications pipeline runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Gradle:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration
[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-gradle.git
[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git
[JTE] Loading Library gradle from git https://github.com/steven-terrana/example-jte-libraries.git
...
[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration
[JTE][Step - gradle/unit_test]
[Pipeline] echo
gradle: unit_test()
[JTE][Step - gradle/build]
[Pipeline] echo
gradle: build()
[JTE][Step - sonarqube/static_code_analysis]
[Pipeline] echo
sonarqube: static_code_analysis()
[Pipeline] End of Pipeline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Maven:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-configuration
[JTE] Obtained Template Configuration File pipeline_config.groovy from git https://github.com/steven-terrana/example-jte-app-maven.git
[JTE] Loading Library sonarqube from git https://github.com/steven-terrana/example-jte-libraries.git
[JTE] Loading Library maven from git https://github.com/steven-terrana/example-jte-libraries.git
...
[JTE] Obtained Template Jenkinsfile from git https://github.com/steven-terrana/example-jte-configuration
[JTE][Step - maven/unit_test]
[Pipeline] echo
maven: unit_test()
[JTE][Step - maven/build]
[Pipeline] echo
maven: build()
[JTE][Step - sonarqube/static_code_analysis]
[Pipeline] echo
sonarqube: static_code_analysis()
[Pipeline] End of Pipeline&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-the-templating-engine&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#benefits-of-the-templating-engine&quot;&gt;&lt;/a&gt;Benefits of the Templating Engine&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-05-09-templating-engine/jte_benefits.png&quot; alt=&quot;jte benefits&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apply-organizational-governance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#apply-organizational-governance&quot;&gt;&lt;/a&gt;Apply Organizational Governance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Leveraging the Templating Engine Plugin will allow you to define enterprise-scale, approved
workflows that can be used by teams regardless of what tools are being used.  This top-down
approach makes scaling and enforcing DevSecOps principles significantly easier within your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;optimize-code-reuse&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimize-code-reuse&quot;&gt;&lt;/a&gt;Optimize Code Reuse&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There’s really no need for every team in your organization to figure out how to do the same things over
and over again.  At Booz Allen, we have seen pipeline development time decrease from months to days as
we have continuously reused and expanded upon our Templating Engine library portfolio as part of our Solutions
Delivery Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simplify-pipeline-maintainability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simplify-pipeline-maintainability&quot;&gt;&lt;/a&gt;Simplify Pipeline Maintainability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often DevOps engineers find themselves building and supporting pipelines for multiple development teams at
the same time.  By decoupling the workflow from the technical implementation and consolidating the pipeline
definition to a centralized location, the Templating Engine plugin allows DevOps engineers to scale much faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-involved&quot;&gt;&lt;/a&gt;Get Involved!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://plugins.jenkins.io/templating-engine&quot;&gt;Templating Engine Plugin&lt;/a&gt; has been open sourced and made available in the Jenkins Update Center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We always appreciate feedback and contributions! If you have an interesting use case or would like to ask questions, try the &lt;a href=&quot;https://gitter.im/jenkinsci/templating-engine-plugin&quot;&gt;templating-engine-plugin on Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;advanced-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#advanced-features&quot;&gt;&lt;/a&gt;Advanced Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/conditional_inheritance.html&quot;&gt;Configuration File Conditional Inheritance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/externalizing_config.html&quot;&gt;Externalize Library Configurations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Library_Development/lifecycle_hooks.html&quot;&gt;Aspect Oriented LifeCycle Hooks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Governance/index.html#pipeline-template-selection&quot;&gt;Multiple Pipeline Templates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Templating/configuration_files/default_step_implementation.html&quot;&gt;Default Step Implementation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/pages/Templating/configuration_files/sandboxing.html&quot;&gt;Configuration File DSL Sandboxing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-resources&quot;&gt;&lt;/a&gt;More Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;for-this-demonstration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#for-this-demonstration&quot;&gt;&lt;/a&gt;For this Demonstration&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-configuration&quot;&gt;Pipeline Configuration Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-libraries&quot;&gt;Sample Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-maven&quot;&gt;Sample Maven Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/steven-terrana/example-jte-app-gradle&quot;&gt;Sample Gradle Repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-resources&quot;&gt;&lt;/a&gt;Additional Resources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.github.io/jenkins-templating-engine/&quot;&gt;Templating Engine Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/templating-engine-plugin&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/boozallen/sdp-libraries&quot;&gt;Booz Allen’s SDP Pipeline Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://boozallen.com&quot;&gt;Booz Allen Hamilton&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/09/chinese-localization/</id>
<title>A Big Step of the Chinese Localization</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/09/chinese-localization/" />
<author>
<name>linuxsuren</name>
</author>
<category term="general"></category>
<category term="community"></category>
<category term="localization"></category>
<category term="chinese"></category>
<summary>
Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be
the easiest way to help the project. You don&#8217;t need to understand the whole context, even to create a ticket in the
issue tracker system. Improvement of localization usually is minor. But some problems occurred soon,
there isn&#8217;t a native speaker of Chinese that could review my PRs. So, sometimes my PRs
are delayed from being merged into master.


Some contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list
is the open source community way. We got a...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since 2017, I started to do some contributions to the Jenkins community. As a beginner, translation might be
the easiest way to help the project. You don’t need to understand the whole context, even to create a ticket in the
issue tracker system. Improvement of localization usually is minor. But some problems occurred soon,
there isn’t a native speaker of Chinese that could review my PRs. So, sometimes my PRs
are delayed from being merged into master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some contributors told me that I can start a thread at the mailing list. Normally, discussing at the mailing list
is the open source community way. We got a lot of ideas for the localization from there. As a result,
we achieved some goals that I’d like to share here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jep-216&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jep-216&quot;&gt;&lt;/a&gt;JEP-216&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, language localization files were distributed in core and in each plugin.
For &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/216/README.adoc&quot;&gt;this proposal&lt;/a&gt;, each language has a single localization plugin, such as &lt;a href=&quot;https://github.com/jenkinsci/localization-zh-cn-plugin&quot;&gt;Chinese Localization plugin&lt;/a&gt;.
Finally, &lt;a href=&quot;https://github.com/jenkinsci/localization-support-plugin&quot;&gt;Localization Support Plugin&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jenkinsci/localization-zh-cn-plugin&quot;&gt;Chinese Localization plugin&lt;/a&gt; are able to support
all types of localization resource files. From the &lt;a href=&quot;https://plugins.jenkins.io/localization-zh-cn&quot;&gt;plugins website&lt;/a&gt;,
you can see that there are already 13 000 installations.
We removed all Chinese localization files at the &lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/4008&quot;&gt;PR-4008&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I really appreciate &lt;a href=&quot;https://github.com/daniel-beck&quot;&gt;Daniel Beck&lt;/a&gt; for helping me to add localization support,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt; helping me to review JEP-216, and many other community members.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;chinese-localization-sig&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chinese-localization-sig&quot;&gt;&lt;/a&gt;Chinese Localization SIG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We believe that this SIG could help to improve Jenkins experience for Chinese users and gather more contributors
from China. This SIG is responsible for maintaining the &lt;a href=&quot;https://jenkins.io/zh/&quot;&gt;Chinese Jenkins website&lt;/a&gt;,
promoting the Jenkins community in China in the social media with WeChat account. We publish translated blog
articles, Jenkins release notes, JAM or other events at the WeChat account. For now, there are 1800 followers that can
read our news from the last half a year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Especially, I want to say thanks to &lt;a href=&quot;https://github.com/donhui&quot;&gt;Wang Donghui&lt;/a&gt;, &lt;a href=&quot;https://github.com/zacker330&quot;&gt;Zhai Zhijun&lt;/a&gt;, and other &lt;a href=&quot;https://github.com/jenkins-infra/wechat/graphs/contributors&quot;&gt;contributors&lt;/a&gt;. They did a lot of contributions.
I wish I could see more and more folks join us.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/05/telemetry-success/</id>
<title>First successful use of Jenkins telemetry</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-05-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/05/05/telemetry-success/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<category term="telemetry"></category>
<summary>
Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.
We needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.
In the six months since, we didn&#8217;t receive notable reports of problems resulting from this change, and it&#8217;s thanks to the telemetry we gathered beforehand.


The Problem


Jenkins uses the Stapler web framework for HTTP request handling.
Stapler&#8217;s basic premise is that it uses reflective access to code elements matching its naming conventions.
For example, any public method whose name...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Half a year ago we delivered a security fix for Jenkins that had the potential to break the entire Jenkins UI.
We needed to change how Jenkins, through the Stapler web framework, handled HTTP requests, tightening the rules around what requests would be processed by Jenkins.
In the six months since, we didn’t receive notable reports of problems resulting from this change, and it’s thanks to the telemetry we gathered beforehand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins uses the Stapler web framework for HTTP request handling.
Stapler’s basic premise is that it uses reflective access to code elements matching its naming conventions.
For example, any public method whose name starts with &lt;code&gt;get&lt;/code&gt;, and that has a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, or no argument can be invoked this way on objects that are reachable through these means.
As these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple example of that is a URL every Jenkins user would be familiar with: &lt;code&gt;/job/jobname&lt;/code&gt;.
This ends up invoking a method called &lt;code&gt;#getJob(String)&lt;/code&gt;, with the argument being &lt;code&gt;&quot;jobname&quot;&lt;/code&gt;, on the root application object, and having it handle the rest of the URL, if any.
Of course, this is a URL intended to be accessed this way.
How about invoking &lt;code&gt;Object#getClass()&lt;/code&gt;, followed by &lt;code&gt;Class#getClassLoader()&lt;/code&gt;, by accessing the URL &lt;code&gt;/class/classLoader&lt;/code&gt;?
While this particular chain would not result in a useful response, this doesn’t change that the methods were invoked.
We identified a number of URLs that could be abused to access otherwise inaccessible jobs, or even invoke internal methods in the web application server to invalidate all sessions.
&lt;a href=&quot;https://jenkins.io/security/advisory/2018-12-05/&quot;&gt;The security advisory&lt;/a&gt; provides an overview of the issues we’d identified by then.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-idea&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-idea&quot;&gt;&lt;/a&gt;The Idea&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To solve this problem inherent in the Stapler framework’s design, we defined rules that restrict invocation beyond what would be allowed by Stapler.
For example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.
Otherwise, the type wouldn’t be aware of Stapler, and couldn’t produce a meaningful response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This meant that getters just declaring &lt;code&gt;Object&lt;/code&gt; (or &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc.) would no longer be allowed by default.
It was clear to the developers working on this problem that we needed the ability to be able to override the default rules for specific getters.
But allowing plugin developers to adapt their plugins after we published the fix wasn’t going to cut it;
Jenkins needed to ship with a comprehensive default whitelist for methods known to not conform to the new rules, so that updating would not result in problems for users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-solution&quot;&gt;&lt;/a&gt;The Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While there is tooling like &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester/&quot;&gt;Plugin Compatibility Tester&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness&quot;&gt;Acceptance Test Harness&lt;/a&gt;, many Jenkins plugins do not have comprehensive tests of their UI — the Jenkins UI is fairly stable after all.
We did not expect to have sufficient test coverage to deliver a change like this with confidence.
The only way we would be able to build such a comprehensive whitelist would be to add telemetry to Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Jenkins instances periodically report usage statistics to the Jenkins project, the information included is very bare bones and mostly useful to know the number of installations, the popularity of plugins, and the general size of Jenkins instances through number and types of jobs and agents.
We also didn’t want to just collect data without a clear goal, so we set ourselves some limitations — collect as little data as possible, no personally identifiable information, have a specific purpose for each kind of information we would collect, and define an end date for the collection in advance.
We defined all of this in &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/214/README.adoc&quot;&gt;JEP-214&lt;/a&gt;, created the &lt;a href=&quot;https://github.com/jenkins-infra/uplink&quot;&gt;Uplink service that would receive submissions&lt;/a&gt;, and added the basic client framework to Jenkins.
The implementation is fairly basic — we just submit an arbitrary JSON object with some added metadata to a service.
This system would inform tweaks to a security fix we were anxious to get out, after all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting in mid October for weekly releases, and early November for LTS, tens of thousands of Jenkins instances would submit Stapler request dispatch telemetry daily, and we would keep identifying code incompatible with the new rules and amending the fix.
Ultimately, &lt;a href=&quot;https://github.com/jenkinsci/jenkins/blob/44c4d3989232082c254d27ae360aa810669f44b7/core/src/main/resources/jenkins/security/stapler/default-whitelist.txt&quot;&gt;the whitelist&lt;/a&gt; would include a few dozen entries, preventing serious regressions in popular plugins like &lt;a href=&quot;https://plugins.jenkins.io/credentials&quot;&gt;Credentials Plugin&lt;/a&gt;, &lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;JUnit Plugin&lt;/a&gt;, or the Pipeline plugins suite, down to &lt;a href=&quot;https://plugins.jenkins.io/google-cloud-health-check&quot;&gt;Google Health Check Plugin&lt;/a&gt;, a plugin with just 80 installations when we published the fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Learning what requests would result in problems also allowed us to write better developer documentation — we already knew what code patterns would break, and how popular each of them was in the plugin ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-overhaul&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-overhaul&quot;&gt;&lt;/a&gt;The Overhaul&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote above:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the declared return type of getters now needed to be one defined in Jenkins core or a Jenkins plugin and have either clearly Stapler-related methods (with Stapler annotations, parameter types, etc.) or Stapler-related resource files associated with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this was true for the fix during most of development, it isn’t how the fix that we published actually works.
About a month before the intended release date, internal design/code review feedback criticized the complicated and time-consuming implementation that at the time required scanning the class path of Jenkins and all plugins and looking for related resources, and suggested a different approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we tried to require that the declared type or any of its ancestors be annotated with the new annotation &lt;code&gt;@StaplerAccessibleType&lt;/code&gt;, annotated a bunch of types in Jenkins itself (&lt;a href=&quot;https://javadoc.jenkins.io/hudson/model/ModelObject.html&quot;&gt;&lt;code&gt;ModelObject&lt;/code&gt;&lt;/a&gt; being the obvious first choice), and ran our scripts that check to see whether Stapler would be allowed to dispatch methods identified in telemetry.
We’d long since automated the daily update of dispatch telemetry processing, so it was a simple matter of changing which Jenkins build we were working with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few iterations of adding the annotation to more classes, the results were very positive: Very few additional types needed whitelisting, while many more were no longer (unnecessarily) allowed to be dispatched to.
This experiment, late during development, ended up being essentially the fix we delivered.
We didn’t need to perform costly scanning of the class path on startup — we didn’t need to scan the class path at all — , and the rules governing request dispatch in Stapler, while different from before, are still pretty easy to understand and independent of how components are packaged.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-outcome&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-outcome&quot;&gt;&lt;/a&gt;The Outcome&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual when delivering a fix we expect could result in regressions in plugins, we &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix&quot;&gt;created a wiki page&lt;/a&gt; that users could report problems on.
Right now, there’s one entry on that wiki page.
It is one we were aware of well before release, decided against whitelisting it, and the affected, undocumented feature in Git Plugin ended up being removed.
The situation in our issue tracker is only slightly worse, with two apparently minor issues having been reported in Jira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without telemetry, delivering a fix like this one would have been difficult to begin with.
Tinkering with the implementation just a few weeks before release and having any confidence in the result?
Not causing any significant regressions?
I think this would simply be impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/04/03/security-advisory/</id>
<title>Security spring cleaning</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-04-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/04/03/security-advisory/" />
<author>
<name>daniel-beck</name>
</author>
<category term="plugins"></category>
<category term="security"></category>
<summary>
Today we published a security advisory that mostly informs about issues in Jenkins plugins that have no fixes.
What&#8217;s going on?


The Jenkins security team triages incoming reports both to Jira and our non-public mailing list.
Once we&#8217;ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.
Sometimes the affected plugin is unmaintained, or maintainers don&#8217;t respond in a timely manner to the notifications or the followup emails we send.


In such cases, we publish security advisories informing users about these...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we published &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/security/advisory/2019-04-03/&quot;&gt;a security advisory&lt;/a&gt; that mostly informs about issues in Jenkins plugins that have &lt;em&gt;no fixes&lt;/em&gt;.
What’s going on?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins security team triages &lt;a href=&quot;https://jenkins.io/security/#reporting-vulnerabilities&quot;&gt;incoming reports both to Jira and our non-public mailing list&lt;/a&gt;.
Once we’ve determined it is a plugin not maintained by any Jenkins security team members, we try to inform the plugin maintainer about the issue, offering our help in developing, reviewing, and publishing any fixes.
Sometimes the affected plugin is unmaintained, or maintainers don’t respond in a timely manner to the notifications or the followup emails we send.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In such cases, we publish &lt;a href=&quot;https://jenkins.io/security/#vulnerabilities-in-plugins&quot;&gt;security advisories informing users about these issues, even if there’s no new release with a fix&lt;/a&gt;.
Doing so allows administrators to make an informed decision about the continued use of plugins with unresolved security vulnerabilities.
Today’s advisory is overwhelmingly such an advisory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See a plugin you love on this list and want to help out? &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Adopt+a+Plugin&quot;&gt;Learn about adopting plugins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/29/becoming-contributor-intro/</id>
<title>The journey of becoming a Jenkins contributor: Introduction</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/29/becoming-contributor-intro/" />
<author>
<name>romenrg</name>
</author>
<category term="jenkins"></category>
<category term="community"></category>
<category term="developer"></category>
<category term="contributing"></category>
<category term="newcomer"></category>
<summary>
As a software engineer, for many years I have used open source software (frameworks, libraries, tools&#8230;&#8203;) in the
different companies I have worked at. However, I had never been able to engage in an open-source project as a
contributor, until now.


Since I made my first&#8212;&#8203;ridiculously simple&#8212;&#8203;commit into Jenkins, six months ago (in September, 2018), I have been
attempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,
challenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often
difficult to know where to start and also difficult to come up with a...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a software engineer, for many years I have used open source software (frameworks, libraries, tools…​) in the
different companies I have worked at. However, I had never been able to engage in an open-source project as a
contributor, until now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since I made my first—​ridiculously simple—​commit into Jenkins, six months ago (in September, 2018), I have been
attempting to contribute more to the Jenkins project. However, contributing to open-source projects is, in general,
challenging. Especially to long-lived projects, with a lot of history, legacy code and tribal knowledge. It is often
difficult to know where to start and also difficult to come up with a plan to keep moving forward and contributing
regularly, and in more meaningful ways over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to the Jenkins project, I have encountered challenges that others trying to get into the community are
likely to encounter. For that reason, I have decided to go ahead and share my journey of becoming a more engaged Jenkins
contributor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I plan to publish roughly 1 post per month, describing this journey. I will attempt to start contributing to the pieces
that are easier to start with, transitioning towards more complex contributions over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-start&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-to-start&quot;&gt;&lt;/a&gt;Where to start&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins-io&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-io&quot;&gt;&lt;/a&gt;jenkins.io&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To become a Jenkins contributor, the most obvious place to start looking at is &lt;a href=&quot;https://jenkins.io&quot;&gt;jenkins.io&lt;/a&gt;. In the
top navbar there is a Community dropdown, with several links to different sections. The first entry,
&lt;a href=&quot;https://jenkins.io/participate/&quot;&gt;Overview&lt;/a&gt;, takes us to the “Participate and contribute” section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section we get lots of information about the many ways in which we can engage with the Jenkins project and
community. Even though the intention is to display all the possible options, allowing the reader to choose, it can feel
a bit overwhelming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/jenkins-participate-page.png&quot; alt=&quot;jenkins participate page&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The page is divided into two columns, the column on the left shows the different options to participate, while the
column on the right shows the different options to contribute.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;suggestions-to-participate&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#suggestions-to-participate&quot;&gt;&lt;/a&gt;Suggestions to Participate&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the left column of the “Participate and contribute” page, there are several ideas on how to engage with the community,
ranging from communicating to reviewing changes or providing feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the pieces that got me confused at first in this area were the communication channels. There are many different
channels for communication. There are &lt;a href=&quot;https://jenkins.io/mailing-lists&quot;&gt;several mailing lists&lt;/a&gt; and there are also IRC
and Gitter channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During my first attempts to get involved, I subscribed to many of the mailing lists and several IRC and Gitter channels,
but I quickly noticed that there is significant communication going on; and that most threads in the most active lists
and channels are specific to issues users or developers have. So, unless your goal is to support other users right away
(if you are an experienced Jenkins user already it might be the case) or you plan to ask questions that you already
have in mind, I would advise against spending too much time on this at first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though it is great to see how the community members support each other, the amount of communication might be
overwhelming for a newcomer, and if you are also trying to contribute to the project (either with translations,
documentation or code), following these conversations might not be the best way to start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;suggestions-to-contribute&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#suggestions-to-contribute&quot;&gt;&lt;/a&gt;Suggestions to Contribute&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the right column of the “Participate and contribute” page there are several ideas on how to contribute, mostly
grouped into: writing code, translating, documenting and testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In following posts, I will be going through all of these types of contributions, as well as through some of the
suggestions to participate, which include reviewing Pull Requests (PRs) or providing feedback (either reporting new
issues or replicating cases other users have already described, providing additional information to help the maintainer
reproduce and fix them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my-first-contribution-in-this-journey&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#my-first-contribution-in-this-journey&quot;&gt;&lt;/a&gt;My first contribution in this journey&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When looking at the “Participate and contribute” page, I noticed a couple of things in that page that I could help
improve. And I was actually planning to pick one of those as the first example of a contribution for this post. But
when I was reading the contributing guidelines of the repository, I found an even easier contribution I could make,
which I thought would be a great example to illustrate how simple it could be to start contributing. So I decided to go
ahead with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-website-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-website-repository&quot;&gt;&lt;/a&gt;The website repository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the ”Document” section there is a link to the
&lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/CONTRIBUTING.adoc&quot;&gt;contributing guidelines of the jenkins.io repository&lt;/a&gt;.
The CONTRIBUTING file is a common file present in the root folder of most open-source-project repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the link to that file, I reached the jenkins.io repository, which is the one that contains the sources for
the corresponding website—​which also includes this blog. And, in fact, the contributing file was the first file I
wanted to review, in order to learn more about how to contribute to the website.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;found-a-broken-link&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#found-a-broken-link&quot;&gt;&lt;/a&gt;Found a broken link&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When reading the contributing file, I learned about the Awestruct static site generator, which is the tool used to
transform the AsciiDoc source files in the repo into a website. However, when I clicked the link to learn more about it, I noticed it was broken. The domain had expired.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/awestruct-site.png&quot; alt=&quot;awestruct site&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why-not-fix-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-not-fix-it&quot;&gt;&lt;/a&gt;Why not fix it?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was the opportunity I chose to show other newcomers how easy it can be to start contributing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;forking-the-repository&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#forking-the-repository&quot;&gt;&lt;/a&gt;Forking the repository&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step, as usual, would be to fork the repository and clone it to my machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;applying-the-change&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#applying-the-change&quot;&gt;&lt;/a&gt;Applying the change&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step would be to apply the change to the corresponding file. To do so, I created a new branch
“alternative-awestruct-link” and applied the change there:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/making-change.png&quot; alt=&quot;making change&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;making-sure-everything-builds-correctly-and-tests-pass&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#making-sure-everything-builds-correctly-and-tests-pass&quot;&gt;&lt;/a&gt;Making sure everything builds correctly and tests pass&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though in this case my contribution was not to the actual website, but to the contributing guidelines (and for
that reason was unlikely to break anything), it is a best practice to get used to the regular process every
contribution should follow, making sure everything builds correctly after any change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As stated in the contributing guidelines themselves, in order to build this repository we just have to run the default
“make” target, in the root of the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/executing-make.png&quot; alt=&quot;executing make&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the command execution finishes, if everything looks good, we are ready to go to the next step: creating the PR.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;creating-the-pr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-the-pr&quot;&gt;&lt;/a&gt;Creating the PR&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once my change had been committed and pushed to my repository, I just had to create the PR. We have an easy way to do so
by just clicking the link that we get in our git logs once the push is completed, although we can create the PR directly
through the GitHub UI, if we prefer so; or even use &lt;a href=&quot;https://github.com/github/hub&quot;&gt;“hub”&lt;/a&gt;, the GitHub CLI, to do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, I just clicked the link, which took me to the PR creation page on GitHub. Once there, I added a
description and created the PR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/creating-pr.png&quot; alt=&quot;creating pr&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a PR to this repository is created, we notice there are some checks that start running. Jenkins repositories are
configured to notify the &lt;a href=&quot;https://ci.jenkins.io/&quot;&gt;“Jenkins on Jenkins”&lt;/a&gt;, which runs the corresponding CI pipelines for
each repository, as described in the corresponding &lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io/blob/master/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the checks are completed, we can see the result in the PR:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/pr-created-passing.png&quot; alt=&quot;pr created passing&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if we want to see the details of the execution, we can follow the “Show all checks” link:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/pr-checks-jenkins.png&quot; alt=&quot;pr checks jenkins&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;pr-review&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pr-review&quot;&gt;&lt;/a&gt;PR Review&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the PR has been created and all automated checks are passing, we only have to wait for peer code reviews.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once someone approves the PR and it is later merged, your contribution is integrated into the master branch of the
repository, becoming part of the next release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-03-29-becoming-contributor/pr-merged.png&quot; alt=&quot;pr merged&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;i-have-contributed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-have-contributed&quot;&gt;&lt;/a&gt;I have contributed!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This contribution I made is a trivial one, with very little complexity and it might not be the most interesting one if
you are trying to contribute code to the Jenkins project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, for me, as the contributor, it was a great way to get familiar with the repository, its contributing
guidelines, the technology behind the jenkins.io website; and, above anything else, to start “losing the fear” of
contributing to an open source project like Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you are in the same position I was, do not hesitate. Go ahead and find your own first contribution. Every little
counts!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/28/outreachy-review/</id>
<title>Outreachy 2018-2019 In Review</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-28T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/28/outreachy-review/" />
<author>
<name>jvz</name>
</author>
<category term="outreachy"></category>
<summary>
Over the past three months, I have been mentoring two Outreachy interns, David and Latha, with my co-mentor, Jeff Thompson.
Our project was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.
While this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.
This project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the past three months, I have been mentoring two Outreachy interns, &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;David and Latha&lt;/a&gt;, with my co-mentor, Jeff Thompson.
&lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;Our project&lt;/a&gt; was to introduce a standardized way for creating an audit log of Jenkins and plugins using Apache Log4j Audit.
While this type of feature is addressed by other existing plugins, there is no unifying way for plugins to contribute their own actions.
This project provided ample opportunities for each of our interns to experience the community processes for starting a new Jenkins plugin, contributing changes to Jenkins itself in order to support more audit event types, using CICD principles, and developing a Jenkins Enhancement Proposal to begin the standardization process of audit logging throughout the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During this internship, David and Latha contributed several aspects of the project, much of which lays the foundation for easily instrumenting more subsystems and plugins with audit logs.
A template &lt;code&gt;log4j2.xml&lt;/code&gt; file is used for allowing more complex logging output configurations with a configuration UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/audit-log-1.0.png&quot; alt=&quot;Audit log configuration UI&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New APIs have been introduced in Jenkins to allow for more authentication-related events to be audited by the plugin.
Audit events have been defined for a few authorization scenarios and some build events.
For example, here is a snippet of audit log output for a build execution in the JSON layout:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;{
  &quot;thread&quot; : &quot;Executor #0 for master : executing test #1&quot;,
  &quot;level&quot; : &quot;OFF&quot;,
  &quot;loggerName&quot; : &quot;AuditLogger&quot;,
  &quot;marker&quot; : {
    &quot;name&quot; : &quot;Audit&quot;,
    &quot;parents&quot; : [ {
      &quot;name&quot; : &quot;EVENT&quot;
    } ]
  },
  &quot;message&quot; : &quot;Audit [buildStart buildNumber=\&quot;1\&quot; cause=\&quot;[Started by user anonymous]\&quot; projectName=\&quot;test\&quot; timestamp=\&quot;Mon Mar 25 13:48:09 CDT 2019\&quot; userId=\&quot;SYSTEM\&quot;]&quot;,
  &quot;endOfBatch&quot; : false,
  &quot;loggerFqcn&quot; : &quot;org.apache.logging.log4j.audit.AuditLogger&quot;,
  &quot;instant&quot; : {
    &quot;epochSecond&quot; : 1553539689,
    &quot;nanoOfSecond&quot; : 810000000
  },
  &quot;contextMap&quot; : { },
  &quot;threadId&quot; : 54,
  &quot;threadPriority&quot; : 5
}
{
  &quot;thread&quot; : &quot;Executor #0 for master : executing test #1&quot;,
  &quot;level&quot; : &quot;OFF&quot;,
  &quot;loggerName&quot; : &quot;AuditLogger&quot;,
  &quot;marker&quot; : {
    &quot;name&quot; : &quot;Audit&quot;,
    &quot;parents&quot; : [ {
      &quot;name&quot; : &quot;EVENT&quot;
    } ]
  },
  &quot;message&quot; : &quot;Audit [buildFinish buildNumber=\&quot;1\&quot; cause=\&quot;[Started by user anonymous]\&quot; projectName=\&quot;test\&quot; timestamp=\&quot;Mon Mar 25 13:48:10 CDT 2019\&quot; userId=\&quot;SYSTEM\&quot;]&quot;,
  &quot;endOfBatch&quot; : false,
  &quot;loggerFqcn&quot; : &quot;org.apache.logging.log4j.audit.AuditLogger&quot;,
  &quot;instant&quot; : {
    &quot;epochSecond&quot; : 1553539690,
    &quot;nanoOfSecond&quot; : 155000000
  },
  &quot;contextMap&quot; : { },
  &quot;threadId&quot; : 54,
  &quot;threadPriority&quot; : 5
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best of all, this project has helped instill important software engineering values such as automated testing and continuous delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we conclude this round, we look forward to participating in the next Outreachy internship to continue this project and grow the community.
For more information about the next round, check out &lt;a href=&quot;https://www.outreachy.org/may-2019-august-2019-outreachy-internships/communities/jenkins/&quot;&gt;the Outreachy website&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/12/cdf-launch/</id>
<title>Jenkins is joining the Continuous Delivery Foundation</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/12/cdf-launch/" />
<author>
<name>kohsuke</name>
</author>
<category term="cdf"></category>
<category term="general"></category>
<category term="community"></category>
<summary>
Today Linux Foundation, along with CloudBees, Google, and a number of other companies, launched a new open-source software foundation called Continuous Delivery Foundation (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.


Jenkins contributors have decided that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from here.


Now, as a user, what does this mean?




First, there will be no big disruption/discontinuity. The same people are still here, no URL is changing,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/cdf/logo/cdf-logo.png&quot; alt=&quot;CDF&quot; width=&quot;300&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today &lt;a href=&quot;https://www.linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;, along with &lt;a href=&quot;https://www.cloudbees.com/&quot;&gt;CloudBees&lt;/a&gt;, &lt;a href=&quot;https://about.google/&quot;&gt;Google&lt;/a&gt;, and &lt;a href=&quot;https://cd.foundation/members/&quot;&gt;a number of other companies&lt;/a&gt;, launched a new open-source software foundation called &lt;a href=&quot;https://cd.foundation/&quot;&gt;Continuous Delivery Foundation&lt;/a&gt; (CDF.) The CDF believes in the power of Continuous Delivery, and it aims to foster and sustain the ecosystem of open-source, vendor neutral projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins contributors &lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/KFhQaYEl70c&quot;&gt;have decided&lt;/a&gt; that our project should join this new foundation. This discussion happened over a period of time, with a relatively succinct summary of the motivation comes from &lt;a href=&quot;https://groups.google.com/d/topic/jenkinsci-dev/1w57jl3K4S4/discussion&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, as a user, what does this mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, there will be no big disruption/discontinuity. The same people are still here, no URL is changing, releases will come out like they’ve always been. We will make the decisions the same way as we’ve been making, and pull requests land the same way. Changes will happen continuously over the period of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is yet another testament to the maturity and the importance of the Jenkins project in this space. With &lt;a href=&quot;https://stats.jenkins.io/jenkins-stats/svg/svgs.html&quot;&gt;a quarter million Jenkins running around the globe&lt;/a&gt;, it’s truly rocking the world of software development from IoT to games, cloud native webapps to machine learning projects. It makes Jenkins such an obvious, safe choice for anyone seeking open heterogeneous DevOps strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The CDF creates a level playing field that is well-understood to organized contributors, which further, translate into more contributors, hence resulting in a better Jenkins, faster. Over the past years, the Jenkins project has been steadily growing &lt;a href=&quot;https://jenkins.io/sigs/&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep#index-of-jenkins-enhancement-proposals&quot;&gt;structures&lt;/a&gt; that provide this clarity, and this is the newest step on this trajectory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any serious dev teams are combining multiple tools and services to cover the whole software development spectrum. A lot of work gets reinvented in those teams to integrate those tools together. Jenkins will be working more closely with other projects under the umbrella of the CDF, which would result in better aligned software with less overlap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our users are practitioners trying to improve the software development process in their organizations. They get that CI/CD/automation which unlocks the productivity that their organizations need, but that’s not always obvious to their organizations as a whole. So our users often struggle to get the necessary support. The CDF will advocate for the practice of Continuous Delivery, and because it’s not coming from a vendor or a project, it will reach the people who can lend that support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So I hope you can see why we are so excited about this!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, for us, this is an idea that we’ve been cooking for close to two years. I don’t think I’m exaggerating much to say the whole idea of the CDF &lt;em&gt;started&lt;/em&gt; from the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of people have done so much work behind the scene to make this happen. But a few people played such instrumental roles that I have to personally thank them namely, &lt;a href=&quot;https://github.com/caniszczyk&quot;&gt;Chris Aniszczyk&lt;/a&gt; for his patience and persistence, &lt;a href=&quot;https://github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt; for cooking and evolving the idea, and &lt;a href=&quot;https://github.com/tracymiranda&quot;&gt;Tracy Miranda&lt;/a&gt; for bringing this idea into a reality.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/11/let-s-celebrate-java-11-support/</id>
<title>Let's celebrate Java 11 Support on Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/11/let-s-celebrate-java-11-support/" />
<author>
<name>alecharp</name>
</author>
<category term="core"></category>
<category term="developer"></category>
<category term="java11"></category>
<category term="community"></category>
<category term="platform-sig"></category>
<summary>
This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.








We have worked hard for this and it&#8217;s now here.
We are thrilled to announce full support for Java 11 in Jenkins starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).
This means you can now run your Jenkins masters and agents with a Java 11 JVM.


Starting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.
Beyond...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a joint blog post prepared by the Java 11 Support Team: Adrien Lecharpentier, Ashton Treadway, Baptiste Mathus, Jenn Briden, Kevin Earls, María Isabel Vilacides, Mark Waite, Ramón León and Oleg Nenashev.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/logos/formal/256.png&quot; alt=&quot;Jenkins Java&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have worked hard for this and it’s now here.
We are thrilled to announce &lt;strong&gt;full support for Java 11 in Jenkins&lt;/strong&gt; starting from Jenkins 2.164 (released on Feb 10, 2019) and LTS 2.164.1 (ETA: March 14th).
This means you can now run your Jenkins masters and agents with a Java 11 JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting in June 2018, many events were organized to improve Jenkins code base and add Java 11 support.
Beyond these events, Core/Plugins maintainers and many other contributors have worked hard to make sure they discover and solve as many issues as possible related to Java 11 support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effort to support Java 11 led to the creation of the &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 10+ support in Jenkins&lt;/a&gt;.
It also spurred the creation of the &lt;a href=&quot;https://jenkins.io/sigs/platform&quot;&gt;Platform Special Interest Group&lt;/a&gt; to coordinate the Java 11 work and other platform support efforts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;celebration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#celebration&quot;&gt;&lt;/a&gt;Celebration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’d like to take a moment to thank everyone involved in these tasks: code contributors, issue reporters, testers, event planners and attendees and all those in the community who have generously lent their time and support to this effort.
Thank you all!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some of the contributors who helped with this task (alphabetical order):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alex Earl,
Alyssa Tong,
Ashton Treadway,
Baptiste Mathus,
Carlos Sanchez,
Daniel Beck,
David Aldrich,
Denis Digtyar,
Devin Nusbaum,
Emeric Vernat,
Evaristo Gutierrez,
Gavin Mogan,
Gianpaolo Macario,
Isabel Vilacides,
James Howe,
Jeff Pearce,
Jeff Thompson,
Jenn Briden,
Jesse Glick,
Jonah Graham,
Kevin Earls,
Ksenia Nenasheva,
Kohsuke Kawaguchi,
Liam Newman,
Mandy Chung,
Mark Waite,
Nicolas De Loof,
Oleg Nenashev,
Oliver Gondža,
Olivier Lamy,
Olivier Vernin,
Parker Ennis,
Paul Sandoz,
Ramón León,
Sam Van Oort,
Tobias Getrost,
Tracy Miranda,
Ulli Hafner,
Vincent Latombe,
Wadeck Follonier&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(We are deeply sorry if we missed anyone in this list.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;guidelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#guidelines&quot;&gt;&lt;/a&gt;Guidelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to keep it simple, here is how you can start Jenkins on Java 11 using the Docker image.
You can select a Java 11 based image by suffixing the tag of the image with &lt;code&gt;-jdk11&lt;/code&gt;.
If you are upgrading an existing instance please read the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/administration/requirements/upgrade-java-guidelines/&quot;&gt;Upgrading Jenkins Java version from 8 to 11&lt;/a&gt; page before upgrading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you can run Jenkins on Java 11 with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;docker run -p 50000:50000 -p 8080:8080 jenkins/jenkins:2.164-jdk11&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, and as always, you can still start Jenkins with other methods.
Please see the more detailed documentation at &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;developer-guidelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developer-guidelines&quot;&gt;&lt;/a&gt;Developer guidelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For developers involved in Jenkins development, you can find details on developing and testing Jenkins to run on Java 11 on the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer Guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This resource regroups the modifications which might need to be done in order to validate the compatibility of plugins for Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even though this is a big achievement, we still have work to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our first priority is adding Java 11 support to &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;JenkinsFile Runner&lt;/a&gt; project.
From there, we will move on to port Java 11 support to the &lt;a href=&quot;https://github.com/jenkins-x&quot;&gt;Jenkins X&lt;/a&gt; project and the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/evergreen/&quot;&gt;Evergreen&lt;/a&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, even if this is a big deal to us, this is not the end of the story.
It is a major step that will benefit users, developers, and members of the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reference-links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reference-links&quot;&gt;&lt;/a&gt;Reference links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot; class=&quot;bare&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot; class=&quot;bare&quot;&gt;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 11 support in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/04/gsoc2019-announcement/</id>
<title>Jenkins is accepted to Google Summer Of Code 2019!</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-04T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/04/gsoc2019-announcement/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="events"></category>
<category term="community"></category>
<summary>
On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project has been accepted to
Google Summer of Code 2019.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.


Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 project ideas
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the Jenkins GSoC org team,
I am happy to announce that the Jenkins project &lt;strong&gt;has been accepted&lt;/strong&gt; to
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2019&lt;/a&gt;.
This year we invite students and mentors to join the Jenkins community and work together
on enhancing the Jenkins ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just to provide some numbers, this is the biggest GSoC ever, 206 organizations will participate in GSoC this year.
And it will be hopefully the biggest year for Jenkins as well.
We have 25 &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/project-ideas&quot;&gt;project ideas&lt;/a&gt;
and more than 30 potential mentors (and counting!).
It is already more than in 2016 and 2018 combined.
There are many plugins, SIGs and sub-projects which have already joined GSoC this year.
And we have already received messages and first contributions from dozens of students, yey!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What’s next?&lt;/strong&gt;
GSoC is officially announced, and please expect more students to contact projects in our
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/#contacts&quot;&gt;Gitter channels and mailing lists&lt;/a&gt;.
Many communications will also happen in SIG and sub-project channels.
We will be working hard in order to help students to find interesting projects, to explore the area,
and to prepare their project proposals before the deadline on April 9th.
Then we will process the applications, select projects and assign mentor teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All information about the Jenkins GSoC is available on its &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/&quot;&gt;sub-project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-am-a-student-how-do-i-apply&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-am-a-student-how-do-i-apply&quot;&gt;&lt;/a&gt;I am a student. How do I apply?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/students&quot;&gt;Information for students&lt;/a&gt; page for full application guidelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We encourage interested students to reach out to the Jenkins community early and to start exploring project ideas.
All project ideas have chats and mailing lists referenced on their pages.
We will be also organizing office hours for students,
and you can use these meetings to meet org admins and mentors and to ask questions.
Also, join our &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;Gitter channel&lt;/a&gt; and the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;mailing list&lt;/a&gt;
to receive information about such incoming events in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application period starts on March 25th, but you can prepare now!
Use the time before the application period to discuss and improve your project proposals.
We also recommend that you become familiar with Jenkins and start exploring your proposal areas.
Project ideas include quick-start guidelines and reference newbie-friendly issues
which may help with initial study.
If you do not see anything interesting,
you can &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/proposing-project-ideas/&quot;&gt;propose your own project idea&lt;/a&gt;
or check out ideas proposed by &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/&quot;&gt;other organizations&lt;/a&gt;
participating in GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;i-want-to-be-a-mentor-is-it-too-late&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#i-want-to-be-a-mentor-is-it-too-late&quot;&gt;&lt;/a&gt;I want to be a mentor. Is it too late?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s not!
We are looking for more project ideas and for Jenkins contributors/users
who are passionate about Jenkins and want to mentor students.
No hardcore experience required, mentors can study the project internals together with students and technical advisors.
We are especially interested in ideas beyond the Java stack, and in ideas focusing new technologies and areas
(e.g. Kubernetes, IoT, Python, Go, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can either propose a new project idea or join an existing one.
See the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/26/gsoc-2019-call-for-mentors/&quot;&gt;Call for Mentors post&lt;/a&gt;
and &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/mentors&quot;&gt;Information for mentors&lt;/a&gt; for details.
If you want to propose a new project,
please do so by March 11th so that students have time to explore them and to prepare their proposals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year mentorship does &lt;strong&gt;NOT&lt;/strong&gt; require strong expertise in Jenkins development.
The objective is to guide students and to get involved into the Jenkins community.
GSoC org admins will help to find advisers if special expertise is required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#important-dates&quot;&gt;&lt;/a&gt;Important dates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mar 11 - deadline for new GSoC project idea proposals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apr 09 - deadline for student applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;May 06 - accepted projects announced, teams start community bonding and coding&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aug 26 - coding period ends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sep 03 - Results announced&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://summerofcode.withgoogle.com/how-it-works/#timeline&quot;&gt;GSoC Timeline&lt;/a&gt; for more info.
In the Jenkins project we will also organize special events during and after GSoC (e.g. at Jenkins world).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/01/devops-world-jenkins-world-cfp-open/</id>
<title>DevOps World - Jenkins World 2019: Call for Papers is Open</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-03-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/03/01/devops-world-jenkins-world-cfp-open/" />
<author>
<name>svanalstine</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Skylar VanAlstine, who helps with
the Jenkins Area Meetup program and assists with
Marketing &amp; Community Programs at CloudBees, Inc.









The DevOps World | Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Speakers.
Those who attended DevOps World | Jenkins World 2018 know that DevOps World | Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.




Jenkins World USA | San Francisco | August 12 - 15, 2019


Jenkins World Europe | Lisbon | December 2...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/svanalstine&quot;&gt;Skylar VanAlstine&lt;/a&gt;, who helps with
the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/jam&quot;&gt;Jenkins Area Meetup&lt;/a&gt; program and assists with
Marketing &amp;amp; Community Programs at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/JW2019.png&quot; alt=&quot;Jenkins World 2019&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The DevOps World | Jenkins World shuttle is ready for lift off once again. As usual, the sign of festivities looming begins with the Call for Speakers.
Those who attended DevOps World | Jenkins World 2018 know that DevOps World | Jenkins World 2019 is coming back to San Francisco, and adding a stop in  Europe - Lisbon, Portugal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;&lt;strong&gt;Jenkins World USA&lt;/strong&gt;&lt;/a&gt; | San Francisco | August 12 - 15, 2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/devops-world/lisbon&quot;&gt;Jenkins World Europe&lt;/a&gt; | Lisbon | December 2 - 5, 2019*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To encourage open collaboration and stimulate discussions that will help advance Jenkins adoption and drive it forward, we invite Jenkins users, developers and industry experts to submit a speaking proposal to DevOps World | Jenkins World San Francisco and or Lisbon.
Submissions for both locations are being accepted now.
The submission deadline for San Francisco, CA has been extended through March 24, 2019, @ 11:59 PM Pacific and the submission deadline for Lisbon, Portugal is June 9, 2019, @ 11:59 PM Pacific.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The below Q&amp;amp;A will help you breeze through the submission process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;where-do-i-go-to-submit-my-proposal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-do-i-go-to-submit-my-proposal&quot;&gt;&lt;/a&gt;Where do I go to submit my proposal?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Submissions for both DevOps World | Jenkins World USA and Europe are accepted at:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;Jenkins World USA&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;Jenkins World Europe&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;can-i-make-proposals-to-both-conferences&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#can-i-make-proposals-to-both-conferences&quot;&gt;&lt;/a&gt;Can I make proposal(s) to both conferences?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, you can! Once you’ve created an account on the &lt;a href=&quot;https://www.cvent.com/c/abstracts/6eb10034-9500-43a1-97cd-ab4d9230d7f9&quot;&gt;CFP&lt;/a&gt; website you will be given the option to make submission(s) to one conference or both conferences.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;when-is-the-deadline-for-devops-world-jenkins-world-usa&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#when-is-the-deadline-for-devops-world-jenkins-world-usa&quot;&gt;&lt;/a&gt;When is the deadline for DevOps World | Jenkins World USA?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Saturday March 24, 2019 @ 11:59PM Pacific&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;when-is-the-deadline-for-devops-world-jenkins-world-europe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#when-is-the-deadline-for-devops-world-jenkins-world-europe&quot;&gt;&lt;/a&gt;When is the deadline for DevOps World | Jenkins World Europe?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tuesday, June 9, 2019, @ 11:59 PM Pacific&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-important-dates&quot;&gt;&lt;/a&gt;San Francisco Important Dates:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;January 9, 2019:&lt;/strong&gt; Call for papers opens&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;March 24, 2019:&lt;/strong&gt; Call for papers closes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;April 12, 2019:&lt;/strong&gt; Submission decisions sent&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;May 1, 2019:&lt;/strong&gt; Agenda published - San Francisco, CA&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;May 6, 2019:&lt;/strong&gt; Speaker tasklist is sent out&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;August 12-15, 2019:&lt;/strong&gt; DevOps World | Jenkins World 2019 San Francisco&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*Due to the deadline extensions for DevOps World | Jenkins World 2019 San Francisco any talks submitted after March 10th will be subject to the important dates below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;January 9, 2019:&lt;/strong&gt; Call for papers opens&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;March 24, 2019:&lt;/strong&gt; Call for papers closes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Week of April 1, 2019:&lt;/strong&gt; Submission decisions sent&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Week of April 29, 2019:&lt;/strong&gt; Agenda published - San Francisco, CA&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;May 6, 2019:&lt;/strong&gt; Speaker tasklist is sent out&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;August 12-15, 2019:&lt;/strong&gt; DevOps World | Jenkins World 2019 San Francisco&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lisbon-important-dates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lisbon-important-dates&quot;&gt;&lt;/a&gt;Lisbon Important Dates:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;January 9, 2019:&lt;/strong&gt; Call for papers opens&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;June 9, 2019:&lt;/strong&gt; Call for papers closes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;July 19, 2019:&lt;/strong&gt; Submission decisions sent&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;August 19, 2019:&lt;/strong&gt; Agenda published&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;August 23, 2019:&lt;/strong&gt; Speaker tasklist is sent out&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;December 2-5, 2019:&lt;/strong&gt; DevOps World | Jenkins World 2019 Lisbon, Portugal&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;*All Dates Are Subject To Change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward to receiving your inspiring stories!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/28/serverless-jenkins/</id>
<title>Run your Jenkins pipeline without operating a Jenkins instance</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-28T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/28/serverless-jenkins/" />
<author>
<name>fwilhe</name>
</author>
<category term="jenkins"></category>
<category term="serverless"></category>
<summary>
My job is to work on a Jenkins pipeline specific to SAP S/4HANA extensions running on SAP Cloud Platform.
See the original blog post here.





Jenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.


With regards to operations, we minimized the need for care with the cx-server life-cycle management greatly.
Still, you need to run that Jenkins server.
This means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.
User administration and backups are also required in a productive setup.


Is this really required,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
My job is to work on a &lt;a href=&quot;https://github.com/sap/cloud-s4-sdk-pipeline&quot;&gt;Jenkins pipeline&lt;/a&gt; specific to SAP S/4HANA extensions running on SAP Cloud Platform.
See the &lt;a href=&quot;https://blogs.sap.com/2019/02/11/deep-dive-experimental-serverless-cicd-with-sap-s4hana-cloud-sdk-continuous-delivery-toolkit/&quot;&gt;original blog post here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins is a powerful tool for automation, and we heavily rely on the codified pipeline syntax introduced in Jenkins 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With regards to operations, we minimized the need for care with the &lt;a href=&quot;https://blogs.sap.com/2017/09/20/continuous-integration-and-delivery/&quot;&gt;cx-server life-cycle management&lt;/a&gt; greatly.
Still, you need to run that Jenkins server.
This means you’ll need to update the server and plugins (simplified by our life-cycle management), and scale as the number of builds grows.
User administration and backups are also required in a productive setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is this really required, or is there an alternative approach?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, I’ll introduce a prototype I did to get rid of that long running pet Jenkins instance.
Rather, we’ll have cattle Jenkins instances, created and destroyed on demand.
“Serverless” Jenkins in the sense that we don’t have to provision the server for Jenkins to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The setup described in this post is highly experimental. I encourage you to try this out in a demo project, but be very cautious until further notice to use this on productive code. In this proof of concept, I’ll use a public GitHub repository and the free open-source offering by TravisCI. This setup is not suitable for commercial software.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pets vs cattle metaphor describes how approaches in managing servers differ.
While you care for pets and treat them when they are unwell, cattle can be easily replaced.
Your traditional Jenkins server is a pet because it is often configured manually, and replacing it is a major effort.
For more background on this metaphor, &lt;a href=&quot;https://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we’re getting into the technical details, let’s discuss why we would want to try this out in the first place.
Running Jenkins on arbitrary CI/CD services, such as TravisCI seems very odd on first sight.
On such services you’ll usually invoke your build tools like Maven or npm in a small script, and that will do your build.
But in the enterprise world, both inside SAP and in the community, Jenkins has a huge market share.
There are many shared libraries for Jenkins, providing pre-made build steps which would be expensive to re-implement for other platforms.
Additionally, SAP S/4HANA Cloud SDK Pipeline is a ready to use pipeline based on Jenkins where you as the developer of an SAP S/4HANA extension application do not need to write and maintain the pipeline yourself.
This means reduced costs and effort for you, while the quality of your application improves, for example due to the many &lt;a href=&quot;https://github.com/SAP/cloud-s4-sdk-pipeline/blob/master/doc/pipeline/cloud-qualities.md&quot;&gt;cloud qualities&lt;/a&gt; which are checked out of the box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-22/green.png&quot; alt=&quot;green&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let me show you an experiment to see if we can get the best of both worlds.
The goal is to get all the quality checks and the continuous delivery that the SAP S/4HANA Cloud SDK Pipeline provides us, without the need for a pet Jenkins server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How do we do that? The Jenkins project has a project called &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile runner&lt;/a&gt;.
It is a command line tool that basically boots up a stripped-down Jenkins instance, creates and runs a single job, and throws away that instance once the job is done. As you might guess, there is some overhead in that process.
This will add about 20 seconds to each build, which I found to be surprisingly fast, considering the usual startup time of a Jenkins server.
For convenient consumption, we have packaged &lt;a href=&quot;https://hub.docker.com/r/ppiper/jenkinsfile-runner&quot;&gt;Jenkinsfile runner as a Docker image&lt;/a&gt; which includes the Jenkins plugins that are required for SAP S/4HANA Cloud SDK Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also utilize the quite new &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Configuration as Code plugin for Jenkins&lt;/a&gt;, which allows to codify the Jenkins configuration as YAML files.
As you will see in a minute, both Jenkinsfile runner and Configuration as Code are a perfect match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to follow along, feel free to use our provided &lt;a href=&quot;https://github.com/sap/cloud-s4-sdk-book&quot;&gt;Address Manager example application&lt;/a&gt;.
You may fork the repository, or create your own repository and activate it on TravisCI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the existing Address Manager, let’s add a small &lt;code&gt;.travis.yml&lt;/code&gt; file to instruct the build:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;language: minimal
services:
- docker
script: docker run -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/workspace -v /tmp -e CASC_JENKINS_CONFIG=/workspace/jenkins.yml -e CF_PW -e ERP_PW -e BRANCH_NAME=$TRAVIS_BRANCH ppiper/jenkinsfile-runner&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The script line has quite a few things going on, let’s see what is there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We run a Docker container based on the &lt;code&gt;ppiper/jenkinsfile-runner&lt;/code&gt; image.
We need to mount the Docker socket, so that our container can spawn sibling containers for tooling such as Maven or the CloudFoundry CLI.
We also need to mount the current directory (root of our project) to &lt;code&gt;/workspace&lt;/code&gt;, and tell the Jenkins Configuration as Code Plugin where to find the configuration file.
We’ll come to that file in a minute. Also be sure to pass your secret variables here.
Travis will mask them, so they are not in plain text in your build log.
Take note to change the names of the variables according to your requirements.
You might wonder that we need a &lt;code&gt;BRANCH_NAME&lt;/code&gt; environment variable.
This is required for the Pipeline to check if you’re working on the “productive branch”, where a productive deployment to SAP Cloud Platform is supposed to happen.
If you omit passing this variable, the pipeline will still run but never in the productive mode, and hence not deploy to SAP Cloud Platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might need some secrets in the build, for example in integration tests or for deployment to SAP Cloud Platform.
You can make use of the &lt;a href=&quot;https://github.com/travis-ci/travis.rb#readme&quot;&gt;travis command line tool&lt;/a&gt; to encrypt them on your local machine as &lt;a href=&quot;https://docs.travis-ci.com/user/encryption-keys/&quot;&gt;documented here&lt;/a&gt;.
Take care that this might add your secret in plain text to the shell history on your machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;travis encrypt CF_PW=supersecret --add
travis encrypt ERP_PW=alsosupersecret --add&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This command will add a line to your &lt;code&gt;.travis.yml&lt;/code&gt; file with the encrypted secret value.
Be sure to commit this change.
Also take note of the name of your variable, which must match the environment parameter, and your Jenkins configuration.
You should be aware of &lt;a href=&quot;https://docs.travis-ci.com/user/best-practices-security/&quot;&gt;this TravisCI document on secrets&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll also need to add a &lt;code&gt;jenkins.yml&lt;/code&gt; file to our project.
Here we need to configure two shared libraries which are required for the SAP S/4HANA Cloud SDK Pipeline, and the credentials that are required for our pipeline.
Be sure not to put your secrets in plain text in here, but use the variables you used before via the travis cli tool.
TravisCI will decrypt the password on the fly for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;jenkins:
  numExecutors: 10
unclassified:
  globallibraries:
    libraries:
    - defaultVersion: &quot;master&quot;
      name: &quot;s4sdk-pipeline-library&quot;
      retriever:
        modernSCM:
          scm:
            git:
              remote: &quot;https://github.com/SAP/cloud-s4-sdk-pipeline-lib.git&quot;
    - defaultVersion: &quot;master&quot;
      name: &quot;piper-library-os&quot;
      retriever:
        modernSCM:
          scm:
            git:
              remote: &quot;https://github.com/SAP/jenkins-library.git&quot;
credentials:
  system:
    domainCredentials:
      - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: &quot;MY-ERP&quot;
              username: MY_USER
              password: ${ERP_PW}
          - usernamePassword:
              scope: GLOBAL
              id: &quot;cf&quot;
              username: P12344223
              password: ${CF_PW}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might add more configuration to this file &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md#initial-configuration&quot;&gt;as you need it&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit both files to your repo and push.
If the travis build works, you’ll see the build integration on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-22/in-progress.png&quot; alt=&quot;in progress&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On travis, you can follow the progress of your build live, and get the full text log of your Jenkins build.
If all went well, you will be greeted with a green build after a few minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-22/log.png&quot; alt=&quot;log&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Congratulations. You’re running a serverless Jenkins build with all the qualities checked by the SAP S/4HANA Cloud SDK Pipeline, without hosting your own Jenkins instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind this is a proof of concept at this point.
The serverless Jenkins ecosystem is currently evolving, and neither Jenkinsfile runner, nor Configuration as Code are in a mature state as of February 2019.
One downside of this approach is that we lose the Jenkins user interface, so we can’t see our pipeline in blue ocean, and we don’t get the nice build summary.
We can get the whole log output from TravisCI, so this can be mitigated, but this is arguable not the best user experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But on the contrary, we don’t have to care for our pet Jenkins, we don’t need to update plugins or backup the configuration or build logs.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/</id>
<title>Jenkins + Alexa: Say Hello to Voice Controlled CI/CD</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/26/jenkins-alexa-voice-controlled-cicd/" />
<author>
<name>keshawilliams</name>
</author>
<category term="jenkins"></category>
<category term="alexa"></category>
<summary>
This is a guest post by Kesha Williams.





Integrating Jenkins with Alexa to launch your pipelines and obtain results
about your deployments through voice is easier than you think.  Learn how Alexa
Champion, Kesha Williams', latest side project teaches Alexa to deploy code to
the cloud.







Alexa (named after the ancient library of Alexandria) is Amazon&#8217;s Artificial
Intelligence (AI) powered intelligent voice assistant that runs in the cloud.
Software engineers make Alexa smarter by creating apps, called skills.  From
the time that I developed my first Alexa skill, I dreamed of deploying my Java
projects to the cloud via voice.  For me, telling Alexa to deploy...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;http://www.kesha.tech/&quot;&gt;Kesha Williams&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Integrating Jenkins with Alexa to launch your pipelines and obtain results
about your deployments through voice is easier than you think.  Learn how Alexa
Champion, Kesha Williams', latest side project teaches Alexa to deploy code to
the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/jenkins_alexa_header.png&quot; alt=&quot;Jenkins with Amazon Alexa&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alexa (named after the ancient library of Alexandria) is Amazon’s Artificial
Intelligence (AI) powered intelligent voice assistant that runs in the cloud.
Software engineers make Alexa smarter by creating apps, called skills.  From
the time that I developed my first Alexa skill, I dreamed of deploying my Java
projects to the cloud via voice.  For me, telling Alexa to deploy my code is
the ultimate level of cool!  I recently made my dream a reality when I devoted
a weekend to developing my newest Alexa skill, DevOps Pal.  In this blog, I
will show you how I developed DevOps Pal and hopefully inspire you to build
your own version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/NsFbSJMrVQA?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-choose-voice-to-deploy-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-choose-voice-to-deploy-code&quot;&gt;&lt;/a&gt;Why Choose Voice to Deploy Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voice-first technology is revolutionizing how we interact with technology because the interaction is simple, frictionless, and time-saving.
For me, voice is an easier way to control Jenkins and retrieve results about my deployments without having to touch a keyboard.
In this use case, voice is another access point for data and is a way to further automate the process of building, testing, and deploying a Java project to the cloud, improving efficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;continuous-integration-and-continuous-delivery-cicd&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#continuous-integration-and-continuous-delivery-cicd&quot;&gt;&lt;/a&gt;Continuous Integration and Continuous Delivery (CI/CD)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re working with DevOps, you understand the need for Continuous Integration and Continuous Delivery (CI/CD) to automate the software delivery pipeline in a reproducible way.
CI/CD is the practice of continuously building, testing, and deploying code once it’s committed to version control.
DevOps and CI/CD provides software engineering teams with confidence in the code being pushed to production and shorter development lifecycles, which in the end produces happier users, clients, and customers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;devops-pal-overview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devops-pal-overview&quot;&gt;&lt;/a&gt;DevOps Pal Overview&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DevOps Pal is a private Alexa for Business skill that is used to kick off a Jenkins pipeline job.
Alexa for Business was the perfect way for me to distribute DevOps Pal since I have the ability to enable the skill on an organization-by-organization basis, which gives me complete control over who has access.
Once DevOps Pal invokes the job, the pipeline status displays in real-time via the Blue Ocean Pipeline Run Details View Page.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;devops-pal-architecture&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#devops-pal-architecture&quot;&gt;&lt;/a&gt;DevOps Pal Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I used several components and tools to create DevOps Pal. Let’s review the architecture in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/devops_pal_architecture.png&quot; alt=&quot;DevOps Pal Skill Architecture&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The flow begins by saying, &quot;Alexa, open DevOps Pal and deploy my code&quot;, to the Echo device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Echo device listens for the wake word (e.g. Alexa, Echo, Computer, or Amazon), which employs deep learning technology running on the device to recognize the wake word the user has chosen.
Once the wake word is detected, what I say is recorded and sent to the Alexa Voice Service (AVS), which uses speech to text and natural language understanding (NLU) to identify my intent.
My intent is sent to DevOps Pal; the skill acts accordingly by kicking off the Jenkins job and sending a response back using text-to-speech synthesis (TTS), which makes the response natural sounding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s explore each component in more detail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alexa Voice Service (AVS) - I often refer to the Alexa Voice Service as the &quot;Alexa brain that runs in the cloud&quot;. The AVS is a suite of services built around a voice-controlled AI assistant. The AVS is flexible enough to allow third parties to add intelligent voice control to any connected product that has a microphone and speaker, so Alexa is not limited to just Echo devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Skills Kit (ASK) - ASK is the &quot;SDK&quot; (Software Development Kit) that allows developers to build custom skills for Alexa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Developer Portal - An Alexa skill includes a voice user interface, or VUI, to understand user intents, and a back-end cloud service to process intents by telling Alexa how to respond. The VUI and the integration with the back-end service is setup and configured through the Alexa Developer Portal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Lambda - A chunk of code that runs in the cloud. Developers can run their code without having to provision or manage servers. Applications created with AWS Lambda are considered to be serverless. Lambda supports several popular languages like Python, Java, Node.js, Go, C#, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub - A version control system for the Java project source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins on EC2 - I use Jenkins to build, test, and deploy my Java Application Programming Interface (API). Elastic Cloud Computer (EC2) is the virtual server where Jenkins is installed. Jenkins works alongside several other tools:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Maven - A build automation tool for Java projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Junit - A testing framework for Java projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Command Line Interface (CLI) - This is a command line tool that allows developers to access their Amazon Web Services (AWS) account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Ocean - This is a plugin for Jenkins that provides an easy to use interface to create and monitor Jenkins pipelines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS Elastic Beanstalk - This is an orchestration service that allows developers to deploy and manage web applications in the AWS cloud.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Postman - This is an HTTP client for testing APIs and web services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;voice-interaction-model&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#voice-interaction-model&quot;&gt;&lt;/a&gt;Voice Interaction Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Voice User Interface (VUI) describes the overall conversational flow and is setup via the Alexa Developer Console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/alexa_dev_console.png&quot; alt=&quot;Invocation Name Setup Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few important components of the VUI are the Invocation Name (how users launch your skill) and the Intents (phrases a user says to &quot;talk to&quot; or interact with your skill).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/alexa_dev_console_deploy.png&quot; alt=&quot;Utterances for DeployCodeIntent Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, the &quot;DeployCodeIntent&quot; is invoked when a user says one of several phrases (e.g. run jenkins pipeline, run jenkins job, deploy the code, deploy code, or deploy ) or a variation of the phrase like, &quot;deploy my code&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/alexa_dev_console_endpoint.png&quot; alt=&quot;Backend Fulfillment Logic - Endpoint Via Alexa Developer Console&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The endpoint is the destination where the skill requests are sent for fulfillment.
In this case, the backend logic is an AWS Lambda authored in Python.
The business logic in the Python Lambda uses the Jenkins remote access API to trigger the job remotely.
The format of the URL to trigger the job is &lt;code&gt;jenkins_url/job/job_name/build&lt;/code&gt;.
The API call uses BASIC authentication and a Jenkins Crumb passed in the HTTP request header for CSRF protection.
Alternatively, since Jenkins 2.96, you can use an API token instead of a Jenkins Crumb and password to authenticate your API call.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-job&quot;&gt;&lt;/a&gt;Jenkins Job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/jenkins_classic_alexa.png&quot; alt=&quot;Jenkins Classic UI&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins job, 'alexa-cicd', is the job invoked from DevOps Pal.
Although, the Jenkins Classic User Interface (UI) is functional, I prefer the Blue Ocean interface because it rethinks the user experience of Jenkins by making it visually intuitive.
Blue Ocean is easily enabled via a &lt;a href=&quot;https://plugins.jenkins.io/blueocean&quot;&gt;plugin&lt;/a&gt; and leaves the option to continue using the Jenkins Classic UI should you so choose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-26-alexa/jenkins_blueocean_alexa.png&quot; alt=&quot;Jenkins Blue Ocean Pipeline Run Details View Page&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After Alexa kicks off the 'alexa-cicd' job, I navigate to the Pipeline Run Details View Page, which allows me to watch the job status in realtime.
This job has four stages: Initialize, Build, Test, and Deploy.
The final stage, Deploy, uses the AWS Command Line Interface (CLI) on the Jenkins server to copy the artifact to Amazon Simple Storage Service (S3) and create a new Elastic Beanstalk application version based on the artifact located on S3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cool-features-to-add&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cool-features-to-add&quot;&gt;&lt;/a&gt;Cool Features to Add&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability to deploy code with voice is just the beginning.
There are several cool features that can easily be added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DevOps Pal can be updated to prompt the user for the specific Jenkins pipeline job name. This adds a level of flexibility that will really empower DevOps teams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alexa Notifications can be integrated with DevOps Pal to send a notification to the Echo device when the Jenkins job is finished or when it fails. If the job fails, more information about where the job failed and exactly why will be provided. This will prove useful for long running jobs or for getting timely updates regarding the job status.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevOps Pal can be updated to answer direct questions about the real-time status of a specific job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-learn-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-learn-more&quot;&gt;&lt;/a&gt;Want to Learn More&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope you’ve enjoyed learning more about the architecture of DevOps Pal and deploying code to the cloud using Jenkins and voice.
For more detailed steps, I’ve collaborated with Cloud Academy to author a course, &lt;a href=&quot;https://cloudacademy.com/aws-alexa-for-ci-cd-new-course&quot;&gt;AWS Alexa for CI/CD&lt;/a&gt; on the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/21/credentials-masking/</id>
<title>Limitations of Credentials Masking</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/21/credentials-masking/" />
<author>
<name>daniel-beck</name>
</author>
<category term="security"></category>
<summary>
In the Jenkins project, we ask that people report security issues to our private issue tracker.
This allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.


As a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.
This post is intended to address one of those:
The goal and limitations of credentials masking.


The Problem


One very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:

  
    Jenkinsfile (Scripted Pipeline)
   ...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Jenkins project, we ask that people &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/security/#reporting-vulnerabilities&quot;&gt;report security issues to our private issue tracker&lt;/a&gt;.
This allows us to review issues and prepare fixes in private, often resulting in better, safer security fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a side effect of that, we also learn about common misconceptions and usability problems related to security in Jenkins.
This post is intended to address one of those:
The goal and limitations of credentials masking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One very common example of that is the role of credentials masking in Jenkins, typically involving a pipeline snippet that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./deploy.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// requires PWD and USR to be set&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Credentials that are in scope are made available to the pipeline without limitation.
To prevent accidental exposure in the build log, credentials are masked from regular output, so an invocation of &lt;code&gt;env&lt;/code&gt; (Linux) or &lt;code&gt;set&lt;/code&gt; (Windows), or programs printing their environment or parameters would not reveal them in the build log to users who would not otherwise have access to the credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The misconception here is that Jenkins will prevent other, perhaps deliberate ways to reveal the password.
Some examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo $PWD | base64&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// will print e.g. dDBwczNjcjN0Cg= which is trivially converted back to the top secret password&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: true&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;topSecretCredentials&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PWD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;USR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)])
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo $PWD &amp;gt; myfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  archiveArtifacts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;// then browse archived artifacts from the Jenkins UI&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both of these snippets circumvent credentials masking in the build log, and show that people with control over the build script can use credentials in ways not necessarily intended or approved by admins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously these are just the most straightforward examples illustrating the problem.
Others could involve the proc file system, sending it to an HTTP server in response to a 401 authentication challenge, embedding it in the (otherwise legitimate) build result, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It would be great if Jenkins could allow the flexible use of credentials with no risk of exposing them through straightforward build script modifications, but realistically, it is impossible for Jenkins to police use of the credential by a build script without the support of a very specific environment setup (e.g. restrictive network configuration).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should also be noted that credentials aren’t just at risk from users able to control the pipeline, typically by editing the &lt;code&gt;Jenkinsfile&lt;/code&gt;.
Actual build scripts invoked by pipelines, either shell scripts as in the example above, or more standard build tools such as Maven (controlled by &lt;code&gt;pom.xml&lt;/code&gt;) are just as much of a risk if they are run inside a &lt;code&gt;withCredentials&lt;/code&gt; block, or executing on the same agent as another block that passed such credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disclosure of secrets can also happen inadvertently:
Jenkins will prevent &lt;em&gt;exact&lt;/em&gt; matches of the password or other secret to appear in the log file.
Consider that the secret may contain shell metacharacters that &lt;code&gt;bash +x&lt;/code&gt; would escape by adding a &lt;code&gt;\&lt;/code&gt; before those characters.
The sequence of characters to be printed is no longer identical to the secret, so would not be masked.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-solution&quot;&gt;&lt;/a&gt;The Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Credentials can be defined in different scopes:
Credentials defined on the root &lt;em&gt;Jenkins&lt;/em&gt; store (the default) will be available to all jobs on the instance.
The only exception are credentials with &lt;em&gt;System&lt;/em&gt; scope, intended for the global configuration only, for example, to connect to agents.
Credentials defined in a folder are only available within that folder (transitively, i.e. also in folders inside this folder).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows defining sensitive credentials, such as deployment credentials, on specific folders whose contents only users trusted with those credentials are allowed to configure:
Directly in Jenkins using &lt;a href=&quot;https://plugins.jenkins.io/matrix-auth&quot;&gt;Matrix Authorization Plugin&lt;/a&gt; and by limiting write access to repositories defining pipelines as code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipelines inside this folder can use the (e.g. deployment) credentials without limitation, while they’re inaccessible to pipelines outside the folder.
Those would need to use the &lt;a href=&quot;https://plugins.jenkins.io/pipeline-build-step&quot;&gt;&lt;code&gt;build&lt;/code&gt; step&lt;/a&gt; or similar approaches to invoke the pipelines inside the folder to deploy their output.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;caveats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caveats&quot;&gt;&lt;/a&gt;Caveats&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the previous section outlines a solution to the problem of restricting access to credentials, care needs to be taken so that credentials are not captured anyway.
For example, a deployment pipeline that allows its users to define where to deploy to as a build parameter might still be used to send credentials to a maliciously set up host to capture them.
&lt;a href=&quot;https://jenkins.io/blog/2018/05/15/incremental-deployment/&quot;&gt;A blog post explaining the design of some Jenkins project infrastructure&lt;/a&gt; discusses some of these concerns around trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should also be noted that credential domains are a UI hint only — defining a credential to only be valid for &lt;code&gt;github.com&lt;/code&gt; does not actually prevent its use elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/17/remoting-cli-removed/</id>
<title>Remoting-based CLI removed from Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/17/remoting-cli-removed/" />
<author>
<name>jglick</name>
</author>
<category term="core"></category>
<category term="security"></category>
<category term="remoting"></category>
<summary>
Close to two years ago, we announced in
New, safer CLI in 2.54
that the traditional “Remoting” operation mode of the Jenkins command-line interface
was being deprecated for a variety of reasons, especially its very poor security record.
Today in Jenkins 2.165 support for this mode is finally being removed altogether,
in both the server and bundled jenkins-cli.jar client.
The projected June 5th LTS release will reflect this removal,
at which point the Jenkins project will no longer maintain this feature
nor investigate security vulnerabilities in it.


This change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.
(There are still two transports—HTTP(S) and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Close to two years ago, we announced in
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2017/04/11/new-cli/&quot;&gt;New, safer CLI in 2.54&lt;/a&gt;
that the traditional “Remoting” operation mode of the Jenkins command-line interface
was being deprecated for a variety of reasons, especially its very poor security record.
Today in Jenkins 2.165 support for this mode is finally being removed altogether,
in both the server and bundled &lt;code&gt;jenkins-cli.jar&lt;/code&gt; client.
The projected June 5th LTS release will reflect this removal,
at which point the Jenkins project will no longer maintain this feature
nor investigate security vulnerabilities in it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This change makes the code in Jenkins core related to the CLI considerably simpler and more maintainable.
(There are still two &lt;em&gt;transports&lt;/em&gt;—HTTP(S) and SSH—but they have similar capabilities and behavior.)
It also reduces the “attack surface” the Jenkins security team must consider.
Among other issues, a compromised &lt;em&gt;server&lt;/em&gt; could freely attack a developer’s laptop if &lt;code&gt;-remoting&lt;/code&gt; were used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/upgrade-guide/2.46/&quot;&gt;2.46.x upgrade guide&lt;/a&gt;
already urged administrators to disable Remoting mode on the server.
Those Jenkins users who rely on the CLI for remote scripting (as opposed to the HTTP(S) REST APIs)
would be affected only if they were still using the &lt;code&gt;-remoting&lt;/code&gt; CLI flag,
since the default has long been to use HTTP(S) mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most CLI features have long worked fine without &lt;code&gt;-remoting&lt;/code&gt;,
in some cases using slightly different syntax such as requiring shell redirects to access local files.
As part of this change, some CLI commands, options, and option types in Jenkins core have been removed, other than &lt;code&gt;-remoting&lt;/code&gt; itself:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;logout&lt;/code&gt; commands, and the &lt;code&gt;--username&lt;/code&gt; and &lt;code&gt;--password&lt;/code&gt; options.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;-p&lt;/code&gt; option to select a proxy. (The CLI in default &lt;code&gt;-http&lt;/code&gt; mode accesses Jenkins no differently than any other HTTP client.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;install-tool&lt;/code&gt;, &lt;code&gt;set-build-parameter&lt;/code&gt;, and &lt;code&gt;set-build-result&lt;/code&gt; commands relied on a fundamentally insecure idiom that is no longer supportable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Command options or arguments which took either a local file or &lt;code&gt;=&lt;/code&gt; for standard input/output (e.g., &lt;code&gt;install-plugin&lt;/code&gt;, &lt;code&gt;build -p&lt;/code&gt;, &lt;code&gt;support&lt;/code&gt;) now only accept the latter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some features of relatively little-used plugins will no longer work, such as:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/distfork&quot;&gt;DistFork&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/remote-terminal-access&quot;&gt;Remote Terminal Access&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/build-env-propagator&quot;&gt;Build Env Propagator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/</id>
<title>SSH Steps for Jenkins Pipeline</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-06T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/06/ssh-steps-for-jenkins-pipeline/" />
<author>
<name>nrayapati</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="ssh"></category>
<category term="steps"></category>
<summary>
This guest post was originally published on Cerner&#8217;s Engineering blog
here.





Pipeline-as-code or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.





Source of image: https://jenkins.io/doc/book/pipeline/


Jenkins Pipelines


Jenkins is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.


The Pipeline-as-code&#8217;s script is also known as a Jenkinsfile.


Jenkinsfiles uses a domain specific language syntax based...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This guest post was originally published on Cerner’s Engineering blog
&lt;a href=&quot;https://engineering.cerner.com/blog/ssh-steps-for-jenkins-pipeline/&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Pipeline-as-code&lt;/strong&gt; or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/pipeline/realworld-pipeline-flow.png&quot; alt=&quot;Pipeline Flow&quot; width=&quot;100%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Source of image: &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline/&quot;&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/doc/book/pipeline/&lt;/a&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-pipelines&quot;&gt;&lt;/a&gt;Jenkins Pipelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Pipeline plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline-as-code’s script is also known as a &lt;em&gt;Jenkinsfile&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkinsfiles uses a domain specific language syntax based on the &lt;a href=&quot;http://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; programming language. They are persistent files which can be checked in and version-controlled along with the rest of their project source code. This file can contain the complete set of encoded steps (steps, nodes, and stages) necessary to define the entire application life-cycle, becoming the intersecting point between development and operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;missing-piece-of-the-puzzle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#missing-piece-of-the-puzzle&quot;&gt;&lt;/a&gt;Missing piece of the puzzle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most common steps defined in a basic pipeline job is the &lt;em&gt;Deploy&lt;/em&gt; step. The deployment stage encompasses everything from publishing build artifacts to pushing code into pre-production and production environments. This deployment stage usually involves both development and operations teams logging onto various remote nodes to run commands and/or scripts to deploy code and configuration. While there are a couple of existing ssh plugins for Jenkins, they currently don’t support the functionality such as logging into nodes for pipelines. Thus, there was a need for a plugin that supports these steps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introducing-ssh-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introducing-ssh-steps&quot;&gt;&lt;/a&gt;Introducing SSH Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-06-ssh-steps/JenkinsPlusSSH.png&quot; alt=&quot;SSH Steps&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, our team at Cerner started working on a project to automate deployments through Jenkins pipelines to help facilitate running commands on over one thousand nodes. We looked at several options including existing plugins, internal shared Jenkins libraries, and others. In the end, we felt it was best to create and open source a plugin to fill this gap so that it can be used across Cerner and beyond.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The initial version of this new plugin SSH Steps supports the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshCommand&lt;/code&gt;: Executes the given command on a remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshScript&lt;/code&gt;: Executes the given shell script on a remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshGet&lt;/code&gt;: Gets a file/directory from the remote node to current workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshPut&lt;/code&gt;: Puts a file/directory from the current workspace to remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sshRemove&lt;/code&gt;: Removes a file/directory from the remote node.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;usage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#usage&quot;&gt;&lt;/a&gt;Usage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is a simple demonstration on how to use above steps. More documentation can be found on &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin/blob/master/README.adoc&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remote = [:]
remote.name = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
remote.host = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node.abc.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
remote.allowAnyHosts = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;

node {
    withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;sshUserAcct&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;userName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]) {
        remote.user = userName
        remote.password = password

        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SSH Steps Rocks!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            writeFile &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;text&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ls&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshCommand &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;for i in {1..5}; do echo -n \&quot;Loop \$i \&quot;; date ; sleep 1; done&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshScript &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshPut &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;from&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;into&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            sshGet &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;from&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;into&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test_new.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;override&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
            sshRemove &lt;span style=&quot;color:#606&quot;&gt;remote&lt;/span&gt;: remote, &lt;span style=&quot;color:#606&quot;&gt;path&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configuring-via-yaml&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring-via-yaml&quot;&gt;&lt;/a&gt;Configuring via YAML&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Cerner, we always strive to have simple configuration files for CI/CD pipelines whenever possible. With that in mind, my team built a wrapper on top of these steps from this plugin. After some design and analysis, we came up with the following YAML structure to run commands across various remote groups:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;config&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;credentials_id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;sshUserAcct&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;remote_groups&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;r_group_1&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node01&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node01.abc.net&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node02&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node02.abc.net&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;r_group_2&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: node03&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;host&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;node03.abc.net&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;c_group_1&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;commands:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'ls -lrt'
        - 'whoami'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;scripts:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'test.sh'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;c_group_2&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;gets:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - from: 'test.sh'
          to: 'test_new.sh'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;puts:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - from: 'test.sh'
          to: '.'&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;removes:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - 'test.sh'&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;steps&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;deploy&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;remote_groups:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - r_group_1&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;c_group_1&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;remote_groups:&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        - r_group_2&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command_groups&lt;/span&gt;:
        - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;c_group_2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above example runs commands from &lt;code&gt;c_group_1&lt;/code&gt; on remote nodes within &lt;code&gt;r_group_1&lt;/code&gt; in parallel before it moves on to the next group using &lt;code&gt;sshUserAcct&lt;/code&gt; (from the &lt;a href=&quot;https://jenkins.io/doc/book/using/using-credentials/&quot;&gt;Jenkins Credentials&lt;/a&gt; store) to logon to nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;shared-pipeline-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shared-pipeline-library&quot;&gt;&lt;/a&gt;Shared Pipeline Library&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have created a shared pipeline library that contains a &lt;code&gt;sshDeploy&lt;/code&gt; step to support the above mentioned YAML syntax. Below is the code snippet for the sshDeploy step from the library. The full version can be found &lt;a href=&quot;https://github.com/nrayapati/ssh-deploy-library&quot;&gt;here&lt;/a&gt; on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#34b&quot;&gt;#!/usr/bin/groovy&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; yamlName) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; yaml = readYaml &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: yamlName
    withCredentials([usernamePassword(&lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: yaml.config.credentials_id, &lt;span style=&quot;color:#606&quot;&gt;passwordVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;usernameVariable&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;userName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)]) {
        yaml.steps.each { stageName, step -&amp;gt;
            step.each {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remoteGroups = [:]
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; allRemotes = &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;
                &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;.remote_groups.each {
                    remoteGroups[&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;] = yaml.remotes.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                }

                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; commandGroups = [:]
                &lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;.command_groups.each {
                    commandGroups[&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;] = yaml.commands.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#950&quot;&gt;it&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                }
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; isSudo = &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;
                remoteGroups.each { remoteGroupName, remotes -&amp;gt;
                    allRemotes += remotes.collect { remote -&amp;gt;
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(!remote.name)
                            remote.name = remote.host
                        remote.user = userName
                        remote.password = password
                        remote.allowAnyHosts = &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
                        remote.groupName = remoteGroupName
                        remote
                    }
                }
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(allRemotes) {
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;(allRemotes.size() &amp;gt; &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;) {
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; stepsForParallel = allRemotes.collectEntries { remote -&amp;gt;
                            [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;remote.groupName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;remote.name&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : transformIntoStep(stageName, remote.groupName, remote, commandGroups)]
                        }
                        stage(stageName) {
                            parallel stepsForParallel
                        }
                    } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; remote = allRemotes.first()
                        stage(stageName + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + remote.groupName + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + remote.name) {
                            transformIntoStep(stageName, remote.groupName, remote, commandGroups).call()
                        }
                    }
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By using the step (as described in the snippet above) from this shared pipeline library, a Jenkinsfile can be reduced to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ssh_deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _

node {
  checkout scm
  sshDeploy(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;dev/deploy.yml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example execution of the above pipeline code in Blue Ocean looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-06-ssh-steps/jenkins-ssh-deploy.png&quot; alt=&quot;SSH Deploy BlueOcean View&quot; width=&quot;80%&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrapping-up&quot;&gt;&lt;/a&gt;Wrapping up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Steps from the &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin&quot;&gt;SSH Steps Plugin&lt;/a&gt; are deliberately generic enough that they can be used for various other use-cases as well, not just for deploying code. Using SSH Steps has significantly reduced the time we spend on deployments and has given us the possibility of easily scaling our deployment workflows to various environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Help us make this &lt;a href=&quot;https://github.com/jenkinsci/ssh-steps-plugin&quot;&gt;plugin&lt;/a&gt; better by contributing. Whether it is adding or suggesting a new feature, bug fixes, or simply improving documentation, contributions are always welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/05/jenkins-new-year-in-china/</id>
<title>Jenkins new year in China</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/05/jenkins-new-year-in-china/" />
<author>
<name>linuxsuren</name>
</author>
<category term="core"></category>
<category term="community"></category>
<category term="chinese"></category>
<summary>
At the time of the Spring Festival. I want to make a summary of some activities in the last year.
You might already notice that more and more Chinese contributors emerge in the Jenkins community.
We have a GSoC champion who is Shenyu Zheng.
He is a great example for other students. With the effort of three skilled engineers,
many Jenkins users could learn the edge technologies and useful use cases.
They co-organized several Jenkins Meetups in a couple of cities in China.


There are two workshops about Jenkins and Jenkins X in the DevOps International Summit. James Rawlings gave us a wonderful view of the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of the Spring Festival. I want to make a summary of some activities in the last year.
You might already notice that more and more Chinese contributors emerge in the Jenkins community.
We have a GSoC champion who is &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Shenyu Zheng&lt;/a&gt;.
He is a great example for other students. With the effort of three skilled engineers,
many Jenkins users could learn the edge technologies and useful use cases.
They co-organized several Jenkins Meetups in a couple of cities in China.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two workshops about Jenkins and Jenkins X in the DevOps International Summit. &lt;a href=&quot;https://github.com/rawlingsj&quot;&gt;James Rawlings&lt;/a&gt; gave us a wonderful view of the Jenkins X. Many people start to know this project. The &lt;a href=&quot;https://jenkins-x.io/zh/&quot;&gt;Chinese website of jx&lt;/a&gt; would be helpful to those people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On November 3rd, 2018 the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/&quot;&gt;Jenkins User Conference China(JUCC)&lt;/a&gt; was hosted in Shenzhen. More than 200 attendees gathered at JUCC to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was a Jenkins workshop to teach users to develop a plugin in October. It was during the Hacktoberfest 2018. So some people got a beautiful T-shirt at this meetup. We’ll keep this event in 2019. I hope more users and developers could join us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you all folks. And other friendly contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/logos/kongfu/256.png&quot; alt=&quot;Chinese KongFu&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chinese is our main communication language. A large number of the Jenkins users are not a proficient English speaker.
So letting most of Chinese Jenkins users could easily use Jenkins as their CI/CD platform is the final mission of &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt;.
You can find three participants on the page. But that’s not the &lt;a href=&quot;https://github.com/jenkins-infra/cn.jenkins.io/graphs/contributors&quot;&gt;full list&lt;/a&gt;.
More exciting thing is that &lt;a href=&quot;https://github.com/alauda&quot;&gt;Alauda&lt;/a&gt; giving a big support which as a startup company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WeChat is the greatest social media channel in China. WeChat has one billion users.
Almost everyone in China has a WeChat account. It must be a perfect place to publish articles and events.
There are over 1k people subscribed the &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg2MzAwNzU3Nw==&amp;amp;mid=2247483664&amp;amp;idx=1&amp;amp;sn=fa3fb0171d999d345105ce17f8175be7&quot;&gt;Jenkins official WeChat Subscription Account&lt;/a&gt; in the last three months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the new year, I’m looking forward to growing up with you all!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/01/windows-installers/</id>
<title>Windows Installer Updates</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-02-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/02/01/windows-installers/" />
<author>
<name>slide_o_mix</name>
</author>
<category term="windows"></category>
<category term="platform-sig"></category>
<category term="installers"></category>
<summary>
The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins Master on Windows as a service.
Since it&#8217;s initial development, it has not received a lot of updates or features, but that is about to change.


First, let&#8217;s take a look at the current installer experience.


Step 1




This is the default look and feel for a Windows Installer using the WiX Toolset, not very pretty and doesn&#8217;t give
much branding information as to what the installer is for.



Step 2




Again, not much branding information.



Step 3




The installer in general does not give many options for installing...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Windows Installer for Jenkins has been around for many years as a way for users to install a Jenkins Master on Windows as a service.
Since it’s initial development, it has not received a lot of updates or features, but that is about to change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let’s take a look at the current installer experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/old_installer_1.png&quot; alt=&quot;Installer Startup&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the default look and feel for a Windows Installer using the &lt;a href=&quot;https://wixtoolset.org&quot;&gt;WiX Toolset&lt;/a&gt;, not very pretty and doesn’t give
much branding information as to what the installer is for.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/old_installer_2.png&quot; alt=&quot;Installation Directory&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, not much branding information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/old_installer_3.png&quot; alt=&quot;Install It&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer in general does not give many options for installing Jenkins, other than selecting the installation location.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issues&quot;&gt;&lt;/a&gt;Issues&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current installer has a few issues that the Platform SIG wanted to fix in a new install experience for users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The installer only supports 32-bit installations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user could not select ports or user accounts to run the service on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer bundled a 32-bit version of the Java runtime instead of using a pre-existing JRE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer did not support the experimental support in Jenkins for Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JENKINS_HOME directory was not placed in a good spot for modern Windows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no branding in the installer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;road-forward&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#road-forward&quot;&gt;&lt;/a&gt;Road Forward&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the experimental Jenkins Windows Installer, most of these issues have been resolved!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The installer will only support 64-bit systems going forward. This is the vast majority of Windows systems these days,
so this will help more users install Jenkins using the installer package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user is now able to enter user information for the service and select the port that Jenkins will use and verify that the port is available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer no longer bundles a JRE, but will search for a compatible JRE on the system. If the user wants to use a different JRE, they can specify during install.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer has support for running with a Java 11 JRE, including the components listed on the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/14/java11-preview-availability/&quot;&gt;Java 11 Preview Page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the JENKINS_HOME directory is placed in the LocalAppData directory for the user that the service will run as, this aligns with modern Windows file system layouts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installer has been updated with branding to make it look nicer and provide a better user experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#screenshots&quot;&gt;&lt;/a&gt;Screenshots&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below are screenshots of the new installer sequence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-1-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-1-2&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_1.png&quot; alt=&quot;Installer Startup&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins logo is now a prominent part of the UI for the installer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-2-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-2-2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_2.png&quot; alt=&quot;Installation Directory&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins logo and name are now in the header during all phases of the installer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-3-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-3-2&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_3.png&quot; alt=&quot;Account Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer now allows you to specify the username/password for the account to run as and checks that the account has LogonAsService rights.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-4&quot;&gt;&lt;/a&gt;Step 4&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_4.png&quot; alt=&quot;Port Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The installer also allows you to specify the port that Jenkins should run on and will not continue until a valid port is entered and tested.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-5&quot;&gt;&lt;/a&gt;Step 5&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_5.png&quot; alt=&quot;JRE Selection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of bundling a JRE, the installer now searches for a compatible JRE on the system (JRE 8 is the current search). If you want to use a different
JRE on the system than the one found by the installer, you can browse and specify it. Only JRE 8 and JRE 11 runtimes are supported. The installer will
automatically add the necessary arguments and additional jar files for running under Java 11 if the selected JRE is found to be version 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step-6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-6&quot;&gt;&lt;/a&gt;Step 6&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-02-01-windows-installer/new_installer_6.png&quot; alt=&quot;Install It&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the items that users can enter in the installer should be overridable on the command line for automated deployment as well. The full list of properties that
can be overridden will be available soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#next-steps&quot;&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new installer is under review by the members of the Platform SIG, but we need people to test the installer and give feedback. If you are interested in testing
the new installer, please join the &lt;a href=&quot;https://gitter.im/jenkinsci/platform-sig&quot;&gt;Platform SIG gitter room&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are still some things that are being researched and implemented in the new installer (e.g., keeping port and other selections when doing an upgrade), but it is
getting close to release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to updates to the MSI based Windows installer, the Platform SIG is working on taking over the &lt;a href=&quot;https://chocolatey.org/packages/jenkins&quot;&gt;Chocolatey Jenkins package&lt;/a&gt; and
releasing a version for each update.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/21/fosdem-2019/</id>
<title>FOSDEM 2019!</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-01-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/21/fosdem-2019/" />
<author>
<name>lnewman</name>
</author>
<category term="community"></category>
<category term="events"></category>
<summary>
FOSDEM 2019 (February 2 &amp; 3) is a free event for software developers to meet, share ideas and collaborate.
It is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.
While the Jenkins project won&#8217;t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.







Friday Day - Workshops and Jenkins Office Hours


On Friday, February 1, we&#8217;ll start off with a couple workshops:




Jenkins Pipeline Fundamentals
(9:00 AM – 5:00 PM)
Learn to create and run Declarative Pipelines!
You’ll learn the structure of Declarative Pipeline, how to control the...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/&quot;&gt;FOSDEM 2019&lt;/a&gt; (February 2 &amp;amp; 3) is a free event for software developers to meet, share ideas and collaborate.
It is an annual event that brings open source contributors from around the world for two days of presentations, discussions, and learning.
While the Jenkins project won’t have a table at FOSDEM 2019, we will be well represented before, during, and after the event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-21/fosdem.png&quot; alt=&quot;FOSDEM 2019&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-day-workshops-and-jenkins-office-hours&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-day-workshops-and-jenkins-office-hours&quot;&gt;&lt;/a&gt;Friday Day - Workshops and Jenkins Office Hours&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Friday, February 1, we’ll start off with a couple workshops:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;Jenkins Pipeline Fundamentals&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;(9:00 AM – 5:00 PM)&lt;/strong&gt;&lt;br /&gt;
Learn to create and run Declarative Pipelines!
You’ll learn the structure of Declarative Pipeline, how to control the flow of execution, how to save artifacts of the build, and get practice using some of the features that give fit and finish to your Pipeline.&lt;br /&gt;
Registration required - see the
&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;event page&lt;/a&gt;
for details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eventbrite.com/e/workshop-continuous-deployment-with-jenkins-x-kubernetes-and-friends-tickets-54562126790&quot;&gt;Jenkins X, Kubernetes, and Friends&lt;/a&gt;&lt;br /&gt;
Two sessions: &lt;strong&gt;(9:00 AM – 12:00 PM)&lt;/strong&gt; and &lt;strong&gt;(1:00pm to 4:00pm)&lt;/strong&gt;&lt;br /&gt;
By combining the power of Jenkins, its community and the power of Kubernetes, the Jenkins X project provides a path to the future of continuous delivery for microservices and cloud-native applications.
Come explore some of the features of Jenkins X through this hands-on workshop.&lt;br /&gt;
Registration required - see the
&lt;a href=&quot;https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-54626761113&quot;&gt;event page&lt;/a&gt;
for details&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aside from the workshops, from 9am to 5pm a bunch of people will be working out of Hilton Brussels Grand Place, hanging out as travelers come in.
It’ll be a casual, unstructured day. Sign up on this &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603/&quot;&gt;meetup page&lt;/a&gt; to be notified what meeting room we’re in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-evening-happy-hour&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-evening-happy-hour&quot;&gt;&lt;/a&gt;Friday Evening - Happy Hour&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the office hours and workshops, we’ll have a &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603/&quot;&gt;happy hour&lt;/a&gt; Friday evening before FOSDEM at Cafe Le Roy d’Espagne.
See the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257871603&quot;&gt;meetup page&lt;/a&gt; for details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;presentations-at-fosdem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#presentations-at-fosdem&quot;&gt;&lt;/a&gt;Presentations at FOSDEM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/community_hackers_gotta_eat/&quot;&gt;Hackers gotta eat: Building a Company Around an Open Source Project&lt;/a&gt;
by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/kohsuke_kawaguchi/&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/hpc_lab_from_scratch/&quot;&gt;Setting up an HPC lab from scratch with Mr-Provisioner, Jenkins and Ansible&lt;/a&gt;
by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/renato_golin/&quot;&gt;Renato Golin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://fosdem.org/2019/schedule/event/multicloud_ci_cd_openstack_kubernetes/&quot;&gt;Multicloud CI/CD with OpenStack and Kubernetes&lt;/a&gt; by &lt;a href=&quot;https://fosdem.org/2019/schedule/speaker/maxime_guyot/&quot;&gt;Maxime Guyot&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-hackfest-after-fosdem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-hackfest-after-fosdem&quot;&gt;&lt;/a&gt;Jenkins Hackfest after FOSDEM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, a Jenkins Hackfest will be held the day after FOSDEM 2019 on Monday (February 4).
Those who would like to join us for the hackfest should register for the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/257810396/&quot;&gt;meetup&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meals, snacks, and beverages will be provided for the hackfest.  Come join us, and let’s write some code!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Questions? feel free to contact
&lt;a href=&quot;mailto:alytong13@gmail.com&quot;&gt;Alyssa Tong&lt;/a&gt; or
&lt;a href=&quot;mailto:baptiste@mathus.fr&quot;&gt;Baptiste Mathus&lt;/a&gt; or join us on the
&lt;a href=&quot;https://gitter.im/jenkinsci/advocacy-and-outreach-sig&quot;&gt;advocacy-and-outreach gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/</id>
<title>Jenkins User Conference China - Shenzhen Update</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-01-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/09/jenkins-user-conference-china-shenzhen-update/" />
<author>
<name>ijyun</name>
</author>
<category term="jenkins"></category>
<category term="jenkinsuserconference"></category>
<category term="chinese"></category>
<summary>
On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.
It was the first time to hold JUCC in Shenzhen.
We held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.
More than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.


Below, I am sharing pictures and some of the topics discussed at the event:







Yu Gu from Accenture presented New challenges for DevOps in Cloud Native.







Peng Wang from Meituan which is the biggest group-buying website in China...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On November 3rd, 2018 the Jenkins User Conference China (JUCC) met Jenkins users in Shenzhen which is the most burgeoning city in China.
It was the first time to hold JUCC in Shenzhen.
We held JUCC along with DevOps International Summit, which is the biggest DevOps event in China.
More than 200 attendees gathered at JUCC Shenzhen to share and discuss Jenkins, DevOps, Continuous Delivery, Pipeline, and Agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below, I am sharing pictures and some of the topics discussed at the event:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image1.jpg&quot; alt=&quot;image1&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yu Gu from Accenture presented &lt;strong&gt;New challenges for DevOps in Cloud Native&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image2.jpg&quot; alt=&quot;image2&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peng Wang from Meituan which is the biggest group-buying website in China much like Groupon presented
&lt;strong&gt;The continuous delivery toolchains based on Jenkins for ten thousand times build per day&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image3.jpg&quot; alt=&quot;image3&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guangming Zhou from Ctrip who is a Jenkins expert in China presented &lt;strong&gt;CD system in Ctrip&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image4.jpg&quot; alt=&quot;image4&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jiaqi Guo Jiaqi Guo from Kingston presented &lt;strong&gt;DevOps practices in large manufacturing industry&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image5.jpg&quot; alt=&quot;image5&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yaxing Li from Tencent presented &lt;strong&gt;How to support the CI CD requirements for thousands of products in Tencent based on Jenkins&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image6.jpg&quot; alt=&quot;image6&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mei Xiao from ZTE presented &lt;strong&gt;Fast integration practice for Android&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image7.jpg&quot; alt=&quot;image7&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;John Willis presented &lt;strong&gt;Next Generation Infrastructure which included Kubernetes and  Istio practices&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image8.png&quot; alt=&quot;image8&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;BC Shi from JD.com who is also a Jenkins Ambassador and the co-organizer of JUCC presented &lt;strong&gt;Pipeline 3.0  for DevOps toolchains&lt;/strong&gt;.
He introduced the practices based on Jenkins and Jenkins X to build an end to end pipeline for DevOps from requirement to online service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image9.png&quot; alt=&quot;image9&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve also released a DevOps tool map to recommend an excellent tool to the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image10.jpg&quot; alt=&quot;image10&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, myself, Forest Jing co-organizer of JUCC and also am a Jenkins Ambassador interacted with the attendees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image11.png&quot; alt=&quot;image11&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also organized the Jenkins workshop and Open space for the attendees.
Ruddy Li ,Yunhua Li , Yu Gu and Dingan Liang have worked together to run an open space to lead the attendees to discuss problems they met in DevOps and CD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image12.png&quot; alt=&quot;image12&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Huaqiang Li who is a Certified Jenkins Engineer and CCJE has led the attendees to practice Jenkins functions for a whole afternoon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are more photos from our event, it was a fantastic JUCC in Shenzhen.
There were so much interest and appetite to learn about Jenkins and DevOps.
We are looking forward to doing this again next year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-09-jucc-images/image13.png&quot; alt=&quot;image13&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Slides from the event can be downloaded at &lt;a href=&quot;https://pan.baidu.com/share/init?surl=dE6tlaEZ9t7KhOg6Xn63sw&quot;&gt;PPT Download Address&lt;/a&gt;, password: &lt;code&gt;sepe&lt;/code&gt; (the website is in Chinese).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you to Alyssa and Maxwell’s help to organize this event.
Jenkins User Conference China continues and we hope to see many of you next year in China for our next JUCC.
Let’s be Kung fu Jenkins!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/08/mpl-modular-pipeline-library/</id>
<title>MPL - Modular Pipeline Library</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-01-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/08/mpl-modular-pipeline-library/" />
<author>
<name>sparshev</name>
</author>
<category term="jenkinsfile"></category>
<category term="pipeline"></category>
<category term="sharedlibrary"></category>
<summary>
This is a guest post by Sergei Parshev from Grid Dynamics, originally posted on the
Grid Dynamics Blog.





Despite speeding up development with deployment automation, one of our clients
was experiencing slow time-to-market due to a lack of collaboration in DevOps.
While they had invested in DevOps, every production pipeline was set up
individually, forcing teams to remake the wheel for each project. Making matters
worse, there was no cross-team collaboration, so any bug in the platform was
present in each new pipeline. Many of our clients have similar issues, so we
decided that we should develop a common tool which would both help current
clients, and be adaptable...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Sergei Parshev from &lt;a href=&quot;https://www.griddynamics.com/&quot;&gt;Grid Dynamics&lt;/a&gt;, originally posted on the
&lt;a href=&quot;https://blog.griddynamics.com/developing-a-modular-pipeline-library-to-improve-devops-collaboration/&quot;&gt;Grid Dynamics Blog&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite speeding up development with deployment automation, one of our clients
was experiencing slow time-to-market due to a lack of collaboration in DevOps.
While they had invested in DevOps, every production pipeline was set up
individually, forcing teams to remake the wheel for each project. Making matters
worse, there was no cross-team collaboration, so any bug in the platform was
present in each new pipeline. Many of our clients have similar issues, so we
decided that we should develop a common tool which would both help current
clients, and be adaptable for use in the future. While the most obvious option
was standardizing the CI/CD platform with a common framework, this led to a
monolithic structure, which was inflexible and ultimately unworkable. Since each
team needed to work on their own pipelines, we developed a solution that would
store each reusable part of the DevOps pipeline for later use: a Jenkins-powered
modular pipeline library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;solution-a-modular-pipeline-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#solution-a-modular-pipeline-library&quot;&gt;&lt;/a&gt;Solution: a modular pipeline library&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The modular pipeline library (&lt;a href=&quot;https://github.com/griddynamics/mpl&quot;&gt;MPL&lt;/a&gt;) we
created is a highly-flexible shared library for a Jenkins Pipeline that enables
easy sharing of best practices across the entire company. It has a clear modular
structure, an advanced testing framework, multi-level nesting, a pipeline
configuration system, improved error handling, and many other useful components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will take a look under the hood and explain how our solution works in several
parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Explore the technologies and tools we used to build the MPL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review the MPL, and illustrate why it’s effective&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow a step-by-step guide to operate the MPL on a sample pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dive into some of the more important components of the solution, such as the test framework and nested libraries&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now let’s jump right into an explanation of the crucial features we used to
build our solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;building-the-mpl-with-shared-libraries-and-jenkins-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#building-the-mpl-with-shared-libraries-and-jenkins-pipelines&quot;&gt;&lt;/a&gt;Building the MPL with shared libraries and Jenkins pipelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins, our main automation platform, recently received some updates to
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline/#overview&quot;&gt;Jenkins Pipeline&lt;/a&gt;. These updates allow us to
create one &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/pipeline/tour/hello-world/&quot;&gt;Jenkinsfile&lt;/a&gt; that
describes the entire pipeline, and the steps that need to be executed with a
series of self-explanatory scripts. This increases the visibility of CI/CD
automation processes for end users, and improves supportability by DevOps teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, there’s a large issue with Pipeline: it’s hard to support multiple
Jenkinsfiles (and therefore multiple projects) with unique pipelines. We need to
store the common logic somewhere, which is where
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline/shared-libraries/#extending-with-shared-libraries&quot;&gt;Jenkins Shared Libraries&lt;/a&gt;
come in. They are included in the Jenkinsfile, and allow the use of prepared
interfaces to simplify automation and store common pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While shared libraries allow you to store logic and manipulate Jenkins, they
don’t provide a good way to utilize all the common information. Therefore, the
MPL optimizes the pipeline and shared libraries by allowing users to create
easy-to-follow descriptions for processes, which are then stored for later use
by other teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-mpl-works-to-create-collaborative-devops-processes-across-teams&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-mpl-works-to-create-collaborative-devops-processes-across-teams&quot;&gt;&lt;/a&gt;The MPL works to create collaborative DevOps processes across teams&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the MPL, we are now able to collaborate and share our DevOps practices
across teams, easily adopt existing pipelines for specific projects, and debug
and test features before we actually integrate them into the library. Each team
can create a nested library, add a number of pipelines and modules inside, and
use it with pipeline automation to create great visibility of the processes for
the end user. The MPL can also work on any project to prepare a Jenkinsfile, and
manage it as flexibly as the project team wants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, the MPL provides a simple way to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Separate pipelines and steps by introducing modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Describe steps in the modules with an easy configuration interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test the described modules and share the results with other pipelines and projects&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a lot of other features in the MPL, but it’s essentially a platform to
solve general DevOps collaboration issues. To simplify development and manual
testing, the MPL provides modules overriding and an inheritance model, allowing
users to test specific fixes in the project without affecting anything else. In
Jenkins, a module is a file with scripted steps and logic to reach a simple goal
(build an artifact, run tests, create an image, etc.). These modules are
combined in the pipeline stages, and are easily readable for anyone who knows
the Jenkins Pipeline syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MPL allows users to use the core features of the library (structure,
modules, pipelines) and create nested libraries for specific DevOps team needs.
A DevOps team can prepare complete pipelines with any custom logic and use it
for their projects. They can also override and inherit the core MPL modules in a
number of ways, or prepare custom modules which are easy to share with other
teams. Check out the infographic below to see how modules fit in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig01-layers-of-the-mpl.png&quot; alt=&quot;Fig 1. Layers of the MPL&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also specify certain pipeline required poststeps in a module. For
example, a dynamic deployment module creates the test environment, which needs
to be destroyed when the pipeline ends. To take a closer look at the MPL calling
process, check out the infographic below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig02-the-mpl-process.png&quot; alt=&quot;Fig 2. The MPL process&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This infographic shows how calls are executed in the MPL. First, you need a job
on your Jenkins, which will call a Jenkinsfile (for example, when the source
code is changed), after which the Jenkinsfile will call a pipeline. The pipeline
could be described on the MPL side, in the pipeline script in the job, in the
nested library, or in the project Jenkinsfile. Finally, the stages of the
pipeline will call the modules, and these modules will use features, which could
be groovy logic, pipeline steps, or steps in the shared libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we’ve done an overview of the solution, let’s take a look at a simple
pipeline execution to see how the MPL works in action.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;an-example-of-a-pipeline-execution-in-the-mpl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#an-example-of-a-pipeline-execution-in-the-mpl&quot;&gt;&lt;/a&gt;An example of a pipeline execution in the MPL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let’s say you have a common Java Maven project. You are creating a
Jenkinsfile in the repo, and want to use the default pipeline prepared by your
DevOps team. The MPL already has a simple pipeline: the core &lt;code&gt;MPLPipeline&lt;/code&gt;. It’s
a really simple pipeline, but it’s a good start for anyone who wants to try the
MPL. Let’s look at a simple Jenkinsfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mpl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _
MPLPipeline {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Jenkinsfile contains a single line to load the MPL, and another line to run
the pipeline. Most of the shared libraries implement an interface like this,
calling one step and providing some parameters. &lt;code&gt;MPLPipeline&lt;/code&gt; is merely a custom
Pipeline step, as it lies in the &lt;code&gt;vars&lt;/code&gt; directory, and its structure is very
simple, following these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initialize the MPL&lt;/strong&gt;&lt;br /&gt;
The MPL uses the &lt;code&gt;MPLManager&lt;/code&gt; singleton object to control the pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Merge configuration with default and store it&lt;/strong&gt;&lt;br /&gt;
A default configuration needed to specify stages and predefine some useful configs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define a declarative pipeline with 4 stages and poststeps:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Checkout - Getting the project sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build - Compiling, validation of static, unit tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy - Uploading artifacts to the dynamic environment and running the app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test - Checking integration with other components&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Poststeps - Cleaning dynamic environment, sending notifications, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Running the defined pipeline&lt;/strong&gt;&lt;br /&gt;
This is where the MPL starts to work its magic and actually runs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stages of the main MPL usually have just one step, the &lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/vars/MPLModule.groovy#L29&quot;&gt;&lt;code&gt;MPLModule&lt;/code&gt;&lt;/a&gt;.
This step contains the core functionality of the MPL: executing the modules
which contain the pipeline logic. You can find default modules in the MPL
repository, which are placed in &lt;a href=&quot;https://github.com/griddynamics/mpl/tree/master/resources/com/griddynamics/devops/mpl/modules&quot;&gt;resources/com/griddynamics/devops/mpl/modules&lt;/a&gt;.
Some of the folders include: Checkout, Build, Deploy, and Test, and in each of
them we can find Groovy files with the actual logic for the stages. This
infographic is a good example of a simplified &lt;a href=&quot;https://github.com/griddynamics/mpl/&quot;&gt;MPL repository&lt;/a&gt;
structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig03-a-simplified-mpl-repository-structure.png&quot; alt=&quot;Fig 3. A simplified MPL repository structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the Checkout stage starts, &lt;code&gt;MPLModule&lt;/code&gt; loads the module by name (by default
a stage name), and runs the &lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Checkout/Checkout.groovy&quot;&gt;Checkout/Checkout.groovy&lt;/a&gt;
logic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;( CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git.url&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Git Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Default Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the configuration contains the &lt;code&gt;git.url&lt;/code&gt; option, it will load a &lt;code&gt;Git Checkout&lt;/code&gt;
module; otherwise, it will run the &lt;code&gt;Default Checkout&lt;/code&gt; module. All the called
modules use the same configuration as the parent module, which is why CFG was
passed to the &lt;code&gt;MPLModule&lt;/code&gt; call. In this case, we have no specific configuration,
so it will run the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Checkout/DefaultCheckout.groovy&quot;&gt;Checkout/DefaultCheckout.groovy&lt;/a&gt;
logic. The space in the name is a separator to place the module into a specific
folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;Default Checkout&lt;/code&gt; module, there is just one line with &lt;code&gt;checkout scm&lt;/code&gt;
execution, which clones the repository specified in the Jenkins job. That’s all
the Checkout stage does, as the MPL functionality is excessive for such a small
stage, and we only need to talk about it here to show how the MPL works in
modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same process applies to the Build stage, as the pipeline runs the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/resources/com/griddynamics/devops/mpl/modules/Build/MavenBuild.groovy&quot;&gt;Maven Build&lt;/a&gt;
module:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+MAVEN=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;tool(CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.tool_version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ?: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Maven 3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]) {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; settings = CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.settings_path&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ? &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-s '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;CFG.&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;maven.settings_path&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn -B &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;settings&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This stage is a little bit more complicated, but the action is simple: we take
the tool with the default name &lt;code&gt;Maven 3&lt;/code&gt;, and use it to run &lt;code&gt;mvn clean install&lt;/code&gt;.
The modules are scripted pipelines, so you can do the same steps usually
available in the Jenkins Pipeline. The files don’t need any specific and
complicated syntax, just a plain file with steps and &lt;code&gt;CFG&lt;/code&gt; as a predefined
variable with a stage configuration. The MPL modules inherited the sandbox from
the parent, so your scripts will be safe and survive the Jenkins restart, just
like a plain Jenkins pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Deploy folder, we find the sample structure of the &lt;code&gt;Openshift Deploy&lt;/code&gt;
module. Its main purpose here is to show how to use poststep definitions in the
modules:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;MPLPostStep(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;always&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;OpenShift Deploy Decommission poststep&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Executing Openshift Deploy process&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we define the &lt;code&gt;always&lt;/code&gt; poststep. It is stored in the &lt;code&gt;MPLManager&lt;/code&gt;, and is
called when poststeps are executed. We can call &lt;code&gt;MPLPostStep&lt;/code&gt; with &lt;code&gt;always&lt;/code&gt; as
many times as we want: all the poststeps will be stored and executed in FILO
order. Therefore, we can store poststep logic for actions that need to be done,
and then undone, in the same module, such as the decommission of the dynamic
environment. This ensures that the actions will be executed when the pipeline
is complete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the deploy stage, the pipeline executes the Test stage, but nothing too
interesting happens there. However, there is an aspect of testing which is very
important, and that’s the testing framework of the MPL itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-of-the-mpl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testing-of-the-mpl&quot;&gt;&lt;/a&gt;Testing of the MPL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The testing framework of the MPL is based on the
&lt;a href=&quot;https://github.com/jenkinsci/JenkinsPipelineUnit&quot;&gt;JenkinsPipelineUnit&lt;/a&gt;
from LesFurets, with the one small difference being its ability to test the MPL
modules. Testing the whole pipeline doesn’t work, as pipelines can be really
complicated, and writing tests for such monsters is a Sisyphean task. It is much
easier to test a black box with a small amount of steps, ensuring that this
particular task is working correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the MPL, you can find &lt;code&gt;Build&lt;/code&gt; module testing examples: all the tests are
stored in the
&lt;a href=&quot;https://github.com/griddynamics/mpl/tree/master/test/groovy/com/griddynamics/devops/mpl/modules&quot;&gt;test/groovy/com/griddynamics/devops/mpl/modules&lt;/a&gt;
directory, and you can find the
&lt;a href=&quot;https://github.com/griddynamics/mpl/blob/master/test/groovy/com/griddynamics/devops/mpl/modules/Build/BuildTest.groovy&quot;&gt;Build/BuildTest.groovy&lt;/a&gt;
file with a number of test cases there. Tests are executed during the MPL build
process, allowing users to see traces like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;Loading shared library mpl with version snapshot
  MPLModule.call(Build, {maven={tool_version=Maven 2}})
    Build.run()
      Build.MPLModule(Maven Build, {maven.tool_version=Maven 2})
        MavenBuild.run()
          MavenBuild.tool(Maven 2)
          MavenBuild.withEnv([PATH+MAVEN=Maven 2_HOME/bin], groovy.lang.Closure)
            MavenBuild.sh(mvn -B  -DargLine='-Xmx1024m -XX:MaxPermSize=1024m' clean install)
      Build.fileExists(openshift)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test runs the &lt;code&gt;MPLModule&lt;/code&gt; with custom configuration and mocked steps to
check that, during execution, the tool was changed to &lt;code&gt;Maven 2&lt;/code&gt; according to the
provided configuration. We cover all test cases with such tests, ensuring that
the modules are working as expected, and that the pipeline will work properly.
You can test the whole pipeline if you want, but testing by modules is just an
additional way to simplify the testing process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we’ve looked at how to test the MPL modules, it’s time to look at one
of the key features of the MPL, which is nested libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-benefits-of-nested-libraries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-benefits-of-nested-libraries&quot;&gt;&lt;/a&gt;The benefits of nested libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When working with a large company, supporting one big library makes no sense.
Each department requires multiple configuration options and tuning for a
somewhat standard pipeline, which creates extra work. The MPL solves such
problems by introducing nested libraries. This infographic displays how a nested
library compares to just using the main library:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig04-ways-to-use-the-mpl.png&quot; alt=&quot;Fig 4. Ways to use the MPL&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A nested library is the same as a shared library that imports the MPL and uses
its functionality, modules, and pipelines. Also, it allows the separation of
some team-related logic from the company common logic. Here is the structure of
the MPL with nested libraries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig05-example-of-a-companys-libraries-tree-structure.png&quot; alt=&quot;Fig 5. Example of company’s libraries tree structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can import the MPL in the overridden pipeline, specify the path of some
additional modules, override module logic, and use Jenkins power moves: there
are no limitations. When another team needs your unique module, you can just
create a change request to the basic company MPL repo, and share your functional
module with the others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With nested libraries, it’s possible to debug and modify MPL-provided steps
(&lt;code&gt;MPLModule&lt;/code&gt; for example) and pipelines. This is because nested libraries can
override low-level functionalities of the MPL or the Jenkins Pipeline. There are
no limitations to what you can or can’t change, as these overrides only affect
your own pipeline. This enables experimentation to be done, and then discussed
with other teams to see if it will work in other nested libraries as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also no limits to the number of nesting levels created, but we
recommend using just two (MPL and nested), because additional levels make
configuration and testing of the nested libraries on lower levels very
complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-power-of-module-overriding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-power-of-module-overriding&quot;&gt;&lt;/a&gt;The power of module overriding&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further into the nested libraries or project-side modules, it’s possible to
store a module with the same name as one in the upper-level library. This is a
good way to override the logic - you can just replace Build/Build.groovy with
your own - as the functional module will be executed instead of the upper-level
module. For example, this infographic shows module overriding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig06-mpl-modules-overriding.png&quot; alt=&quot;Fig 6. MPL modules overriding&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even better, one of the strengths of the MPL is that you still can use the
upper-level module! The MPL has mechanisms to prevent loops, so the same module
can’t be executed in the same executing branch again. However, you can easily
call the original module a name from another module to use the upper-level
logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-08-mpl/fig07-petclinic-selenium-example-pipeline-structure.png&quot; alt=&quot;Fig 7. Petclinic-Selenium example pipeline structure&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Petclinic-Selenium example above uses the default &lt;code&gt;MPLPipeline&lt;/code&gt; (you can
find it on the &lt;a href=&quot;https://github.com/griddynamics/mpl/wiki&quot;&gt;MPL Wiki-page&lt;/a&gt;), and
contains project-side modules in a &lt;code&gt;.jenkins&lt;/code&gt; directory. These modules will be
called before the library modules. For example, the &lt;code&gt;Checkout&lt;/code&gt; module is not
placed on the project side, so it will be called from the MPL, but the &lt;code&gt;Build&lt;/code&gt;
module exists in a &lt;code&gt;.jenkins&lt;/code&gt; directory on the project side, and it will be
called:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;MPLPostStep(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;always&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}

MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt;( fileExists(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Dockerfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) ) {
  MPLModule(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Docker Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, CFG)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Build&lt;/code&gt; module from the project registers the poststep,
calls the original &lt;code&gt;Build&lt;/code&gt; module from the MPL, and then calls the additional
&lt;code&gt;Docker Build&lt;/code&gt; module. The following stages of the pipeline are more
complicated, but all module overriding essentially works like this. Some
projects can be tricky, and need some small tunings for the existing modules.
However, you can easily implement those changes on the project level, and think
about how to move the functionality to the nested library or MPL later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion-what-the-mpl-brings-to-devops&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion-what-the-mpl-brings-to-devops&quot;&gt;&lt;/a&gt;Conclusion: what the MPL brings to DevOps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many DevOps teams and companies work with bloated, restrictive, and buggy CI/CD
automation platforms. These increase the learning curve for users, cause teams
to work slower, and raise production costs. DevOps teams frequently run into
similar issues on different projects, but a lack of collaboration means that
they have to be individually fixed each time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, with the MPL, DevOps teams have a shared, simple, and flexible CI/CD
platform to improve user support, collaboration, and overall project source code
to the production process. By utilizing the MPL, your company can find an
automation consensus, reach cross-company collaboration goals, and reuse the
best practices from a large community, all with open source tools. If you’re
interested in building an MPL, please contact us to learn more!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional-resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#additional-resources&quot;&gt;&lt;/a&gt;Additional resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline/#overview&quot;&gt;Jenkins Pipeline Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline/shared-libraries/#extending-with-shared-libraries&quot;&gt;Jenkins Shared Libraries&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/griddynamics/mpl&quot;&gt;MPL GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overview &amp;amp; demo videos:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/NpnQS3fFlyI&quot;&gt;Intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/wwi7oREL02k&quot;&gt;Overview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/QZsQThhPk-Y&quot;&gt;Demo of the MPL Build&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/UsThHFze76Y&quot;&gt;Demo of the Nested Library&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/GLtvxY1S3Aw&quot;&gt;Demo of the Petclinic Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/07/webhook-firewalls/</id>
<title>Triggering builds with webhooks behind a secure firewall</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2019-01-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2019/01/07/webhook-firewalls/" />
<author>
<name>michaelneale</name>
</author>
<category term="jenkins"></category>
<category term="webhooks"></category>
<category term="security"></category>
<summary>
In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.


What are webhooks

Just a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.





The...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I wanted to show how you can run Jenkins behind a firewall (which could be a corporate firewall, a NAT’ed network like you have at home) but still receive webhooks in real time from GitHub.com. You can generalise this to other services too - such as BitBucket or DockerHub, or anything really that emits webhooks, but the instructions will be for GitHub projects hosted on github.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-are-webhooks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-are-webhooks&quot;&gt;&lt;/a&gt;What are webhooks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just a very quick refresher on what webhooks are: Messages (often JSON, but not always) typically posted by HTTP(S) from a server to a client that is listening for events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/webhooks.png&quot; alt=&quot;webhook diagram&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The events flow left to right, Jenkins sits there happily listing on paths like &lt;code&gt;/github-webhook/&lt;/code&gt; or &lt;code&gt;/dockerhub-webhook/&lt;/code&gt; etc for some HTTP request to tell it to wake up and do some work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub/BitBucket may be reporting a new commit or PR, or DockerHub reporting an upstream image has changed. What all these things have in common is that they push to Jenkins, and expect to be able to push to it (ie that Jenkins is visible to them). This works great when the network is open - say GitHub Enterprise, or Jenkins is listening on the web.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;not-on-the-web&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#not-on-the-web&quot;&gt;&lt;/a&gt;Not on the web&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trick is when something gets in the middle, say a firewall:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/firewalls.png&quot; alt=&quot;firewall diagram&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(&lt;em&gt;As is industry standard, all firewalls have to be a wall on fire. Please don’t somehow set bricks on fire in your organisation&lt;/em&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is just the same when you fire up Jenkins on your laptop, and want to receive webhooks from github.com (a legitimate thing, perhaps to test out your setup, perhaps to run builds for iOS on a mac, or some corner of a network that is not exposed to the web). Unless your laptop is addressable to the whole web that is (not likely), or your network is configured just right, the webhooks won’t be able to flow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is fine - we can fall back to polling for changes. Except this is terrible. You burn through API quotas, and you don’t get changes in real time, and really no one is happy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;some-problems-are-opportunities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#some-problems-are-opportunities&quot;&gt;&lt;/a&gt;Some problems are opportunities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can both solve this problem, but also, view this is an opportunity. Having things not addressable on the web, or locked down in some default way is a feature, not a bug. You massively reduce your attack surface, and can have defence in depth:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/exposed.png&quot; alt=&quot;exposed on web&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-webhook-forwarding-service&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-webhook-forwarding-service&quot;&gt;&lt;/a&gt;A Webhook forwarding service&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter the memorably named &lt;a href=&quot;https://smee.io/&quot;&gt;Smee&lt;/a&gt;. This is an &lt;a href=&quot;https://github.com/probot/smee&quot;&gt;OSS project&lt;/a&gt; provided by GitHub and also helpfully hosted as a service by GitHub. This can capture and forward webhooks for you. I’ll try to explain it with a diagram:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/forwarding.png&quot; alt=&quot;forwarding&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GitHub pushes an event (via HTTPS/json in this case) to Smee.io (the funny thing with circles, which is on the public web and accessible from GitHub.com) - and Jenkins in turn subscribes to Smee with an outgoing connection from a client. Note the direction of the arrows: Jenkins only makes an outbound connection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the important point: this will work as long as the firewall is one way (like a NAT typically is, and many networks). If the Jenkins side can’t connect to anything on the outside world - well, this won’t help with that of course (but that is not often the case).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-it-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-it-up&quot;&gt;&lt;/a&gt;Setting it up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Step 1: Firstly - go to &lt;a href=&quot;https://smee.io/&quot; class=&quot;bare&quot;&gt;https://smee.io/&lt;/a&gt; and click “Start a new channel”:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/smee.png&quot; alt=&quot;smee website&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will give you a unique URL (which you should copy for later use):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/config1.png&quot; alt=&quot;smee config&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next you should install the smee client next to where you have the Jenkins server running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;npm install --global smee-client&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(This will make the smee client/command available to receive and forward webhooks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now start the smee client and point it to your Jenkins server. In this case I have it running on port 8080 (the default if you fire it up on your laptop, change both the port and the smee URL as needed):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;smee --url &lt;a href=&quot;https://smee.io/GSm1B40sRfBvSjYS&quot; class=&quot;bare&quot;&gt;https://smee.io/GSm1B40sRfBvSjYS&lt;/a&gt; --path /github-webhook/ --port 8080&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This says to connect to the smee service, and forward webhooks to /github-webhook/ (that trailing slash is important, don’t miss it). Once this is running, you will see it log that it is connected and forwarding webhooks. Leave this command running for as long as you want to receive webhooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, you need to configure a pipeline that makes use of github. In this case I set up one from scratch. You can skip this if you already have a pipeline setup:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/newpipeline.png&quot; alt=&quot;new pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I then chose “GitHub” as the where the code is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/choice.png&quot; alt=&quot;choose github&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then choose your repository. This will set things up ready to receive webhooks from GitHub. (also if you have an existing pipeline setup, and it is using GitHub as the SCM source, that is also fine).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final step is to tell GitHub to post webhook events for that repository (or organization, you can do that too) to Smee (which ultimately means Jenkins will receive them).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to the settings tab for your GitHub repository, and then click “add webhook”:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/addwebhook.png&quot; alt=&quot;add webhook&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, configure the webhook:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Paste in the “smee” URL you copied from the step above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose &lt;code&gt;application/json&lt;/code&gt; as the content type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tell it to &lt;code&gt;send everything&lt;/code&gt; (you can pick and choose what events, but I just did that as simpler).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Press Add Webhook (or update)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should look something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/config2.png&quot; alt=&quot;config webhook&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK - webhooks should be flowing now. You can make a change to your repository, and check that a build starts soon after:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2019-01-07-webhook-firewalls/running.png&quot; alt=&quot;running pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/26/gsoc-2019-call-for-mentors/</id>
<title>Google Summer of Code 2019. Call for Project ideas and Mentors</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/26/gsoc-2019-call-for-mentors/" />
<author>
<name>martinda</name>
</author>
<category term="gsoc"></category>
<category term="gsoc2019"></category>
<category term="community"></category>
<category term="events"></category>
<category term="developer"></category>
<summary>
Google Summer of Code
is as program where students are paid a stipend by Google to work on a free open source project like Jenkins,
at full-time for four months (May to August).
Mentors get actively involved with students starting at the end of February when students start to apply
(see the timeline).








We are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!
We have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,
we want to be ready before that.


The first step in the process is...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code&lt;/a&gt;
is as program where students are paid a stipend by Google to work on a free open source project like Jenkins,
at full-time for four months (May to August).
Mentors get actively involved with students starting at the end of February when students start to apply
(see the &lt;a href=&quot;https://developers.google.com/open-source/gsoc/timeline&quot;&gt;timeline&lt;/a&gt;).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for mentors and project ideas to participate in the 15th edition of the Google Summer of Code program!
We have until February 6th, 2019 at 8pm UTC to submit the application on behalf the Jenkins Organization, but obviously,
we want to be ready before that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first step in the process is to have mentors and project ideas.
Then we will apply to Google.
We need Google to accept Jenkins' application to the program itself.
And for this to happen, &lt;strong&gt;we need project proposals and mentors&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We currently have a &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2019/project-ideas&quot;&gt;list of project idea proposals&lt;/a&gt;,
and we are looking for new project proposals, mentors, technical advisers, and subject matter experts.
GSoC projects may be about anything around code: new features, plugins, test frameworks, infrastructure, etc., etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making a project idea proposal is easy, you can read the instructions &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/proposing-project-ideas&quot;&gt;here&lt;/a&gt;.
Quick start:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;a href=&quot;https://docs.google.com/document/d/1l5SdcLnlCwWA6qH8FKT9XC714Dl1XJ9lyy1CKDdKKAU&quot;&gt;project proposal template&lt;/a&gt;,
add a short description of your project idea&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the document for public view and comments, reference communication channels there (if any)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let us know about the project idea via &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;our gitter channel&lt;/a&gt; or the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After getting initial feedback from org admins, share your idea with other contributors who might be interested
(via the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;developer mailing list&lt;/a&gt;, &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/chat&quot;&gt;chats&lt;/a&gt;, or &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs&quot;&gt;special interest groups&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Potential mentors are invited to read the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/mentors&quot;&gt;information for mentors&lt;/a&gt; for more information about the project.
Note that being a GSoC mentor does not require expert knowledge of Jenkins.
GSoC org admins will help to find technical advisors, so you can study together with your students.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mentoring takes about 5 to 6 hours of work per week (more at the start, less at the end).
In return, a student works on your project full time for four months.
Think about the projects that you’ve always wanted to do but could not find the time…​
There are also many opportunities to engage with the Jenkins community (meetups, knowledge sharing, communications) and with other projects (e.g. &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/&quot;&gt;going to the GSoC Mentor Summit&lt;/a&gt;).
GSoC is a pretty good return on the investment!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For any question, you can find the GSoC admins,
mentors and participants on the &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;GSoC SIG Gitter chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins GSoC Org Admin Team 2019&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/25/year-in-review/</id>
<title>2018 in Review: A year of innovation</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-25T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/25/year-in-review/" />
<author>
<name>kohsuke</name>
</author>
<category term="core"></category>
<category term="community"></category>
<summary>
The end of a year is a great time to step back from the daily grind to look at the big picture.





Across the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that software and developers are king. At the ground level, every team I meet sees the software delivery automation to be a critical part of their "software factory," and it&#8217;s important for them to create and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end of a year is a great time to step back from the daily grind to look at the big picture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2018-12-25-year-in-review/2018-256.jpg&quot; alt=&quot;Year in review&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Across the industry, the relentless march toward more automation still continues on. We are writing software faster than ever, but the demand for software seems to be going up even more, and I feel more and more businesses and executives are keenly aware that &lt;a href=&quot;https://www.ciodive.com/news/software-is-king-and-developers-are-in-high-demand/519272/&quot;&gt;software and developers are king&lt;/a&gt;. At the ground level, every team I meet sees the software delivery automation to be a critical part of their &quot;software factory,&quot; and it’s important for them to create and manage them with unhinged flexibility and visibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins continues to play a major role in making this possible, after 14+ years since its birth, and if anything &lt;a href=&quot;https://stats.jenkins.io/jenkins-stats/svg/total-jenkins.svg&quot;&gt;the pace of growth seems to be accelerating&lt;/a&gt;. In this dog year industry, that’s truly remarkable. Being a part of this achievement truly makes me proud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building Jenkins, being a tool that everyone uses, comes with a great responsibility. So within the Jenkins community, we’ve been hard at work. In fact, &lt;strong&gt;2018 has been the single most innovative year in the history of the whole project&lt;/strong&gt; across the field, at multiple levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we got bigger, we needed better ways to drive initiatives that cut across multiple people. This thinking led to &lt;a href=&quot;https://github.com/jenkinsci/jep/&quot;&gt;JEPs&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/sigs/&quot;&gt;SIGs&lt;/a&gt;, and 2018 saw these formats getting great traction. After a year of operating them, I think we’ve learnt a lot, and I hope we will continue to improve them based on the learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These new formats gave rise to new collaborations. For example, &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt; resulted in &lt;a href=&quot;https://jenkins.io/sigs/chinese-localization/#wechat&quot;&gt;our WeChat presence&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/zh/&quot;&gt;localized website&lt;/a&gt;. &lt;a href=&quot;https://jenkins.io/sigs/platform/&quot;&gt;Platform SIG&lt;/a&gt; was instrumental in &lt;a href=&quot;https://jenkins.io/blog/2018/12/14/java11-preview-availability/&quot;&gt;Java 11 support&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I’m also very happy to see new batch of leaders. In fear of missing out some people, I’m not going to list them individually, but we celebrated many of them as &lt;a href=&quot;https://flic.kr/p/2asPXx1&quot;&gt;Jenkins Ambassadors&lt;/a&gt; this fall (and please &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Jenkins+Ambassador&quot;&gt;nominate more&lt;/a&gt; for the next year!) Those people who lead key efforts are often people who are new to those roles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some of the new leaders led other efforts that unlock new contributors. It’s about consciously thinking which segment of our potential contributors we aren’t tapping today and understanding why. Something any business does all the time. Ours resulted in &lt;a href=&quot;https://jenkins.io/blog/2018/10/14/gsoc2018-results/&quot;&gt;Google Summer of Code&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/blog/2018/12/10/outreachy-audit-log-plugin/&quot;&gt;Outreachy&lt;/a&gt; participations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our security process and the pace of fixes have gone up considerably this year again, reflecting our stepping up to the trust our users gave to us. For example, this year &lt;a href=&quot;https://jenkins.io/blog/2018/10/09/telemetry/&quot;&gt;we rolled out a telemetry system&lt;/a&gt; that informs us to develop better fixes more quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, where these community improvements ultimately matter is what impact we are creating to software that you use. On that front, I think we did great in 2018, resulting in what I call &lt;a href=&quot;https://www.youtube.com/watch?v=qE3tfS7k1VI&quot;&gt;&quot;5 super powers&quot;&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io/&quot;&gt;Jenkins X&lt;/a&gt; is probably the most visible innovation of this year, making it much easier to create modern cloud applications on Kubernetes. This also represents &lt;a href=&quot;https://jenkins.io/blog/2018/03/20/evolving-mission-of-jenkins/&quot;&gt;the significant expansion of the Jenkins community and its mission&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/jcasc/&quot;&gt;Jenkins Configuration as Code&lt;/a&gt; hit a major milestone &quot;1.0&quot; this year, and it’s continuing to gain more momentum and traction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Cloud Native Jenkins&quot; is the term I gave to &lt;a href=&quot;https://jenkins.io/blog/2018/08/31/shifting-gears/&quot;&gt;a new effort that I’m calling to transform Jenkins&lt;/a&gt; into general purpose CI/CD engine that runs at scale on Kubernetes. There’s still much to be defined here, but you can already see some great things like &lt;a href=&quot;https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870&quot;&gt;Serverless Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/evergreen/&quot;&gt;Evergreen&lt;/a&gt; is another young and upcoming project that has ambitious thesis --- drastically simplifying the adoption and operation of Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline effort formed &lt;a href=&quot;https://jenkins.io/sigs/pipeline-authoring/&quot;&gt;a new SIG&lt;/a&gt; and I’m looking forward to the impact this will drive in 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The not-so-secret sauce of the Jenkins community that threads together all these improvements from user visible changes to the community improvements is our ability to evolve. As I look forward to 2019, no doubt these things I mentioned will evolve, morph, merge, and split as we continue to learn and adopt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So please, follow &lt;a href=&quot;https://twitter.com/jenkinsci&quot;&gt;@jenkinsci&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jenkinsxio&quot;&gt;@jenkinsxio&lt;/a&gt; on Twitter to get updates on how we will evolve, and join our community to together build the software that rocks the world. How many open-source projects can say that?&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/14/java11-preview-availability/</id>
<title>Java 11 Support Preview is available in Jenkins 2.155+</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/14/java11-preview-availability/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="core"></category>
<category term="developer"></category>
<category term="java11"></category>
<category term="community"></category>
<category term="platform-sig"></category>
<summary>
Please refer to Running Jenkins on Java 11 documentation to have the up-to-date details on how to run Jenkins on Java 11.












This is a joint blogpost prepared by the Java 11 Support Team.
On Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup
(link)








Jenkins, one of the leading open-source automation servers, still supports only Java 8.
On September 25 OpenJDK 11 was released.
This is a Long-Term-Support which will stay around for years,
and in the Jenkins project we are interested to offer a full support of this version.
Over the last year many contributors have...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please refer to &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/administration/requirements/jenkins-on-java-11&quot;&gt;Running Jenkins on Java 11&lt;/a&gt; documentation to have the up-to-date details on how to run Jenkins on Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a joint blogpost prepared by the &lt;a href=&quot;https://github.com/orgs/jenkinsci/teams/java11-support&quot;&gt;Java 11 Support Team&lt;/a&gt;.
On Dec 18 (4PM UTC) we will be also presenting the Java 11 Preview Support at the Jenkins Online Meetup
(&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/257008190/&quot;&gt;link&lt;/a&gt;)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/logos/formal/256.png&quot; alt=&quot;Jenkins Java&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins, one of the leading open-source automation servers, still supports only Java 8.
On September 25 OpenJDK 11 was released.
This is a Long-Term-Support which will stay around for years,
and in the Jenkins project we are interested to offer a full support of this version.
Over the last year many contributors have been working towards enabling support for Java 11 in the project (Jenkins JEP-211).
It was a thorny path,
but now, on behalf of the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/platform&quot;&gt;Jenkins Platform SIG&lt;/a&gt;,
we are happy to announce preview availability of Java 11 support in Jenkins weekly releases!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why do we need preview availability for Java 11?
It offers Jenkins contributors and early adopters a way
to try out the changes before the general availability release happens early next year.
It should help us to get more exploratory testing and, hopefully,
resolve most of the issues before Java 11 is officially supported in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post we will describe how to run with Java 11,
and how to investigate compatibility issues and report them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you probably remember,
in June 2018 we had an &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/06/08/jenkins-java10-hackathon/&quot;&gt;online hackathon&lt;/a&gt; targeting Java 10+ support in Jenkins.
As a part of the hackathon,
we provided the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/06/17/running-jenkins-with-java10-11/&quot;&gt;experimental support of Java 11&lt;/a&gt;.
This event was a big success for us,
and we were able to get Jenkins running with Java 10 and 11-ea,
including major features like Jenkins Pipeline, JobDSL, Docker/Kubernetes plugins, Configuration as Code, BlueOcean, etc.
It gave us confidence that we can provide Java 11 support in Jenkins without major breaking changes.
After the hackathon, &lt;a href=&quot;https://github.com/oleg-nenashev/&quot;&gt;Oleg Nenashev&lt;/a&gt; created
&lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/211/README.adoc&quot;&gt;JEP-211: Java 10+ support in Jenkins&lt;/a&gt; (was later adjusted to target Java 11 only).
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/platform&quot;&gt;Platform Special Interest Group&lt;/a&gt;
has been also founded to coordinate the Java 11 support work
and other platform support efforts (packaging, operating system support, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A group of contributors continued working on Java 11 support,
mostly focusing on upstreaming functional patches,
enabling Java 11 support in development tools,
testing and addressing known compatibility issues.
See the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/platform/#meetings&quot;&gt;Platform SIG meeting notes&lt;/a&gt; for detailed status updates.
Starting from Jenkins 2.148, Jenkins successfully runs with latest OpenJDK 11 releases on various Linux and Windows platforms.
We performed a LOT of automated and exploratory tests, Jenkins plugins appear to work well with some exceptions (see below).
There is ongoing test automation effort towards the GA releases,
but we were able to successfully run Jenkins core tests,
full &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness/&quot;&gt;Acceptance Test Harness&lt;/a&gt;,
and &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester&quot;&gt;Plugin Compat Tester&lt;/a&gt; for recommended plugins.
We also deployed a temporary
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#temporary-experimental-update-center-for-java-11&quot;&gt;Experimental Update Center for Java 11&lt;/a&gt;
which allows quickly delivering fixes for Java 11 early adopters.
Jenkins 2.155+ defaults to this update center when running with Java 11,
and that’s why we announce preview availability for this version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Nov 19, 2018 we presented the current Java 11 support status at the Platform SIG meeting
&lt;a href=&quot;https://docs.google.com/presentation/d/1lw4unaFhsQk7a8HzhxhgTK4X2X2ocv_W_VW7aoH2WkM/edit?usp=sharing&quot;&gt;slides&lt;/a&gt;,
and we agreed that we would like to proceed with the preview availability so that
we can offer something for evaluation to Jenkins users.
By the next meeting on Dec 04, all blockers have been addressed,
and the Platform SIG meeting signed off the Java 11 preview availability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;running-jenkins-and-java-11-in-docker&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-jenkins-and-java-11-in-docker&quot;&gt;&lt;/a&gt;Running Jenkins and Java 11 in Docker&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting from Jenkins 2.155, we provide Docker images for the Jenkins master and agent.
All these images are based on the official
&lt;a href=&quot;https://hub.docker.com/r/_/openjdk/&quot;&gt;openjdk:11-jdk&lt;/a&gt; image maintained by the Docker Community.
There were discussions about migrating to other base images,
but we decided to exclude it from the Preview Availability scope.
Similarly, we do not provide Alpine images for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jenkins-master-image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-master-image&quot;&gt;&lt;/a&gt;Jenkins master image&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 11 support is now provided as a part of the official
&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt; image.
You can run the Jenkins with Java 11 simply as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:jdk11&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following tags are available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jdk11&lt;/code&gt; - Latest weekly release with Java 11 support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;2.155-jdk11&lt;/code&gt; - Weekly releases packaged with Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The image is fully compatible with
&lt;a href=&quot;https://github.com/jenkinsci/docker/blob/master/README.md&quot;&gt;jenkins/jenkins documentation&lt;/a&gt;,
e.g. you can use &lt;code&gt;plugins.txt&lt;/code&gt; to install plugins, mount volumes and pass extra options via environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;agent-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#agent-images&quot;&gt;&lt;/a&gt;Agent images&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use containerized agents via Docker or Kubernetes plugins,
we have also released official Docker images for Jenkins agents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/slave/&quot;&gt;jenkins/slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/jnlp-slave/&quot;&gt;jenkins/jnlp-slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/ssh-slave/&quot;&gt;jenkins/ssh-slave&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All images use the &lt;code&gt;latest-jdk11&lt;/code&gt; image tag for JDK11 bundles.
And sorry for the obsolete names!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;experimental-jenkins-master-images&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#experimental-jenkins-master-images&quot;&gt;&lt;/a&gt;Experimental Jenkins master images&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to simplify testing, we also provide some experimental images on DockerHub.
We set up a continuous delivery flow for them,
so you can get patches without waiting for Jenkins weekly releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins4eval/blueocean-platform-support/&quot;&gt;jenkins4eval/blueocean-platform-support&lt;/a&gt; -
Equivalent of &lt;a href=&quot;https://hub.docker.com/r/jenkinsci/blueocean/&quot;&gt;jenkinsci/blueocean&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tag: &lt;code&gt;latest-jdk11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The image bundles all Jenkins Pipeline and Blue Ocean patches required to run on Java 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to try Pipeline, use this image&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins-experimental/&quot;&gt;jenkins/jenkins-experimental&lt;/a&gt; -
Equivalent of &lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tag: &lt;code&gt;latest-jdk11&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The image is released from the &lt;code&gt;java11-support&lt;/code&gt; feature branch in the Jenkins core&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The branch may be slightly ahead or behind the &lt;code&gt;master&lt;/code&gt; branch,
we may use the branch to quickly deliver patches to Java 11 users&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually we will move the experimental flow to the new &lt;code&gt;jenkins4eval&lt;/code&gt; organization
being created as a part of &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/217/README.adoc&quot;&gt;JEP-217&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;running-jenkins-war-with-java-11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-jenkins-war-with-java-11&quot;&gt;&lt;/a&gt;Running jenkins.war with Java 11&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running without Docker is not that trivial,
because Jenkins depends on some modules which have been removed from Java 11.
We plan to address it in the General Availability release somehow (see &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52186&quot;&gt;JENKINS-52186&lt;/a&gt;),
but for now some manual actions are required to run Jenkins WAR with Java 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download Jenkins WAR for 2.155&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the following libraries to the same directory as jenkins.war&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://central.maven.org/maven2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar&quot;&gt;jaxb-api-2.3.0.jar&lt;/a&gt; (save as jaxb-api.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://central.maven.org/maven2/com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar&quot;&gt;jaxb-core-2.3.0.1.jar&lt;/a&gt; (save as jaxb-core.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://central.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.3.0.1/jaxb-impl-2.3.0.1.jar&quot;&gt;jaxb-impl-2.3.0.1.jar&lt;/a&gt; (save as jaxb-impl.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/javaee/activation/releases/download/JAF-1_2_0/javax.activation.jar&quot;&gt;javax.activation v.1.2.0&lt;/a&gt;  (save as javax.activation.jar)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the following command:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;Run Jenkins with ${JAVA11_HOME}/bin/java \
    -p jaxb-api.jar:javax.activation.jar --add-modules java.xml.bind,java.activation \
    -cp jaxb-core.jar:jaxb-impl.jar \
    -jar jenkins.war --enable-future-java --httpPort=8080 --prefix=/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;known-compatibility-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-compatibility-issues&quot;&gt;&lt;/a&gt;Known compatibility issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To help users to track down the compatibility issues,
we have created a new &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot;&gt;Known Java 11 Compatibility Issues&lt;/a&gt; Wiki page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Several important issues and obstacles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/workflow-support&quot;&gt;Pipeline: Support Plugin&lt;/a&gt; has a known issue
with context persistency when running with Java 11 (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51998&quot;&gt;JENKINS-51998&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have deployed a temporary fix to the
&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#temporary-experimental-update-center-for-java-11&quot;&gt;Experimental Update Center for Java 11&lt;/a&gt;.
 Fix version: &lt;code&gt;3.0-java11-alpha-1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use Jenkins Pipeline, make sure you run with this fix.
Otherwise the jobs will fail almost immediately&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When updating instances to Java 11, make sure there is no running Pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-54305&quot;&gt;JENKINS-54305&lt;/a&gt; -
&lt;a href=&quot;https://plugins.jenkins.io/jdk-tool&quot;&gt;JDK Tool Plugin&lt;/a&gt; does not offer installers for JDK 11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-52282&quot;&gt;JENKINS-52282&lt;/a&gt; -
Java Web Start is no longer available in Java 11, so it is no longer possible to start agents from Web UI.
We do not plan to provide a replacement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also know about some minor incompatibilities in other plugins,
but we do not consider them as blockers for preview availability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reporting-compatibility-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reporting-compatibility-issues&quot;&gt;&lt;/a&gt;Reporting compatibility issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you discover any Java 11 incompatibilities, please
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/How+to+report+an+issue&quot;&gt;report issues in our bugtracker&lt;/a&gt;.
Please set &lt;code&gt;java11-compatibility&lt;/code&gt; labels for such issues
so that they automatically appear on the Wiki page and get triaged.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the security issues please use the standard
&lt;a href=&quot;https://jenkins.io/security/#reporting-vulnerabilities&quot;&gt;vulnerability reporting process&lt;/a&gt;.
Although we will be fixing Java 11 specific issues in public while it is in the preview,
following the security process will help us to investigate impact on Java 8 users.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;java-11-support-team&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-11-support-team&quot;&gt;&lt;/a&gt;Java 11 Support Team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once Java 11 support is released, we expect reports of regressions in plugins and Jenkins core.
One of the concerns are exotic platforms with native libraries, and of course other Java versions.
There is also a risk of 3rd-party library incompatibilities with Java 11.
To mitigate the risks, we have created a
&lt;a href=&quot;https://github.com/orgs/jenkinsci/teams/java11-support&quot;&gt;Java 11 Support Team&lt;/a&gt;.
This team will be focusing on triaging the incoming issues,
helping to review pull requests and, in some cases, delivering the fixes.
The process for this team is &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211#post-release-support&quot;&gt;documented&lt;/a&gt; in JEP-211.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not expect the &lt;em&gt;Java 11 Support Team&lt;/em&gt; to be able to fix all discovered issues,
and we will be working with Jenkins core and plugin maintainers to get the fixes delivered.
If you are interested to join the team,
reach out to us in the &lt;a href=&quot;https://gitter.im/jenkinsci/platform-sig&quot;&gt;Platform SIG Gitter Channel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributing&quot;&gt;&lt;/a&gt;Contributing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will appreciate any kind of contributions in the Java 11 effort,
including trying out Jenkins with Java 11, reporting and fixing compatibility issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to do the exploratory testing,
we recommend to try out Java 11 support at one of your test instances.
Such testing will be much appreciated,
especially if you use some service integration plugins or exotic platforms.
The issue reporting guidelines are provided &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/14/java11-preview-availability/#reporting-compatibility-issues&quot;&gt;above&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are a plugin developer/maintainer,
we would appreciate if you could test your plugin with Java 11.
In order to help with that, we have created a Wiki page with
&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer guidelines&lt;/a&gt;.
This page explains how to build and test plugins with Java 11,
and it also lists known issues in development tools&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whatever you do, please let us know about your experience by sending a message to
the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkins-platform-sig&quot;&gt;Platform SIG mailing list&lt;/a&gt;.
Such information will help us a lot to track changes and contributions.
Any other feedback about the migration complexity will be appreciated!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Dec 18 (4PM UTC) we will be presenting the Java 11 Preview Support at the Jenkins Online Meetup
(&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/257008190/&quot;&gt;link&lt;/a&gt;).
At this meetup we will summarize the current Java 11 Preview support status.
If you are a plugin developer, we will also organize separate sessions about testing plugins with Java 11 and about common best practices for fixing compatibility issues.
Please follow the Platform SIG announcements if you are interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next weeks we will focus on addressing feedback from early adopters and
fixing the discovered compatibility issues.
We will also continue working on Java 11 support patches towards the general availability next year (&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-51805&quot;&gt;JENKINS-51805&lt;/a&gt;).
In addition to that, we will start working on Java 11 support in subprojects,
including &lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt; and &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/evergreen/&quot;&gt;Jenkins Evergreen&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/211&quot;&gt;JEP-211: Java 11 support in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/administration/requirements/java/&quot;&gt;Java requirements in Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Known+Java+11+Compatibility+issues&quot;&gt;Known Java 11 Compatibility Issues&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Java+11+Developer+Guidelines&quot;&gt;Java 11 Developer guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/platform/&quot;&gt;Platform Special Interest Group&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/the-official-Docker-image/</id>
<title>Official Jenkins image to use from Docker Hub</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/the-official-Docker-image/" />
<author>
<name>batmat</name>
</author>
<category term="docker"></category>
<summary>
There are now three different Docker Hub repositories that are or have been used as the "official" Jenkins image.
This article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).


The official one



docker pull jenkins/jenkins



i.e. https://hub.docker.com/r/jenkins/jenkins/ is the right repository to use.


I also documented some time ago on my blog the recommended way to run Jenkins using the official Docker image.




The deprecated ones



jenkins

Deprecated since a long time already.
A short version of why we stopped using and updating this image is that we never had a way to get our images published without having...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are now three different Docker Hub repositories that are or have been used as the &quot;official&quot; Jenkins image.
This article aims at providing a clarification about which one is the current official one (as of December 2018 :-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-official-one&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-official-one&quot;&gt;&lt;/a&gt;The official one&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker pull jenkins/jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;i.e. &lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot; class=&quot;bare&quot;&gt;https://hub.docker.com/r/jenkins/jenkins/&lt;/a&gt; is the right repository to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also documented some time ago on my blog the &lt;a href=&quot;http://batmat.net/2018/09/07/how-to-run-and-upgrade-jenkins-using-the-official-docker-image/&quot;&gt;recommended way to run Jenkins using the official Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-deprecated-ones&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-deprecated-ones&quot;&gt;&lt;/a&gt;The deprecated ones&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://hub.docker.com/_/jenkins/&quot;&gt;&lt;code&gt;jenkins&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecated since a long time already.
A short version of why we stopped using and updating this image is that we never had a way to get our images published without having each time to go through a manual process.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkinsci/jenkins&quot;&gt;&lt;code&gt;jenkinsci/jenkins&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecated since a long time too, but for easing transition, we had kept updating both &lt;code&gt;jenkins/jenkins&lt;/code&gt; (the right one) and &lt;code&gt;jenkinsci/jenkins&lt;/code&gt; together.
We stopped updating &lt;code&gt;jenkinsci/jenkins&lt;/code&gt; in early December 2018 (cf. &lt;a href=&quot;https://issues.jenkins-ci.org/browse/INFRA-1934&quot;&gt;INFRA-1934&lt;/a&gt; for details if you are interested)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/outreachy-audit-log-plugin/</id>
<title>Outreachy internships to add audit logging support to Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/outreachy-audit-log-plugin/" />
<author>
<name>jvz</name>
</author>
<category term="community"></category>
<category term="outreachy"></category>
<category term="outreachy2018"></category>
<summary>
This year marks the first time the Jenkins project is participating in Outreachy.
Outreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.
The key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.
Once I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.
I&#8217;m happy to report that both the Jenkins project,  and my employer [CloudBees](https://www.cloudbees.com), have been very supportive...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year marks the first time the Jenkins project is participating in &lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt;.
Outreachy is a program similar to Google Summer of Code (GSoC) where interns work on open source projects for a paid stipend.
The key difference is that Outreachy reaches out to underrepresented groups and those who face systemic bias or discrimination in the technology industry in their home country.
Once I learned about this program, I immediately volunteered to mentor as the concept strongly aligns with my ideals of inclusiveness and community building.
I’m happy to report that both the Jenkins project,  and my employer [CloudBees](&lt;a href=&quot;https://www.cloudbees.com&quot; class=&quot;bare&quot;&gt;https://www.cloudbees.com&lt;/a&gt;), have been very supportive of this program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expanding on our previous efforts to mentor students in GSoC, this year we’ve joined up with Outreachy to mentor two interns.
Our interns for this season of Outreachy,  &lt;a href=&quot;https://github.com/Lathaguna&quot;&gt;Latha Gunasekar&lt;/a&gt; and &lt;a href=&quot;https://github.com/davidolorundare&quot;&gt;David Olorundare&lt;/a&gt;, will be working with me on &lt;a href=&quot;https://github.com/jenkinsci/audit-log-plugin&quot;&gt;audit logging support for Jenkins&lt;/a&gt;.
I am excited to welcome both David and Latha, and am looking forward to what they will learn about both professional software engineering and contributing to an open source community.
Stay tuned for blog post entries introducing both people in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The audit logging support project forms a new connection between Jenkins and &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot;&gt;Apache Log4j&lt;/a&gt; which offers great opportunities for our interns to learn more about open source governance and meet new people.
As a bonus, the project aims to provide the tooling necessary to support advanced observability concerns such as running anomaly detection on authentication events to detect potential intrusion attempts.
We will also be authoring a &lt;a href=&quot;https://github.com/jenkinsci/jep&quot;&gt;JEP&lt;/a&gt; to detail the audit logging API provided by the plugin and how other plugins can define and log their own audit events besides the Jenkins Core ones that come with the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m looking forward to the great work we’ll be doing together, and I hope that we’ll be able to welcome more Outreachy interns in the future!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/kubecon-is-here/</id>
<title>KubeCon + CloudNativeCon North America 2018 is Here!</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/10/kubecon-is-here/" />
<author>
<name>lnewman</name>
</author>
<category term="cloud-native"></category>
<category term="kubernetes"></category>
<category term="kubecon"></category>
<summary>
The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.
The conference has completely sold out and the schedule is jam packed with interesting talks.


If you&#8217;re among those with tickets, here are a couple Jenkins related events that might interest you:




On Wednesday at 3:40pm, Carlos Sanchez will be presenting
Jenkins X: Continuous Delivery for Kubernetes in
Tahoma 3/4 @ TCC.


On Tuesday at 2:35pm, Jonathan Hess &amp; Loren Trout from
SAP will discuss how
Migrating Jenkins to Kubernetes Broke Our Brains in Room 606-609.




I look forward to seeing you there!...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-north-america-2018&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2018-12-kubecon-na/logo.svg&quot; alt=&quot;KubeCon + CloudNativeCon North America 2018&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The time has come - KubeCon + CloudNativeCon North America 2018 has arrived.
The conference has completely sold out and the schedule is jam packed with interesting talks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re among those with tickets, here are a couple Jenkins related events that might interest you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Wednesday at 3:40pm, Carlos Sanchez will be presenting
&lt;a href=&quot;https://kccna18.sched.com/event/GrT2&quot;&gt;Jenkins X: Continuous Delivery for Kubernetes&lt;/a&gt; in
&lt;a href=&quot;https://kccna18.sched.com/venue/Tahoma+3%2F4+%40+TCC&quot;&gt;Tahoma 3/4 @ TCC&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Tuesday at 2:35pm, Jonathan Hess &amp;amp; Loren Trout from
&lt;a href=&quot;https://www.sap.com&quot;&gt;SAP&lt;/a&gt; will discuss how
&lt;a href=&quot;https://kccna18.sched.com/event/GrSh&quot;&gt;Migrating Jenkins to Kubernetes Broke Our Brains&lt;/a&gt; in Room 606-609.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I look forward to seeing you there!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/05/security-updates/</id>
<title>Important security updates for Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-12-05T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/12/05/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.
Since 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.
This allows administrators to install today&#8217;s security fixes without having to upgrade to the new LTS line immediately.


For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes, see our LTS 2.138.4 upgrade guide.


A note on previously released changes related to this fix

In the Jenkins core security updates released in August and October,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just released security updates to Jenkins, versions 2.154 and LTS 2.150.1, that fix multiple security vulnerabilities.
Since 2.150.1 is the first release in the new LTS line, we also released 2.138.4, a security update for the previous LTS line.
This allows administrators to install today’s security fixes without having to upgrade to the new LTS line immediately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/security/advisory/2018-12-05&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes, see our &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/upgrade-guide/2.138/#upgrading-to-jenkins-lts-2-138-4&quot;&gt;LTS 2.138.4 upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-note-on-previously-released-changes-related-to-this-fix&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-note-on-previously-released-changes-related-to-this-fix&quot;&gt;&lt;/a&gt;A note on previously released changes related to this fix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Jenkins core security updates released in August and October, we also included security improvements that can be disabled by setting various system properties.
Those changes are an essential part of the SECURITY-595 fix, so we strongly recommend not disabling them for any reason.
Previously published documentation has been updated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/</id>
<title>Google Summer of Code Mentor Summit 2018</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-11-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/13/martinda-gsoc-mentor-summit-experience/" />
<author>
<name>martinda</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="gsoc"></category>
<category term="gsoc2018"></category>
<summary>
This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit
at the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.
The GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year
to learn and network with mentors from other organization, and make GSoC a better program.
This is the second time Jenkins mentors have participated in the summit, the first time was in 2016.


Exceptionally, three Jenkins GSoC mentors were invited to the summit this year.
Normally only two mentors are invited, but when there are cancellations, Google draws a name...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year, the Jenkins organization participated in the Google Summer of Code Mentor Summit
at the Google office in Sunnyvale on Oct 12, 13 and 14, 2018.
The GSoC Mentor Summit is where mentors of all organizations participating in the GSoC program are invited each year
to learn and network with mentors from other organization, and make GSoC a better program.
This is the second time Jenkins mentors have participated in the summit, the first time was in 2016.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exceptionally, three Jenkins GSoC mentors were invited to the summit this year.
Normally only two mentors are invited, but when there are cancellations, Google draws a name at random from the waiting list,
and the Jenkins organization was lucky enough and sent an extra mentor this year!
The mentors participating this year were Oleg Nenashev, Jeff Pearce and Martin d’Anjou.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is worth mentioning that the Mentor Summit is not a typical conference where you go
sit and listen at what speakers have to say, quite the contrary. The Mentor Summit is an unconference
where participants are invited to fill empty time slots with their own topic of discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;friday-oct-12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#friday-oct-12&quot;&gt;&lt;/a&gt;Friday Oct 12&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pre-conference-meeting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pre-conference-meeting&quot;&gt;&lt;/a&gt;Pre-conference meeting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mentors had a short pre-conference meeting to reflect on the Jenkins participation in the 2018 GSoC program,
and to plan for 2019.
We were joined at this meeting by Lloyd Chang, whom we had met at Jenkins World 2018.
Thank you Lloyd for joining us! A few ideas we had for 2019 are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Move project proposals to individual Google Documents&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a template for project proposed by potential mentors and by project champions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an Organization Administrator Guide for future Jenkins GSoC project admins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other preparations we agreed to work on include a review of the 2018 feedback and the creation
of an &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-54059&quot;&gt;Epic&lt;/a&gt; capturing the action items in preparation for 2019.
We are also planning on making progress on the GSoC Budget process described in &lt;a href=&quot;https://github.com/jenkinsci/jep/tree/master/jep/8&quot;&gt;JEP-8&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;summit-starts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summit-starts&quot;&gt;&lt;/a&gt;Summit Starts!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The summit started by a welcoming dinner at the Google Cafeteria and an evening session
where we were explained how the unconference would work. We proposed a few topics:
dealing with CPT lost slots, motivating mentors, and Open Source Hardware ASIC/FPGA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On thing to say is that everyone at the conference had heard of Jenkins, or was already using Jenkins.
Lots of people came to tell us their Jenkins experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I noticed this too - made me feel proud to be part of the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Jeff Pearce&lt;br /&gt;
&lt;cite&gt;Jenkins GSoC mentor in 2018&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;saturday-oct-13&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#saturday-oct-13&quot;&gt;&lt;/a&gt;Saturday Oct 13&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock left&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/conferences/gsoc-mentor-summit-2018-unconference.jpg&quot; alt=&quot;Unconference sessions&quot; width=&quot;250&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The morning started with a couple of announcements from Google.
The first one was that Google is thinking of creating a program called &quot;Google Season of Docs&quot; (GSoD for short),
where technical writers would be paired with Open Source Organizations to help them write documentation such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;High-impact tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set of How-To Guides&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contributor’s Guide&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation refactoring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plain documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have additional details regarding this in the
&lt;a href=&quot;https://docs.google.com/document/d/1tN9fnnJw9aBYsDwfDOVL5URTyoOyS3UYH4ijMAUOl3A/edit#heading=h.ipkcylodrufe&quot;&gt;GSoC Mentor Summit Notes&lt;/a&gt;
and we quickly concluded that if this program comes to life, Jenkins should be a participating organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The other announcement made by the GSoC administrators is that GSoC may take a different form in 2020.
However, not much more information has been made available at this time.
The program has been operating for 13 years, and in 2020 it will have been 15 years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The announcements were followed by a series of &lt;strong&gt;morning&lt;/strong&gt; lightning talks.
This is where organizations showcase what their students accomplished during the program.
This is when we had a bit of a surprise…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oleg who had signed up for the &lt;strong&gt;evening&lt;/strong&gt; lightning talks, was watching the talks while casually preparing slides for his &lt;strong&gt;evening&lt;/strong&gt; presentation.
But something unusual happened: many talks were shorter than the 3-minute allotted, and suddenly we were ahead of schedule.
That’s when Oleg was called to the stage.
I had no idea whether his slides were ready or not since he had just leaned over to me to say that he wanted to talk about all 3 projects we had this year.
Not knowing how far he had gotten into refactoring the slides, this was going to be…​ interesting.
Being an experienced presenter, Oleg pulled it off brilliantly.
The slides were effectively ready (how he managed that I have no idea),
but you can see the slides of his lightning talk here:
&lt;a href=&quot;https://docs.google.com/presentation/d/1TYnH_hxRf_yFofJP_wl2kckj2GFLxYQK-4-FGhVX3-Q/edit#slide=id.p1&quot;&gt;Jenkins Remoting over Apache Kafka&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then there were the unconference sessions. Some of the sessions we attended are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attracting and retaining mentors (facilitated by Martin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing and motivating volunteers and mentors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting students from coding/boot camps involved in open source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retaining students after GSoC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open Event management System&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GSoC Feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have notes for all the session in &lt;a href=&quot;https://docs.google.com/document/d/1tN9fnnJw9aBYsDwfDOVL5URTyoOyS3UYH4ijMAUOl3A/edit#&quot;&gt;the main document&lt;/a&gt;.
Some sessions were captured in separated documents which are linked from the main document, or from this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were lots of good ideas in those sessions, and we will do what we can next year to implement some of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some organizations have said that the key for student retention
is to give them responsibilities and tasks after the program is over.
We have certainly seen that this year, with one of our students asking for more responsibilities and wanting to know how
his plugin project could continue to grow within the Jenkins project (while at the same time help out on another GSoC plugin!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the evening was the second round of lightning talks.
Jeff Pearce presented the &lt;a href=&quot;https://docs.google.com/presentation/d/1CyUM_m9poSGk25SqMvYNpWrALoG8Wklkga4TPsn8uwQ/edit#slide=id.p1&quot;&gt;Code Coverage API Plugin&lt;/a&gt; lightning talk,
(he was not caught by surprise).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/conferences/gsoc-mentor-summit-2018-chocolate-1.jpg&quot; alt=&quot;Chocolate table at the GSoC 2018 Mentor Summit&quot; width=&quot;200&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the lightning talks, we were invited to hang out at the cafeteria and on the patio, to exchange stickers,
network with mentors of other organizations, and enjoy late evening snacks, music and of course the chocolate table!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sunday-oct-14&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sunday-oct-14&quot;&gt;&lt;/a&gt;Sunday Oct 14&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Sunday, the sessions continued. An interesting session was &quot;Beyond GSoC, What can Google do?&quot;.
One person got a big round of applause when he said: &quot;Cloud credits&quot;. It turns out the GSoC program admins
have been trying to get that for us for about 3 years. Google may be big and powerful, but some things
are hard and remain hard in the corporate world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An interesting suggestion was made by Oleg, and it would be to have a program with smaller, shorter term
commitments, something that would encourage more granular contributions but would not require a 4-month
long commitment. This was noted by the GSoC program admins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we attended a number of sessions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1k1nhJptJPklbcUc2riBjnNVcayiSq7EMywf6QHFHIwM/edit#heading=h.ag29mes0pkan&quot;&gt;Open Hardware ASIC/FPGA&lt;/a&gt; (facilitated by Martin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.outreachy.org/&quot;&gt;Outreachy&lt;/a&gt; (Jenkins is participating in this program)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1nLjZp-RRqLiB5ShegSjsACcPrU444OxyyI6nKLQUdmA/edit#heading=h.mnmo3qdv8jvc&quot;&gt;Failing a student&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Burnout (of mentors and org admins)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then the day came to an end with some last words by Google thanking all the mentors and volunteers who
run this program in their organizations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;return-trip&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#return-trip&quot;&gt;&lt;/a&gt;Return trip&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would now like to add a personal note. After the summit, like many others I fly back home,
so I spend the evening at the SFO international terminal waiting for my late night flight.
That is where I get to meet more mentors, as some of us still wear our badges and T-Shirts,
and also recognize each other from being at the conference.
And funny enough, there are so many geeks at that terminal
that we may have recruited, among the passengers, a mentor to another org for next year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-a-gsoc-student-to-work-on-your-project-in-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-a-gsoc-student-to-work-on-your-project-in-2019&quot;&gt;&lt;/a&gt;Want a GSoC student to work on your project in 2019?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have already started the preparations for GSoC 2019.
And we cannot do this without the participation of the Jenkins community.
We are already looking for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mentors from the Jenkins Special Interest Groups&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors from any background and any provenance (being a Jenkins developer is NOT required)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project proposals&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Students and their proposals&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lots of people are afraid that mentoring a student will take a lot of their time.
If you feel that way, you are not alone. It does take some time. In my case, I spend 5 to 8 hours per week on mentor tasks (more at the start, less at the end).
To make it easier on mentors who likely have full time jobs and life commitments, we define different mentor roles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Project champion co-mentor&lt;/strong&gt;: this is the mentor who proposes the idea, but may not have all the Jenkins code expertise needed. This mentor works with the student to define the project and acts mostly as a &quot;customer&quot; of the project. This mentor usually know enough about coding to comment on pull-requests with regards to the over quality, style and features of the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Technical co-mentor&lt;/strong&gt;: this is the mentor who knows enough about the Jenkins code to guide the student on coding, and to provide Jenkins specific code reviews on pull-requests, but has limited involvement outside the coding activity of the student.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a third role which is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Subject Matter Expert&lt;/strong&gt;: these individuals are not mentors, but we reach out to them 3-4 times during the project for advice and guidance, and sometimes complicated programming challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have questions or are curious about the program,
contact us on the &lt;a href=&quot;https://gitter.im/jenkinsci/gsoc-sig&quot;&gt;GSoC Gitter SIG chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to emphasize that project proposals are not limited to &quot;big projects&quot;.
For example, it is perfectly fine to have a proposal that is a collection of related Jira issues that aim to improve your project,
or a list of tasks that need to be done for your project.
Writing documentation is outside the scope of GSoC, but automating
documentation generation, as long as it is mostly about writing code, is within the scope of GSoC.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We look forward working with the Jenkins community on GSoC 2019!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/12/inspecting-binaries-with-jenkins/</id>
<title>The Silence of the Lambs: Inspecting binaries with Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-11-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/12/inspecting-binaries-with-jenkins/" />
<author>
<name>michaelhuettermann</name>
</author>
<category term="devops"></category>
<category term="devsecops"></category>
<category term="security"></category>
<category term="vulnerabilities"></category>
<category term="compliance"></category>
<category term="twistlock"></category>
<summary>
This is a guest post by Michael Hüttermann.






In a past blog post,
Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory,
we talked about pipelines which result in binaries for development versions, and in
Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production,
we examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates
and bringing this together with the handling of Docker images.


Use case: Foster security on given, containerized business application


Security is an overloaded term with varying meaning in different contexts. For this contribution,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/michaelhuettermann&quot;&gt;Michael Hüttermann&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a past blog post,
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2017/04/18/continuousdelivery-devops-sonarqube/&quot;&gt;Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory&lt;/a&gt;,
we talked about pipelines which result in binaries for development versions, and in
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2017/07/05/continuousdelivery-devops-artifactory/&quot;&gt;Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production&lt;/a&gt;,
we examined ways to consistently promote applications toward production. In this blog post, I continue on both by discussing more details on security related quality gates
and bringing this together with the handling of Docker images.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-case-foster-security-on-given-containerized-business-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-case-foster-security-on-given-containerized-business-application&quot;&gt;&lt;/a&gt;Use case: Foster security on given, containerized business application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Security is an overloaded term with varying meaning in different contexts. For this contribution, I consider security as the sum of rules regarding vulnerabilities
(Common Vulnerability and Exposure, CVE), in binaries. In a past blog post, we’ve identified SonarQube already, as a very helpful tool to identify flaws
in source code, particularly concerning reliability (bugs), vulnerabilities (security, e.g. CWE, that is common weakness enumaration, and OWASP, that is the Open Web Application Security Project), and
maintainability (code smells). Now it is a good time to add another tool to the chain, that is Twistlock, for inspection binaries for security issues.
Features of Twistlock include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compliance and vulnerability management, transitively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime defense&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud-native CI/CD support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broad coverage of supported artifact types and platforms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API, dashboards, and Jenkins integration, with strong configuration options&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The underlying use case can be derived from several real-world security initiatives, in enterprises, based on given containerized applications. In practice, it is not a surprise that after adding such new
quality gates, you identify historically grown issues. However, there are many good reasons to do so. You don’t need any Word documents to check any governance criteria manually, rather
execution and reporting are done automatically and also part of the actions are taken automatically. And above all, of course, your application is quality assured regarding known vulnerability issues, aligned with
the DevOps approach: development is interested in quick feedback whether their change would introduce any vulnerabilities, and operations is interested in insights whether and
how running applications are affected if a new CVE is discovered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The term DevSecOps was coined to explicitely add security concerns to DevOps.
In my opinion, security is already inherent part of DevOps.
Thus, there is no strong reason to introduce a new word. Surely, new words are catchy.
But they have limits.
Or have you ever experienced NoDev, the variant of DevOps where features are suddenly falling from the sky and deployed to production automatically?&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conceptually, container inspection is now part of the delivery pipeline and Twistlock processing is now triggered once we have produced our Docker images, see below, in order to get
fast feedback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/01.png&quot; alt=&quot;01&quot; title=&quot;The delivery pipeline, failing the quality gate of inspecting Docker image.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software is staged over different environments by configuration, without rebuilding. All changes go through the entire staging process, although defined
exception routines may be in place, for details see Michael Hüttermann, &lt;em&gt;Agile ALM&lt;/em&gt; (Manning, 2012). The staged software consists of all artifacts which
make up the release, consistently, including the business application, test cases, build scripts, Chef cookbooks, Dockerfiles, Jenkins files to build all
that in a self-contained way, for details see Michael Hüttermann, &lt;em&gt;DevOps for Developers&lt;/em&gt; (Apress, 2012).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post covers sample tools. Please note, that there are also alternative tools available, and the best target architecture is aligned with concrete requirements and given basic
conditions. Besides that, the sample toolchain is derived from couple of real world success stories, designed and implemented in the field. However, this blog post
simplifies and abstracts them in order to stay focussed while discussing the primitives of delivery units. For example, aggregating multiple Docker images with ASCII files, does not change the
underlying primitives and their handlings. For more information on all parts of the blog post, please consult the respective documentation, good books or attend fine conferences. Or go to the extremes: talk to your colleagues.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our sample process, we produce a web application that is packaged in a Docker image. The produced Docker images are distributed only if the dedicated quality gate passes.
A quality gate is a stage in the overall pipeline and a sum of defined commitments, often
called requirements, the unit of work must pass. In our case, the quality gate comprises inspection of produced binaries and it fails if vulnerabilities of severity 'critical' are found.
We can configure Twistlock according to our requirements. Have a look how we’ve integrated it into our Jenkins pipeline, with focus on detecting vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile (excerpt): Twistlock inspection triggered&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Twistlock: Analysis&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; version = readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;version.properties&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Scanning for version: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;version&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    twistlockScan &lt;span style=&quot;color:#606&quot;&gt;ca&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;cert&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;compliancePolicy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;critical&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;dockerAddress&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;unix:///var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;ignoreImageBuildTime&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;logLevel&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;policy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;critical&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;\&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        &lt;span style=&quot;color:#606&quot;&gt;requirePackageUpdate&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;timeout&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;
}

stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Twistlock: Publish&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; version = readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;version.properties &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()
    println &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Publishing scan results for version: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;version&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    twistlockPublish &lt;span style=&quot;color:#606&quot;&gt;ca&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;cert&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;dockerAddress&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;unix:///var/run/docker.sock&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;logLevel&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;repository&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;huttermann-docker-local.jfrog.io/michaelhuettermann/alpine-tomcat7&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, \
        &lt;span style=&quot;color:#606&quot;&gt;timeout&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Twistlock inspection as part of the sequence of stages in Jenkinsfile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Nailing down the version of the to be inspected image, dynamically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configuring analysis including vulnerability severity level&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Publishing the inspection results to Twistlock console, that is the dashboard&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let’s start with the first phase to bring our application in shape again, that is gaining insight about the security related flaws.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;phase-1-gain-insights-about-security-related-flaws&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-1-gain-insights-about-security-related-flaws&quot;&gt;&lt;/a&gt;Phase 1: Gain insights about security related flaws&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After we’ve introduced the new quality gate, it failed, see image above. As integration with other tools, Jenkins is the automation engine and does provide helpful context information,
however, those cannot replace features and data the dedicated, triggered tool does offer. Thus, this is the moment to switch to the dedicated tool, that is Twistlock. Opening
the dashboard, we can navigate to the Jenkins build jobs, that is the specific run of the build, and the respective results of the Twistlock analysis. What we see now is a list
of vulnerabilities, and we need to fix those of severity &lt;em&gt;critical&lt;/em&gt; in order to pass the quality gate, and get our changes again toward production. The list shows entries of
type &lt;em&gt;jar&lt;/em&gt;, that is a finding in a binary as part of the Docker image, in our case the WAR file we’ve deployed to a web container (Tomcat), and of type &lt;em&gt;OS&lt;/em&gt;, those are issues of the underlying image itself, the
operating system, either part of the base image, or as a package added/changed in our Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/02.png&quot; alt=&quot;02&quot; title=&quot;Twistlock findings: overview.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now easily zoom in and examine the vulnerabilities of the Docker layers. This really helps to structure work and identify root causes. Since, typically,
a Docker image extends a Docker base image, the findings in the base image are shown on the top, see next screenshot, grouped by severity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/03.png&quot; alt=&quot;03&quot; title=&quot;Twistlock also displays the vulnerabilities according to Docker layers. Findings based on the base image are listed at the top.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other Docker layers were added to the base image, and those can add vulnerabilities too. In our case, the packaged WAR file obviously contains a vulnerability. The next image shows how we examine that finding, while this time
expanding the Twistlock wizard (that is the plus sign) to directly see the list of found vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/04.png&quot; alt=&quot;04&quot; title=&quot;Twistlock recursively inspects embedded binaries auch as the WAR with its libraries. Here the wizard is expanded showing all vulnerabilities of this layer. On the right side, we can move over the different sections of our Dockerfile.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finding and visualizing the issues are a very good first step, and we’ve even made those findings actionable, so we now have to take action and address them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;phase-2-address-the-findings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#phase-2-address-the-findings&quot;&gt;&lt;/a&gt;Phase 2: Address the findings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To address the findings, we need to split our initiative into two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Fixing the critical vulnerabilities related to the Docker image (in our case largely the base image)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixing the critical vulnerabilities related to the embedded deployment unit (in our case the WAR)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s proceed bottom up, first coping with the Docker base image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an easy example covering multiple scenarios particularly identifying and fixing vulnerabilities in transitive binaries, i.e. binaries contained in
other binaries, e.g. a Docker image containing a WAR file that in turn contains libraries. To expand this vertical feasibility spike, you can easily add
more units of each layer, or add more abstractions, however, the idea can always be nailed down to the primitives, covered in this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s now have a look at the used Docker image by looking at the used Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile: The Dockerfile based on Alpine, running OpenJDK 8&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;FROM openjdk:8-jre-alpine &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
LABEL maintainer &quot;michael@huettermann.net&quot;

# Domain of your Artifactory. Any other storage and URI download link works, just change the ADD command, see below.
ARG ARTI
ARG VER

# Expose web port
EXPOSE 8080

# Tomcat Version
ENV TOMCAT_VERSION_MAJOR 9 &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
ENV TOMCAT_VERSION_FULL  9.0.6

# Download, install, housekeeping
RUN apk add --update curl &amp;amp;&amp;amp;\  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  apk add bash &amp;amp;&amp;amp;\
  #apk add -u libx11 &amp;amp;&amp;amp;\  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  mkdir /opt &amp;amp;&amp;amp;\
  curl -LO ${ARTI}/list/generic-local/apache/org/tomcat/tomcat-${TOMCAT_VERSION_MAJOR}/v${TOMCAT_VERSION_FULL}/bin/apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &amp;amp;&amp;amp;\
  gunzip -c apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz | tar -xf - -C /opt &amp;amp;&amp;amp;\
  rm -f apache-tomcat-${TOMCAT_VERSION_FULL}.tar.gz &amp;amp;&amp;amp;\
  ln -s /opt/apache-tomcat-${TOMCAT_VERSION_FULL} /opt/tomcat &amp;amp;&amp;amp;\
  rm -rf /opt/tomcat/webapps/examples /opt/tomcat/webapps/docs &amp;amp;&amp;amp;\
  apk del curl &amp;amp;&amp;amp;\
  rm -rf /var/cache/apk/*

# Download and deploy the Java EE WAR
ADD http://${ARTI}/list/libs-release-local/com/huettermann/web/${VER}/all-${VER}.war /opt/tomcat/webapps/all.war &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;

RUN chmod 755 /opt/tomcat/webapps/*.war

# Set environment
ENV CATALINA_HOME /opt/tomcat

# Start Tomcat on startup
CMD ${CATALINA_HOME}/bin/catalina.sh run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Base image ships OpenJDK 8, on Alpine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Defined version of web container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Applying some defined steps to configure Alpine, according to requirements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Updating package itself would address one vulnerability already&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Deploying the application&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By checking available versions of the official OpenJDK Alpine image, we see that there’s a newer version 8u181 which we could use.
We can zoom in and study release notes and contents, or we just pragmatically switch the base image to a more recent version. Often it is a good idea
to upgrade versions regularly, in defined intervals. This leads to the following change in the Dockerfile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dockerfile (excerpt): The Dockerfile based on Alpine, running OpenJDK 8u181&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;FROM openjdk:8u181-jre-alpine &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
LABEL maintainer &quot;michael@huettermann.net&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Base image is now OpenJDK 8u181, on Alpine&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more options available to fix the issues, but let’s proceed to the second part, the vulnerabilities in the deployment unit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we push this change to GitHub, we also address the vulnerability issue in the deployment unit, that is &lt;em&gt;jetty-io&lt;/em&gt;. Here we are a bit unsure about
why, in this specific use case, the library is used. To retrieve more information about dependencies, we run a &lt;em&gt;dependency:tree&lt;/em&gt; command on our Maven
based project. We now see that jetty-io is transitively referenced by &lt;em&gt;org.seleniumhq.selenium:htmlunit-driver&lt;/em&gt;. We can surely discuss why this is a compile
dependency and the libraries are shipped as part of the WAR, but let’s consider this to be given according to requirements, thus we must take special attention now
to version 2.29.0 of the specific library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/05.png&quot; alt=&quot;05&quot; title=&quot;Inspecting the dependency structure, with the used build tool&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also here we can browse release notes and content (particularly how those libs are built themselves), and come to the conclusion to
switch from the used version, that is &lt;em&gt;2.29.0&lt;/em&gt;, to a newer version of &lt;em&gt;htmlunit-driver&lt;/em&gt;, that is &lt;em&gt;2.31.1&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml (excerpt): Build file&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;    &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;selenium-java&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.14.0&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.seleniumhq.selenium&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;htmlunit-driver&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.31.1&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;junit&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;junit&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.7&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Part of the underlying POM defining dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Definition of the dependency, causing the vulnerability finding; we use a newer version now&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OK, now we are done. We push the changes to GitHub, and our GitHub webhook directly triggers the workflow. This time the quality gate passes, so it
looks like our fixes did address the root causes and eliminated those with the configured threshold severity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/06.png&quot; alt=&quot;06&quot; title=&quot;Part of the delivery pipeline, showing the quality gate passed and Docker image inspected without findings of severity CRITICAL&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, after running through our entire workflow, that is made up of different pipelines, our inspected and quality assured container does successfully
run in our production runtime environment, that is on Oracle Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/jenkins-devsecops/07.png&quot; alt=&quot;07&quot; title=&quot;The quality assured Docker container runs in the Oracle Cloud.&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Crisp, isn’t it?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This closes our quick walkthrough of how to inject security related quality gates into a Jenkins based delivery pipeline.
We’ve discussed some concepts and how this can look like with sample tools.
In the center of our efforts, we used Jenkins, the swiss army knife of automation.
We enriched our ecosystem by integrating couple of platforms and tools, above all Twistlock.
After this tasty appetizer you are ready to assess your own delivery pipelines,
concepts and tools, and to possibly invest even more attention to security.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://huettermann.net/alm/&quot;&gt;'Agile ALM', Manning, 2011&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://huettermann.net/devops/&quot;&gt;'DevOps for Developers', Apress, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker, the standard to develop and ship set of changes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/openjdk/&quot;&gt;Docker images, shipping OpenJDK&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.oracle.com/en_US/containers&quot;&gt;Oracle Cloud Infrastructure, for containers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;SonarQube, the language/platform agnostic Continuous Inspection tool&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.twistlock.com/&quot;&gt;Twistlock, the container security platform&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michaelhuettermann/sandbox/tree/master/all/&quot;&gt;Sources on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange&quot;&gt;ASCII, commonly used standard to work on primitives, such as Docker (and their aggregations)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures&quot;&gt;Common Vulnerabilities and Exposures&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/jBGFjFc6Jf8?t=1427&quot;&gt;Holistic pipelines, Live 15-minute Jenkins Demos, Part 1, on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/rS_pchiwGdM?t=95&quot;&gt;Holistic pipelines, Live 15-minute Jenkins Demos, Part 2, on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2017/04/18/continuousdelivery-devops-sonarqube/&quot;&gt;Delivery Pipelines, with Jenkins 2, SonarQube, and Artifactory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2017/07/05/continuousdelivery-devops-artifactory/&quot;&gt;Delivery pipelines, with Jenkins 2: how to promote Java EE and Docker binaries toward production&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/07/Validate-Jenkinsfile/</id>
<title>Validate your Jenkinsfile from within VS Code</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-11-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/11/07/Validate-Jenkinsfile/" />
<author>
<name>janjoerke</name>
</author>
<category term="jenkinsfile"></category>
<category term="validation"></category>
<category term="vscode"></category>
<category term="pipeline"></category>
<category term="pipeline authoring"></category>
<category term="development"></category>
<summary>
In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.


The Command-line Pipeline Linter (https://jenkins.io/doc/book/pipeline/development/) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my daily work I often have to create or modify Jenkinsfiles and more often than I would like, I make mistakes. It is a very tedious workflow when you make a change to your Jenkinsfile, create a commit, push the commit and wait for your Jenkins Server to tell you, that you have missed a bracket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Command-line Pipeline Linter (&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/development/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/doc/book/pipeline/development/&lt;/a&gt;) does a great job of reducing the turnaround times when writing a Jenkinsfile, but its usage has its own inconveniences. You need tools like curl or ssh to make a connection to your Jenkins Server and you need to remember the correct command to validate your Jenkinsfile. I still did not like the solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As VS Code is my daily driver, I started to look at writing extensions for it and out of it came a little extension which makes validating Jenkinsfiles just a little bit more comfortable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What the 'Jenkins Pipeline Linter Connector' does is, that it takes the file that you have currently opened, pushes it to your Jenkins Server and displays the validation result in VS Code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/vscode-pipeline-linter/example1.gif&quot; alt=&quot;Jenkins Pipeline Linter Connector | Example 1&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/vscode-pipeline-linter/example2.gif&quot; alt=&quot;Jenkins Pipeline Linter Connector | Example 2&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;​You can find the extension from within the VS Code extension browser or at the following url: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector&quot; class=&quot;bare&quot;&gt;https://marketplace.visualstudio.com/items?itemName=janjoerke.jenkins-pipeline-linter-connector&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension adds four settings entries to VS Code which you have to use to configure the Jenkins Server you want to use for validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.url&lt;/code&gt; is the endpoint at which your Jenkins Server expects the POST request, containing your Jenkinsfile which you want to validate. Typically this points to &lt;em&gt;&lt;a href=&quot;http://&amp;lt;your_jenkins_server:port&amp;gt;/pipeline-model-converter/validate&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your_jenkins_server:port&amp;gt;/pipeline-model-converter/validate&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.user&lt;/code&gt; allows you to specify your Jenkins username.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.pass&lt;/code&gt; allows you to specify your Jenkins password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jenkins.pipeline.linter.connector.crumbUrl&lt;/code&gt; has to be specified if your Jenkins Server has CRSF protection enabled. Typically this points to &lt;em&gt;&lt;a href=&quot;http://&amp;lt;your_jenkins_server:port&amp;gt;/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb&quot; class=&quot;bare&quot;&gt;http://&amp;lt;your_jenkins_server:port&amp;gt;/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,%22:%22,//crumb&lt;/a&gt;)&lt;/em&gt;.
​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/18/contributor-summit-summary/</id>
<title>What to Expect at the Jenkins Contributor Summit</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/18/contributor-summit-summary/" />
<author>
<name>tracymiranda</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="jenkins-world"></category>
<summary>
The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before Jenkins World.
What should those planning on joining expect at the event?
Earlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.
First of all it was one of the biggest contributor summits ever with lots of first-time attendees.


Morning


There are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.
One of the most...
</summary>
<content type="html">
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/conferences/contributor_summit_kk.jpg&quot; alt=&quot;Contributor Summit - Morning&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.cloudbees.com/devops-world&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/conferences/devops-world-2018.jpg&quot; alt=&quot;DevOps World | Jenkins World 2018&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins Contributor summit is where the current and future contributors of the Jenkins project get together.
This summit will be on Tuesday, October 23rd 2018 in Nice, France just before &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;Jenkins World&lt;/a&gt;.
What should those planning on joining expect at the event?
Earlier this year in September we had a contributor summit in San Francisco which gave us a pretty good outline of what to expect.
First of all it was one of the biggest contributor summits ever with lots of first-time attendees.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;morning&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#morning&quot;&gt;&lt;/a&gt;Morning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are plenty of exciting developments happening in the Jenkins community, which meant there was a packed program.
One of the most anticipated updates was Kohsuke Kawaguchi speaking about &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/08/31/shifting-gears&quot;&gt;Jenkins Shifting Gears&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were also updates on the '5 Jenkins Superpower' projects in active development:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/04/06/jenkins-essentials&quot;&gt;Jenkins Evergreen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.praqma.com/stories/jenkins-configuration-as-code&quot;&gt;Configuration as Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/book/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/cloud-native&quot;&gt;Cloud Native Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As ever Jenkins is a community driven by its members so it was also great to get an update on &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;birds-of-a-feather-bof&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#birds-of-a-feather-bof&quot;&gt;&lt;/a&gt;Birds-of-a-feather (BoF)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a packed morning of updates, it was time for a break and some lunch.
After lunch attendees divided up into groups and gathered around tables for unconference style discussions of specific areas.
Each table ran differently: some had demos, some did presentations, some hacked on code and others brainstormed ideas.
There was definitely alot of energy in the room and huge exchange of ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ignite-talks-wrap-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ignite-talks-wrap-up&quot;&gt;&lt;/a&gt;Ignite Talks &amp;amp; Wrap-up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To finish off the session we had a set of ignite talks.
Attendees were invited to volunteer on the day - no easy task given the pressure involved- and many did.
Hats off to Liam Newman, Mandy Hubbard, Eric Smalling, Pui Chee Chan, Martin d’Anjou and Vishal Raina for getting out of their comfort zone and doing talks.
There were two surprise ignite talks, one for James Strachan and one for Kohsuke Kawaguchi which were highly entertaining gave the audience lots of laughs.
Someone even captured KK’s talk on video.  The sound isn’t great but it was a truly visionary talk:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe width=&quot;640&quot; src=&quot;https://www.youtube.com/embed/egFrqmENGDE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally the event finished with swag presentations and a fun Kahoot quiz to wrap things up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributor-appreciation-event&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-appreciation-event&quot;&gt;&lt;/a&gt;Contributor Appreciation Event&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the summit, contributors were invited to join at the after party at Spin.
Spin was a unique venue in San Francisco where attendees could socialise and also play ping-pong!
While some took it seriously most enjoyed the relaxed way to get to know their fellow contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/conferences/contributor_summit_sf.jpg&quot; alt=&quot;contributor summit sf&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;see-you-in-nice&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#see-you-in-nice&quot;&gt;&lt;/a&gt;See you in Nice&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The event was a lot of fun and the contributor summit in Nice will follow a very similar structure.
All levels of contributor are welcome, there will be lots of opportunity for in-depth discussions and you can even do an ignite talk!
While we won’t be repeating the ping pong event there will be something equally unique to follow on from the summit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attending is free, and no DevOps World | Jenkins World ticket is needed, but &lt;a href=&quot;https://www.eventbrite.com/e/contributor-summit-nice-tickets-48353733318&quot;&gt;RSVP&lt;/a&gt; if you are going to attend to help us plan.
See you there!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As long as you’re in Nice for the Contributor Summit,
join Tracy, Kohsuke, and hundreds of other Jenkins users at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World&lt;/a&gt; on October 22-25.
Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/16/custom-war-packager/</id>
<title>Build your own Jenkins! Introducing Custom WAR/Docker Packager</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/16/custom-war-packager/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="tools"></category>
<category term="docker"></category>
<category term="jenkins-x"></category>
<category term="cloud-native"></category>
<summary>
I would like to introduce Custom WAR Packager -
a new tool for Jenkins administrators and developers.
This tool allows packaging custom Jenkins distributions as WAR files,
Docker images
and Jenkinsfile Runner bundles.
This tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.
Custom WAR packager is a part of the Ephemeral Jenkins master toolchain
which we presented in our A Cloud Native Jenkins blogpost.
This toolchain is already used in Jenkins X to package serverless images.


In this blogpost I will show some common use-cases for Custom WAR Packager.


History


As with Jenkins itself, Custom WAR Packager started as a small development tool.
For a long time it was...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to introduce &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager&quot;&gt;Custom WAR Packager&lt;/a&gt; -
a new tool for Jenkins administrators and developers.
This tool allows packaging custom Jenkins distributions as WAR files,
&lt;a href=&quot;https://github.com/jenkinsci/docker&quot;&gt;Docker images&lt;/a&gt;
and &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile Runner&lt;/a&gt; bundles.
This tool allows packaging Jenkins, plugins, and configurations in a ready-to-fly distribution.
Custom WAR packager is a part of the Ephemeral Jenkins master toolchain
which we presented in our &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/09/12/speaker-blog-a-cloud-native-jenkins/&quot;&gt;A Cloud Native Jenkins&lt;/a&gt; blogpost.
This toolchain is already used in &lt;a href=&quot;https://jenkins-x.io&quot;&gt;Jenkins X&lt;/a&gt; to package &lt;a href=&quot;https://github.com/jenkins-x/jenkins-x-serverless&quot;&gt;serverless images&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blogpost I will show some common use-cases for Custom WAR Packager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;history&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#history&quot;&gt;&lt;/a&gt;History&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with Jenkins itself, Custom WAR Packager started as a small development tool.
For a long time it was a problem to run integration testing in Jenkins.
We have 3 main frameworks for it:
    &lt;a href=&quot;https://github.com/jenkinsci/jenkins-test-harness&quot;&gt;Jenkins Test Harness&lt;/a&gt;,
    &lt;a href=&quot;https://github.com/jenkinsci/acceptance-test-harness&quot;&gt;Acceptance Test Harness&lt;/a&gt;,
    and &lt;a href=&quot;https://github.com/jenkinsci/plugin-compat-tester&quot;&gt;Plugin Compatibility Tester&lt;/a&gt;.
All these frameworks require a Jenkins WAR file to be passed to them to run tests.
What if you want to run Jenkins tests in a custom environment like AWS?
Or what if you want to reuse existing Jenkins Pipeline tests and to run them against
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/cloud-native/pluggable-storage/&quot;&gt;Pluggable Storage&lt;/a&gt; to ensure there are no regressions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And it was not just an idle question.
There were major activities happening in the Jenkins project: Cloud-Native Jenkins, Jenkins Evergreen, and Jenkins X.
All these activities required a lot of integration testing  to enable Continuous Delivery flows.
In order to do this in existing test frameworks, we needed to package a self-configuring WAR file so that it would be possible to run integration tests in existing frameworks.
That is why Custom WAR Packager was created in April 2018.
Later it got support for packaging Docker images,
and in September 2018 it also got support for Jenkinsfile Runner
which was created by &lt;a href=&quot;https://github.com/kohsuke/&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;
and then improved by &lt;a href=&quot;https://github.com/ndeloof&quot;&gt;Nicolas de Loof&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-inside&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-inside&quot;&gt;&lt;/a&gt;What’s inside?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Custom WAR packager is a tool which is available as CLI Executable, Maven Plugin, or Docker package.
This tool takes input definitions and packages them as requested by the user.
Everything is managed by a YAML configuration file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2018-10-16-cwp/cwp_flow.png&quot; alt=&quot;Custom WAR Packager build flow&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tool supports various types of inputs.
The list of plugins can be passed via YAML itself, &lt;code&gt;pom.xml&lt;/code&gt;, or a BOM file from &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/309/README.adoc&quot;&gt;JEP-309&lt;/a&gt;.
Custom WAR Packager supports not only released versions,
but also builds deployed to the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/05/15/incremental-deployment/&quot;&gt;Incremental repository&lt;/a&gt; (CD flow for Jenkins core and plugins - &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/305/README.adoc&quot;&gt;JEP-305&lt;/a&gt;) and
even direct builds by Git or directory path specifications.
It allows building packages from any source, without waiting for official releases.
The builds are also pretty fast, because the plugin does caching in the local Maven repository by using commit IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Custom WAR packager also supports the following self-configuration options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;YAML files for &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Jenkins Configuration as Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Groovy+Hook+Script&quot;&gt;Groovy Hooks&lt;/a&gt; (e.g. init hooks for pre-configuration)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System properties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;war-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#war-packaging&quot;&gt;&lt;/a&gt;WAR Packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WAR packaging happens by default every time the repo is built.
Generally Custom WAR Packager repackages all inputs into a single WAR file by following conventions defined in the Jenkins core and the JCasC plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sample configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#606&quot;&gt;bundle&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins.tools.war-packager.demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;blogpost-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;vendor&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Jenkins project&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Just a demo for the blogpost&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;war&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;org.jenkins-ci.main&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins-war&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;2.138.2&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;plugins&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;io.jenkins&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;configuration-as-code&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Common release&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.0-rc2&lt;/span&gt;&lt;/span&gt;
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;io.jenkins&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;artifact-manager-s3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Incrementals&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;version&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.2-rc259.c9d60bf2f88c&lt;/span&gt;&lt;/span&gt;
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;groupId: &quot;org.jenkins-ci.plugins.workflow&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;workflow-job&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#777&quot;&gt;# Git&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;git&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/jglick/workflow-job-plugin.git&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;commit&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;18d78f305a4526af9cdf3a7b68eb9caf97c7cfbc&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# etc.&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;systemProperties&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;jenkins.model.Jenkins.slaveAgentPort&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;9000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;jenkins.model.Jenkins.slaveAgentPortEnforce&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;groovyHooks&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;type: &quot;init&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;id&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;initScripts&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;dir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;src/main/groovy&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#606&quot;&gt;casc&lt;/span&gt;:
  - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;id: &quot;jcasc&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;dir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;casc.yml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#docker-packaging&quot;&gt;&lt;/a&gt;Docker packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to do the Docker packaging, Custom WAR Packager uses the official
&lt;a href=&quot;https://hub.docker.com/r/jenkins/jenkins/&quot;&gt;jenkins/jenkins&lt;/a&gt;
Docker images or other images using the same format.
During the build the WAR file just gets replaced by the one built by the tool.
It means that &lt;strong&gt;ALL&lt;/strong&gt; image features are available for such custom builds: &lt;code&gt;plugins.txt&lt;/code&gt;, Java options, Groovy hooks, etc., etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;## ...&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## WAR configuration from above&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## ...&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;buildSettings&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;docker&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;# Base image&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;base&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/jenkins:2.138.2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;# Tag to set for the produced image&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/custom-war-packager-casc-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/tree/master/demo/external-logging-elasticsearch&quot;&gt;this demo&lt;/a&gt;
shows packaging of a Docker image with External Build Logging to Elasticsearch.
Although the implementations have been improved as a part of &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/207/README.adoc&quot;&gt;JEP-207&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkinsci/jep/blob/master/jep/210/README.adoc&quot;&gt;JEP-210&lt;/a&gt;,
you can check out this demo to see how the Docker image does self-configuration, connects to a Elasicsearch, and then starts externally storing logs without changes in build log UIs.
A Docker Compose file for running the entire cluster is included.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkinsfile-runner-packaging&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkinsfile-runner-packaging&quot;&gt;&lt;/a&gt;Jenkinsfile Runner packaging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is probably the most tricky mode of Jenkinsfile Runner.
In March a new &lt;a href=&quot;https://github.com/jenkinsci/jenkinsfile-runner&quot;&gt;Jenkinsfile Runner&lt;/a&gt; project
&lt;a href=&quot;https://groups.google.com/d/msg/jenkinsci-dev/gjz3CDhi-kk/1mwi_oa0AQAJ&quot;&gt;was announced&lt;/a&gt; in the developer mailing list.
The main idea is to support running Jenkins Pipeline in a single-shot master mode when the instance just executes a single run and prints outputs to the console.
Jenkinsfile Runner runs as CLI or as a Docker image.
Custom WAR Packager is able to produce both, though only Docker run mode is recommended.
With Jenkinsfile Runner you can run Pipelines simply as…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;sh&quot;&gt;docker run --rm -v $PWD/Jenkinsfile:/workspace/Jenkinsfile acmeorg/jenkinsfile-runner&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we started working on Ephemeral (aka &quot;single-shot&quot;) masters in the Cloud Native SIG,
there was an idea to use Custom WAR Packager and other existing tools (Jenkinsfile Runner, Jenkins Configuration as Code, etc.) to implement it.
It would be possible to just replace Jenkins core JAR and add plugins to Jenkinsfile Runner, but it is not enough.
To be efficient, Jenkinsfile Runner images should start up &lt;strong&gt;FAST&lt;/strong&gt;, really fast.
In the build flow implementation we used some experimental options available in Jenkins and Jenkinsfile Runner, including classloader precaching, plugin unarchiving, etc, etc.
With such patches Jenkins starts up in few seconds with configuration-as-code and dozens of bundled plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how to build custom Jenkinsfile Runner images?
Although there is no release so far, it is not something which can stop us as you see above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;##...&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;## WAR Configuration from above&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;##...&lt;/span&gt;

&lt;span style=&quot;color:#606&quot;&gt;buildSettings&lt;/span&gt;:
  &lt;span style=&quot;color:#606&quot;&gt;jenkinsfileRunner&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;groupId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;io.jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;artifactId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkinsfile-runner&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;:
        &lt;span style=&quot;color:#606&quot;&gt;noCache&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;source&lt;/span&gt;:
        &lt;span style=&quot;color:#606&quot;&gt;git&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/jenkinsci/jenkinsfile-runner.git&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#606&quot;&gt;commit&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;8ff9b1e9a097e629c5fbffca9a3d69750097ecc4&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;docker&lt;/span&gt;:
      &lt;span style=&quot;color:#606&quot;&gt;base&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins/jenkins:2.138.2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;tag&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;onenashev/cwp-jenkinsfile-runner-demo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;build&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find a Demo of Jenkinsfile Runner packaging with Custom WAR Packager
&lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/tree/master/demo/jenkinsfile-runner&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;more-info&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-info&quot;&gt;&lt;/a&gt;More info&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many other features which are not described in this blogpost.
For example, it is possible to alter Maven build settings or to add/replace libraries within the Jenkins core (e.g. Remoting).
Please see the &lt;a href=&quot;https://github.com/jenkinsci/custom-war-packager/blob/master/README.md&quot;&gt;Custom WAR Packager documentation&lt;/a&gt; for more information.
There are a number of demos available in the repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested to contribute to the repository,
please create pull requests and CC &lt;a href=&quot;https://github.com/oleg-nenashev/&quot;&gt;@oleg-nenashev&lt;/a&gt;
and &lt;a href=&quot;https://github.com/raul-arabaolaza&quot;&gt;Raul Arabaolaza&lt;/a&gt; who is the second maintainer now working on Jenkins test automation flows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are still many improvements that could be made to the tool to make it more efficient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add upper bounds checks for transitive plugin dependencies so that the conflicts are discovered during the build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow passing all kinds of system properties and Java options via configuration YAML&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improve Jenkinsfile Runner to improve performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrate the tool into Jenkins Integration test flows
(see &lt;a href=&quot;https://github.com/jenkins-infra/pipeline-library/blob/master/vars/essentialsTest.groovy&quot;&gt;essentialsTest()&lt;/a&gt;
 in the Jenkins Pipeline library)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many other tasks could be implemented in Custom WAR Packager,
but even now it is available to all Jenkins users so that they can build their own Jenkins bundles with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;want-to-know-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-know-more&quot;&gt;&lt;/a&gt;Want to know more?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are going to &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World in Nice&lt;/a&gt; on Oct 22-25,
I will be presenting Custom WAR Packager at the Community Booth during the lunch demo sessions.
We will be also repeating our &lt;a href=&quot;https://sched.co/FIox&quot;&gt;A Cloud Native Jenkins&lt;/a&gt; talk together with Carlos Sanchez where we will show how Ephemeral Jenkins works with Pluggable Storage.
Jenkins X team is also going to present their project using Custom WAR Packager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Come meet Oleg and other Cloud Native SIG members at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World&lt;/a&gt; on October 22-25 in Nice.
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 30% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/14/gsoc2018-results/</id>
<title>Jenkins in Google Summer of Code 2018 Results</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/14/gsoc2018-results/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="community"></category>
<category term="events"></category>
<category term="gsoc"></category>
<category term="gsoc2018"></category>
<summary>
It has been a while since the last blogpost about Google Summer of Code in Jenkins.
GSoC 2018 has officially finished on August 23, and we had a Jenkins Online Meetup where we had final presentations of the GSoC projects.
It is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in Jenkins GSoC Special Interest Group over last 2 months.
In this blogpost you can find project status overviews and updates from the Jenkins GSoC SIG.


But first of all, I would like to thank all our students, their mentors
and to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right center&quot;&gt;&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/gsoc/jenkins-gsoc-logo_small.png&quot; alt=&quot;Jenkins GSoC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been a while since the last blogpost about &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; in Jenkins.
GSoC 2018 has officially finished on August 23, and we had a &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/253577758/&quot;&gt;Jenkins Online Meetup&lt;/a&gt; where we had final presentations of the GSoC projects.
It is never late to provide more context, so I would like to summarize the results and provide updates of what was happening in &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/gsoc&quot;&gt;Jenkins GSoC Special Interest Group&lt;/a&gt; over last 2 months.
In this blogpost you can find project status overviews and updates from the Jenkins &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/gsoc&quot;&gt;GSoC SIG&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But first of all, I would like to thank all our students, their mentors
and to all other contributors who proposed project ideas, participated in student selection, community bonding and further reviews.
Google Summer of Code is a major effort which would not be possible without active participation of the Jenkins community&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year we started preparing for Google Summer of Code in early December.
14 project ideas and 12 potential mentors we published on our website,
and we got dozens of students reaching out to us during the application period.
After processing applications, we have selected 4 applications for GSoC.
Unfortunately one project got cancelled due to student eligibility issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we had the following projects:
Code Coverage API plugin, Remoting over Apache Kafka, and Simple Pull-Request Job Plugin
(also known as &lt;em&gt;Pipeline as YAML&lt;/em&gt;).
All these projects have a significant value to the Jenkins community.
They were focused on areas which have been discussed in the community for a long time,
but which had no progress so far.
Google Summer of Code allowed us to kick-start these projects,
and to make significant progress there.
All projects have been released and made available in the Jenkins community (common or experimental update centers).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In total there were 9 blogposts about GSoC projects on jenkins.io,
and also 2 &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup&quot;&gt;Jenkins Online Meetups&lt;/a&gt;.
GSoC results have been also presented at DevOps World - Jenkins World conference and the contributor summit.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
  &lt;iframe src=&quot;https://docs.google.com/presentation/d/1YiN4nbc_uIt6L7iZ6VckF8sCPBAp1dqBkFexM7uAuiQ/embed?start=false&amp;amp;loop=false&amp;amp;delayms=60000&quot; frameborder=&quot;0&quot; width=&quot;720&quot; height=&quot;434&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;code-coverage-api-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-coverage-api-plugin&quot;&gt;&lt;/a&gt;Code Coverage API Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/cizezsy&quot;&gt;Shenyu Zheng&lt;/a&gt;, Henan University, China&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/jeffpearce&quot;&gt;Jeff Pearce&lt;/a&gt;,
&lt;a href=&quot;https://github.com/christ66&quot;&gt;Steven Christou&lt;/a&gt;,
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Supun94&quot;&gt;Supun Wanniarachchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2018/code-coverage-api-plugin/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are many code coverage plugins in Jenkins: Cobertura, JaCoCo, Emma, etc., etc.
The problem with these plugins is that each of them implements all code coverage features on their own.
So you get different feature sets, UIs, CLI commands and REST APIs.
The idea of this project was to unify the existing functionality and offer a new API plugin which other plugins could extend.
It would help to simplify existing plugin and to create new plugins for coverage tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The project has started really well, and we had the first demo after a week of coding.
Then Shenyu continued extending the plugin’s functionality over coding periods.
Here is the list of the key features offered by the plugin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flexible data structure for defining and storing coverage metrics within Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coverage charts and trends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code navigation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REST API for retrieving coverage stats and trends&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report aggregation for parallel steps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extension points which allow integrating other plugins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the Code Coverage API Plugin,
Shenyu added integration to the &lt;a href=&quot;https://plugins.jenkins.io/cobertura&quot;&gt;Cobertura Plugin&lt;/a&gt; and also created a new &lt;a href=&quot;https://github.com/jenkinsci/llvm-cov-plugin&quot;&gt;llvm-cov plugin&lt;/a&gt; which is expected to be released soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After GSoC Shenyu continued contributing to the Jenkins project.
He works on the Code Coverage API plugin and also participates in the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/chinese-localization/&quot;&gt;Chinese Localization SIG&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;simple-pull-request-job-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-pull-request-job-plugin&quot;&gt;&lt;/a&gt;Simple Pull-Request Job Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/gautamabhishek46/&quot;&gt;Abhishek Gautam&lt;/a&gt;, Visvesvaraya National Institute of technology, India&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Jeff-Symphony&quot;&gt;Jeff Knurek&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kwhetstone&quot;&gt;Kristin Whetstone&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2018/simple-pull-request-job-plugin/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project focused on introducing a way to
easily define pull-request build job definitions in YAML.
This project has been shaped a lot during the application period and community bonding,
so that the project fit the existing Jenkins Ecosystem better.
Finally it was decided to build the new plugin on the top of &lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline: Multi-Branch Plugin&lt;/a&gt;.
There was also an idea to offer extra syntax sugar, templating and automatic resolution for common flows,
so that users need less time to define Pipelines for common use-cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin allows defining Pipeline jobs as YAML being stored in SCM.
Original design presumed a new job type,
but during community bonding and Phase 1 prototyping it was decided to build the plugin on the top of the existing Pipeline ecosystem and extension points.
Currently the plugin generates Declarative Pipeline code from YAML so that it gets a lot of Pipeline features out-of-the box.
In addition to that, Simple Pull Request Job Plugin uses a an engine provided by the &lt;a href=&quot;https://github.com/jenkinsci/configuration-as-code-plugin&quot;&gt;Configuration as Code plugin&lt;/a&gt; to convert YAML snippets
to Pipeline step definitions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin has been well described by Abhishek in his &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/08/14/simple-pull-request-plugin-final-evaluation/&quot;&gt;Pipeline as YAML&lt;/a&gt; blogpost in August.
Currently it is available in the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/developer/publishing/releasing-experimental-updates/&quot;&gt;Experimental Update Center&lt;/a&gt; as an alpha version.
Pham Vu Tuan, one of our GSoC students, have also joined the plugin team.
At the DevOps World - Jenkins World hackfest we had discussions with the Jenkins Pipeline team,
and we have a plan towards making this plugin available as an Incubated Pipeline project.
The final implementation may change,
but in any case the project gave us a working prototype and a lot of information about  obstacles we need to resolve.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;remoting-over-apache-kafka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remoting-over-apache-kafka&quot;&gt;&lt;/a&gt;Remoting over Apache Kafka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Student: &lt;a href=&quot;https://github.com/pvtuan10&quot;&gt;Pham Vu Tuan&lt;/a&gt;, Nanyang Technological University, Singapore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mentors:
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/Supun94&quot;&gt;Supun Wanniarachchi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/gsoc/2018/remoting-over-message-bus/&quot;&gt;Project page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last but not least, Remoting over Kafka is another challenging project we had.
To implement communication between its masters and agents, Jenkins widely uses home-grown protocol implementations based on TCP
(&lt;a href=&quot;https://github.com/jenkinsci/remoting/blob/master/docs/protocols.md&quot;&gt;JNLP 1..4 protocols&lt;/a&gt;).
There are some performance and stability implementations,
and there have been discussions about using an industry-standard message bus or queue.
Pham Vu Tuan proposed to use Apache Kafka for it,
and after some experiments during community bonding and first coding phase we agreed to go forward with this implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During his project Vu Tuan extended Jenkins Core and Remoting to allow implementing an agent communication channel in a plugin.
Then he has created a new &lt;a href=&quot;https://plugins.jenkins.io/remoting-kafka&quot;&gt;Remoting over Kafka plugin&lt;/a&gt;
which is now available in the main Jenkins Update cente.
Once the plugin is installed, it is possible to connect to agents over Apache Kafka and execute all types of Jenkins jobs there.
There are also official &lt;a href=&quot;https://hub.docker.com/r/jenkins/remoting-kafka-agent/&quot;&gt;jenkins/remoting-kafka-agent&lt;/a&gt; images available on DockerHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vu Tuan continued contributing to the Jenkins project after GSoC, currently he maintains the Remoting over Kafka plugin.
He visited the &lt;a href=&quot;https://www.cloudbees.com/devops-world/san-francisco&quot;&gt;DevOps World - Jenkins World US&lt;/a&gt; conference in September, presented his GSoC project at the
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/07/25/contributor-summit/&quot;&gt;Jenkins Contributor Summit&lt;/a&gt;.
You can find his slides &lt;a href=&quot;https://docs.google.com/presentation/d/1drRIDNvDKdBE-VuuLFXlWRB0NhSFr1aWrg2p8qrF3co/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.
After the conference he also participated in the hackfest where he helped to migrate Jenkins' DNS services to Microsoft Azure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-could-we-do-better&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-could-we-do-better&quot;&gt;&lt;/a&gt;What could we do better?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the end of GSoC we had a &lt;a href=&quot;https://docs.google.com/document/d/1sJ9KIYHUoFWWE9HmoZC7HPDxm2i3uMFGQ2KKZ_1TTjk/edit?usp=sharing&quot;&gt;Retrospective&lt;/a&gt; with GSoC students and mentors.
We discussed the issues we encountered during the projects,
and ways to improve the student and mentor experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Main takeaways for us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GSoC projects should be aligned with &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs&quot;&gt;Jenkins Special Interest Groups (SIGs)&lt;/a&gt; or &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects&quot;&gt;subprojects&lt;/a&gt; in order to get a wider list of stakeholders
Projects should be aligned with SIG priorities when possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to GSoC SIG meetings and Jenkins Online Meetups during student evaluation,
we should also run regular status updates within SIGs so that there more contributors involved in projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should invest more time into forming mentor teams before the application period starts.
This year there were changes in mentor teams after the community bonding started, and it complicated the work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should pay more attention to student eligibility.
This year we started from 4 projects, but unfortunately one project (EDA plugins for Jenkins) got cancelled due to the visa limitations the student had.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should do regular office hours for mentors/students so that it is possible to exchange information between GSoC projects within the organization.
This year we cancelled them at the end of phase and relied only on regular project meetings and mailing lists, but this is not enough.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me personally the main takeaway is also to reduce direct involvement into the project as a mentor and technical advisor.
Doing org administration, logistics and mentorship is not good from a bus factor PoV,
and I believe I was pushing my vision too hard in few cases.
Will do my best to prevent it next year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to share your feedback and ideas,
please reach out to us using the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;GSoC mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-next&quot;&gt;&lt;/a&gt;What’s next?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to improve GSoC organization in Jenkins,
we have have created a &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs/gsoc&quot;&gt;GSoC Special Interest Group&lt;/a&gt; which will be running non-stop as other SIGs in Jenkins.
The objective of the SIG is to organize GSoC, work with potential students/mentors,
and to help students stay involved in the community after GSoC ends.
In this SIG we will have monthly meetings to sync-up on GSoC.
If you are interested to contribute, please join the SIG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to the &lt;a href=&quot;https://docs.google.com/document/d/1sJ9KIYHUoFWWE9HmoZC7HPDxm2i3uMFGQ2KKZ_1TTjk/edit?usp=sharing&quot;&gt;Retrospective&lt;/a&gt;, next year we plan to invest more
into communication with mentors.
We will also try to tie new project proposals to Jenkins
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/sigs&quot;&gt;Special Interest Groups&lt;/a&gt; so that the students become a part
of ongoing coordinated efforts.
This weekend Martin d’Anjou, Jeff Pearce and me are participating in the GSoC Mentor summit to share experiences and to study from other GSoC organizations.
On October 17 we will have a GSoC SIG meeting to discuss our experience and to discuss next steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that,
Jenkins Google Summer of Code will be presented at &lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World Nice&lt;/a&gt; and at the contributor summit.
If you plan to visit the conference and you are interested to participate in Google Summer of Code and other community activities,
please join us at the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/08/21/contributor-summit-nice/&quot;&gt;contributor summit&lt;/a&gt; or stop by at the community booth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And, elephant in the room…​ GSoC 2019.
Of course we are going to apply, stay tuned for new announcements.
We have already started collecting project ideas for the next year.
If you are interested to participate as a student or mentor,
please reach out to us using the &lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-gsoc-all-public&quot;&gt;GSoC SIG mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/12/hackathons-in-october/</id>
<title>Jenkins Hackathons in October</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/12/hackathons-in-october/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="events"></category>
<category term="community"></category>
<category term="hacktoberfest"></category>
<summary>
Traditionally there are a lot of events happening in the Jenkins organization in Autumn.
I would like to share some information about the upcoming hackathons.


Online Event: Hacktoberfest


As you probably know, there is an ongoing Hacktoberfest event.
The Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.
The event lasts from October 01 to October 31,
and you can can join it at any time.


See this blogpost for more information about Hacktoberfest in the Jenkins project.




Onsite Hackathons


Hacktoberfest is not the only event happening in the Jenkins community this month,
there are also a number of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally there are a lot of events happening in the Jenkins organization in Autumn.
I would like to share some information about the upcoming hackathons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;online-event-hacktoberfest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#online-event-hacktoberfest&quot;&gt;&lt;/a&gt;Online Event: Hacktoberfest&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you probably know, there is an ongoing &lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Hacktoberfest&lt;/a&gt; event.
The Jenkins project is participating in it and everybody is welcome to contribute to Jenkins as a part of this event.
The event lasts from October 01 to October 31,
and you can can join it at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/01/hacktoberfest/&quot;&gt;this blogpost&lt;/a&gt; for more information about Hacktoberfest in the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;onsite-hackathons&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#onsite-hackathons&quot;&gt;&lt;/a&gt;Onsite Hackathons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hacktoberfest is not the only event happening in the Jenkins community this month,
there are also a number of upcoming on-site events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oct 19 - Copenhagen, Denmark&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins Configuration as Code hackathon at
&lt;a href=&quot;https://www.code-conf.com/2018/day-of-jenkins-as-code/&quot;&gt;Day of Jenkins [as code&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Registration: all conference participants can attend&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 22 - Nice, France - Hackathon at
&lt;a href=&quot;https://www.cloudbees.com/devops-world/nice&quot;&gt;DevOps World - Jenkins World Nice&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/255555426/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure to also attend the &lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/253810578/&quot;&gt;Jenkins Contributor Summit&lt;/a&gt; on Oct 23 ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 27 - Beijing, China&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/Beijing-Jenkins-Area-Meetup/events/255607288/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oct 30 - Neuchatel, Switzerland - Hacktoberfest: Jenkins &amp;amp; Friends event (Swiss Jenkins Area meetup)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RSVP &lt;a href=&quot;https://www.meetup.com/Swiss-Jenkins-Area-Meetup/events/255345695/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All contributions during these in-person events qualify as
&lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Hacktoberfest&lt;/a&gt; contributions as well. :)
More events will also be announced later in the year,
e.g. we traditionally do a hackfest in Brussels after FOSDEM in February.
Follow our developer mailing lists and social media to receive announcements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/10/security-updates/</id>
<title>Important security updates for Jenkins</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/10/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.


For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.


Further improvements

In addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.


One such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.


Jenkins uses a fork of Jelly for the vast majority of the views it renders.
Since 2011,...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just released security updates to Jenkins, versions 2.146 and 2.138.2, that fix multiple security vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/security/advisory/2018-10-10&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/upgrade-guide/2.138/#upgrading-to-jenkins-lts-2-138-2&quot;&gt;LTS upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-improvements&quot;&gt;&lt;/a&gt;Further improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the security fixes listed in the security advisory, we also applied multiple improvements that make future security vulnerabilities more difficult, or even impossible to exploit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One such improvement concerns cross-site scripting vulnerabilities, and comes with a risk of regressions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins uses a fork of &lt;a href=&quot;https://commons.apache.org/proper/commons-jelly/&quot;&gt;Jelly&lt;/a&gt; for the vast majority of the views it renders.
Since 2011, it includes a feature that lets view authors opt in or out of automatic escaping of variable values for rendering in HTML, and since 2016, the plugin build tooling requires that views explicitly specify whether to apply this automatic escaping.
Details are available in &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/doc/developer/security/xss-prevention/&quot;&gt;the developer documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, if views do not declare whether to automatically escape, they were rendered without automatic escaping, and developers were expected to explicitly escape every variable reference that was not supposed to contain markup.
This has resulted in a number of cross-site scripting (XSS) vulnerabilities, most recently &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/security/advisory/2018-09-25/#SECURITY-1130&quot;&gt;SECURITY-1130 in Job Config History Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, we have decided to enable this automatic escaping by default if plugins do not specify a preference.
This can result in problems with some plugins if they need their output to remain unescaped.
We expect that those plugins will adapt pretty quickly to this change, as the fix is typically straightforward.
We track known affected plugins and their status on &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+2018-10-10+Stapler+security+hardening&quot;&gt;the Jenkins wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the mean time, users can set the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Features+controlled+by+system+properties&quot;&gt;system property&lt;/a&gt; &lt;code&gt;org.kohsuke.stapler.jelly.CustomJellyContext.escapeByDefault&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable this additional protection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/09/telemetry/</id>
<title>Improving Jenkins Release Quality using Uplink Telemetry
</title>
<updated>2019-07-20T18:06:52+00:00</updated>
<published>2018-10-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/10/09/telemetry/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<summary>
One of the major strengths of Jenkins is its customizability and extensibility.
With its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.


The downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.
And over the years, quite a few things have gone wrong.
The worst of these have been security fixes that have had unintended side effects.
Unlike regular changes, it&#8217;s not really feasible to roll back security fixes, so users have sometimes...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the major strengths of Jenkins is its customizability and extensibility.
With its plugin ecosystem and long list of (possibly hidden) options, Jenkins can be used for a wide range of use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The downside of all this flexibility is that, not knowing how people use Jenkins, we mostly rely on issues filed in our bug tracker to know when things go wrong.
And over the years, quite a few things have gone wrong.
The worst of these have been security fixes that have had unintended side effects.
Unlike regular changes, it’s not really feasible to roll back security fixes, so users have sometimes had to choose between security and functionality.
But even changes developed in the open, such as the introduction of &lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/01/13/jep-200/&quot;&gt;JEP-200&lt;/a&gt;, haven’t gone as smoothly as we hoped.
&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/blog/2018/08/31/shifting-gears/&quot;&gt;With big changes in the works&lt;/a&gt;, it’s more important than ever for us to have a better idea how Jenkins is used, so that we can deliver major changes safely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/projects/evergreen/&quot;&gt;Jenkins Evergreen&lt;/a&gt; solves this to some degree by being always connected to the Jenkins project and reporting back telemetry (mostly errors) allowing us to quickly react and provide fixes.
But that project is still pretty new, and its goal of being a more standardized Jenkins does not represent the breadth of configurations of the general user base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uplink-telemetry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#uplink-telemetry&quot;&gt;&lt;/a&gt;Uplink telemetry&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we recently extended the existing, very limited anonymous usage statistics by adding a simple, extensible telemetry reporting client.
We’re calling it &lt;em&gt;Uplink telemetry&lt;/em&gt;, based on the name of &lt;a href=&quot;https://github.com/jenkins-infra/uplink/&quot;&gt;the service it reports its data to&lt;/a&gt;.
It made its debut in Jenkins 2.143.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Uplink telemetry is designed to collect data in &lt;em&gt;trials&lt;/em&gt;, which are defined as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a well defined set of technical data with a specific purpose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a start and end date of the collection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detailed information explaining the scope and purpose of currently active trials is available in the inline help for the usage statistics control in the global configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://tempora-mutantur.github.io/jenkins.io/github_pages_test/images/post-images/2018-10-09/telemetry.png&quot; alt=&quot;Screenshot of detailed Uplink telemetry trial description in the Jenkins inline help&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, opting out of anonymous usage statistics there also disables the submission of Uplink telemetry.
And while Uplink trials report a per-instance UUID to help with collation (e.g. removal of duplicate submissions), that UUID is exclusively used for this purpose, and independent of all other properties of an instance.
This prevents us from correlating reported data with specific instances.
These measures are in place to strike a balance between the need to understand how Jenkins is used and respecting users' privacy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improving-jenkins-through-real-world-data&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improving-jenkins-through-real-world-data&quot;&gt;&lt;/a&gt;Improving Jenkins through real-world data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re already created our first trial.
Jenkins 2.143 includes a trial to gather information about how common it is for instances to use Java system properties to disable (parts of) security fixes.
When we publish a security fix and we’re not completely certain it is safe to apply for everyone, we add another of these options — just in case.
As you can imagine, quite a few of these hidden options exist.
Until now, user feedback in our issue tracker was the only way we could estimate the need for any of these options.
With Uplink, Jenkins will report that information to us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The trial is scheduled to run for the next six weeks, enough to hopefully gather this information from a large number of users of both LTS and weekly releases.
Our hope is that we will be able to remove some of these options entirely, as they might not be needed after all.
For others, we might need to consider elevating them to supported features, or finding better solutions obviating the need for them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the future, I will publish of some of what we have learned from the first trial running through Uplink telemetry.
I look forward to Jenkins continuing to improve with real-world data informing our future decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
